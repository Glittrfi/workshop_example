{
  "version": 3,
  "sources": ["../../@noble/hashes/src/hmac.ts", "../../@noble/curves/src/abstract/utils.ts", "../../@noble/curves/src/abstract/modular.ts", "../../@noble/curves/src/abstract/curve.ts", "../../@noble/curves/src/abstract/weierstrass.ts", "../../@noble/curves/src/_shortw_utils.ts", "../../@noble/curves/src/abstract/hash-to-curve.ts", "../../@noble/curves/src/secp256k1.ts", "../../@bitcoinerlab/secp256k1/dist/index.js", "../../ecpair/src/networks.js", "../../ecpair/src/types.js", "../../randombytes/browser.js", "../../inherits/inherits_browser.js", "../../events/events.js", "../../readable-stream/lib/internal/streams/stream-browser.js", "../../has-symbols/shams.js", "../../has-tostringtag/shams.js", "../../es-object-atoms/index.js", "../../es-errors/index.js", "../../es-errors/eval.js", "../../es-errors/range.js", "../../es-errors/ref.js", "../../es-errors/syntax.js", "../../es-errors/type.js", "../../es-errors/uri.js", "../../math-intrinsics/abs.js", "../../math-intrinsics/floor.js", "../../math-intrinsics/max.js", "../../math-intrinsics/min.js", "../../math-intrinsics/pow.js", "../../math-intrinsics/round.js", "../../math-intrinsics/isNaN.js", "../../math-intrinsics/sign.js", "../../gopd/gOPD.js", "../../gopd/index.js", "../../es-define-property/index.js", "../../has-symbols/index.js", "../../get-proto/Reflect.getPrototypeOf.js", "../../get-proto/Object.getPrototypeOf.js", "../../function-bind/implementation.js", "../../function-bind/index.js", "../../call-bind-apply-helpers/functionCall.js", "../../call-bind-apply-helpers/functionApply.js", "../../call-bind-apply-helpers/reflectApply.js", "../../call-bind-apply-helpers/actualApply.js", "../../call-bind-apply-helpers/index.js", "../../dunder-proto/get.js", "../../get-proto/index.js", "../../hasown/index.js", "../../get-intrinsic/index.js", "../../call-bound/index.js", "../../is-arguments/index.js", "../../is-regex/index.js", "../../safe-regex-test/index.js", "../../is-generator-function/index.js", "../../is-callable/index.js", "../../for-each/index.js", "../../possible-typed-array-names/index.js", "../../available-typed-arrays/index.js", "../../define-data-property/index.js", "../../has-property-descriptors/index.js", "../../set-function-length/index.js", "../../call-bind-apply-helpers/applyBind.js", "../../call-bind/index.js", "../../which-typed-array/index.js", "../../is-typed-array/index.js", "../../util/support/types.js", "../../util/support/isBufferBrowser.js", "../../util/util.js", "../../readable-stream/lib/internal/streams/buffer_list.js", "../../readable-stream/lib/internal/streams/destroy.js", "../../readable-stream/errors-browser.js", "../../readable-stream/lib/internal/streams/state.js", "../../util-deprecate/browser.js", "../../readable-stream/lib/_stream_writable.js", "../../readable-stream/lib/_stream_duplex.js", "../../string_decoder/lib/string_decoder.js", "../../readable-stream/lib/internal/streams/end-of-stream.js", "../../readable-stream/lib/internal/streams/async_iterator.js", "../../readable-stream/lib/internal/streams/from-browser.js", "../../readable-stream/lib/_stream_readable.js", "../../readable-stream/lib/_stream_transform.js", "../../readable-stream/lib/_stream_passthrough.js", "../../readable-stream/lib/internal/streams/pipeline.js", "../../readable-stream/readable-browser.js", "../../md5.js/node_modules/hash-base/index.js", "../../md5.js/index.js", "../../ripemd160/node_modules/hash-base/index.js", "../../ripemd160/index.js", "../../sha.js/hash.js", "../../sha.js/sha.js", "../../sha.js/sha1.js", "../../sha.js/sha256.js", "../../sha.js/sha224.js", "../../sha.js/sha512.js", "../../sha.js/sha384.js", "../../sha.js/index.js", "../../stream-browserify/index.js", "../../cipher-base/index.js", "../../create-hash/browser.js", "../../wif/node_modules/base-x/src/index.js", "../../wif/node_modules/bs58/index.js", "../../wif/node_modules/bs58check/base.js", "../../wif/node_modules/bs58check/index.js", "../../wif/index.js", "../../ecpair/src/testecc.js", "../../ecpair/src/ecpair.js", "../../ecpair/src/index.js", "../../@glittr-sdk/sdk/dist/utils/ecpair.js", "../../@glittr-sdk/sdk/dist/utils/network.js", "../../@glittr-sdk/sdk/dist/account/index.js", "../../bitcoin-address-validation/lib/index.esm.js", "../../@glittr-sdk/sdk/dist/utils/address.js", "../../@glittr-sdk/sdk/dist/utils/fetch.js", "../../@glittr-sdk/sdk/dist/helper/asset.js", "../../@glittr-sdk/sdk/dist/utils/electrum.js", "../../@glittr-sdk/sdk/dist/helper/fee.js", "../../@glittr-sdk/sdk/dist/utils/common.js", "../../@glittr-sdk/sdk/dist/utils/encode.js", "../../@glittr-sdk/sdk/dist/helper/const.js", "../../@glittr-sdk/sdk/dist/utils/varuint.js", "../../@glittr-sdk/sdk/dist/utils/varint.js", "../../@glittr-sdk/sdk/dist/utils/az-base26.js", "../../@glittr-sdk/sdk/dist/utils/header.js", "../../@glittr-sdk/sdk/dist/utils/index.js", "../../@glittr-sdk/sdk/dist/client/coinselect.js", "../../@glittr-sdk/borsh/lib/cjs/types.js", "../../@glittr-sdk/borsh/lib/cjs/buffer.js", "../../@glittr-sdk/borsh/lib/cjs/utils.js", "../../@glittr-sdk/borsh/lib/cjs/serialize.js", "../../@glittr-sdk/borsh/lib/cjs/deserialize.js", "../../@glittr-sdk/borsh/lib/cjs/index.js", "../../@glittr-sdk/sdk/dist/transaction/schema.js", "../../brotli-compress/index.mjs", "../../@glittr-sdk/sdk/dist/transaction/convert.js", "../../@glittr-sdk/sdk/dist/transaction/types.js", "../../@glittr-sdk/sdk/dist/transaction/message.js", "../../@glittr-sdk/sdk/dist/transaction/auto.js", "../../@glittr-sdk/sdk/dist/transaction/index.js", "../../@glittr-sdk/sdk/dist/client/index.js", "../../@glittr-sdk/sdk/dist/utxo/types.js", "../../@glittr-sdk/sdk/dist/utxo/index.js", "../../@glittr-sdk/sdk/dist/types.js", "../../@glittr-sdk/sdk/dist/helper/index.js", "../../@glittr-sdk/sdk/dist/index.js"],
  "sourcesContent": ["/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash } from './_assert.js';\nimport { Hash, toBytes, type CHash, type Input } from './utils.js';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n", "/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n", "/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n =/* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (modulo <= _0n) throw new Error('invalid modulus');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n    // Crash instead of infinity loop, we cannot reasonable count until P.\n    if (Z > 1000) throw new Error('Cannot find square root: likely non-prime P');\n  }\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(order: bigint): <T>(f: IField<T>, x: T) => T {\n  const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n  return <T>(f: IField<T>, x: T): T => f.pow(x, legendreConst);\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>): (x: T) => boolean {\n  const legendre = FpLegendre(f.ORDER);\n  return (x: T): boolean => {\n    const p = legendre(f, x);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(\n  n: bigint,\n  nBitLength?: number\n): {\n  nBitLength: number;\n  nByteLength: number;\n} {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      redef.sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n", "/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type IField, nLength, validateField } from './modular.js';\nimport { bitLen, validateObject } from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nfunction constTimeNegate<T extends Group<T>>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\nfunction calcWOpts(W: number, bits: number) {\n  validateW(W, bits);\n  const windows = Math.ceil(bits / W) + 1; // +1, because\n  const windowSize = 2 ** (W - 1); // -1 because we skip zero\n  return { windows, windowSize };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>(); // This allows use make points immutable (nothing changes inside)\n\nfunction getW(P: any): number {\n  return pointWindowSizes.get(P) || 1;\n}\n\nexport type IWNAF<T extends Group<T>> = {\n  constTimeNegate: <T extends Group<T>>(condition: boolean, item: T) => T;\n  hasPrecomputes(elm: T): boolean;\n  unsafeLadder(elm: T, n: bigint, p?: T): T;\n  precomputeWindow(elm: T, W: number): Group<T>[];\n  wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T };\n  wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc?: T): T;\n  getPrecomputes(W: number, P: T, transform: Mapper<T>): T[];\n  wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T };\n  wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T;\n  setWindowSize(P: T, W: number): void;\n};\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number): IWNAF<T> {\n  return {\n    constTimeNegate,\n\n    hasPrecomputes(elm: T) {\n      return getW(elm) !== 1;\n    },\n\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint, p = c.ZERO) {\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = calcWOpts(W, bits);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc: T = c.ZERO): T {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        if (n === _0n) break; // No need to go over empty scalar\n        // Extract W bits.\n        let wbits = Number(n & mask);\n        // Shift number by W bits.\n        n >>= shiftBy;\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n        if (wbits === 0) continue;\n        let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n        if (wbits < 0) curr = curr.negate();\n        // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n        acc = acc.add(curr);\n      }\n      return acc;\n    },\n\n    getPrecomputes(W: number, P: T, transform: Mapper<T>): T[] {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) pointPrecomputes.set(P, transform(comp));\n      }\n      return comp;\n    },\n\n    wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      const W = getW(P);\n      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n    },\n\n    wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T {\n      const W = getW(P);\n      if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n    },\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W, bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  if (points.length !== scalars.length)\n    throw new Error('arrays of points and scalars must have equal length');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(points.length));\n  const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n  const MASK = (1 << windowSize) - 1;\n  const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < scalars.length; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  windowSize: number\n): (scalars: bigint[]) => T {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = BigInt((1 << windowSize) - 1);\n  const tables = points.map((p: T) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): T => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n", "/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n  pippenger,\n  validateBasic,\n  wNAF,\n} from './curve.js';\nimport {\n  Field,\n  type IField,\n  getMinHashLength,\n  invert,\n  mapHashToField,\n  mod,\n  validateField,\n} from './modular.js';\nimport * as ut from './utils.js';\nimport { type CHash, type Hex, type PrivKey, abool, ensureBytes, memoized } from './utils.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean; format?: 'compact' | 'der' | undefined };\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nexport type CurvePointsTypeWithLength<T> = Readonly<\n  CurvePointsType<T> & { nByteLength: number; nBitLength: number }\n>;\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>): CurvePointsTypeWithLength<T> {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\n\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = ut.numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = ut.numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = ut.numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return b2n(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return ut.inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length))\n        throw new Error('invalid private key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(\n        'invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key\n      );\n    }\n    if (wrapPrivateKey) num = mod(num, N); // disabled by default, enabled for BLS\n    ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (x, y, z) ∋ (x=x/z, y=y/z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      Object.freeze(this);\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', sc, _0n, N);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (this.is0() || sc === _1n) return this;\n\n      // Case a: no endomorphism. Case b: has precomputes.\n      if (!endo || wnaf.hasPrecomputes(this))\n        return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n\n      // Case c: endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', scalar, _1n, N);\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      abool('isCompressed', isCompressed);\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(\n  curve: CurveType\n): Readonly<CurveType & { nByteLength: number; nBitLength: number }> {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!ut.inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        const cl = compressedLen;\n        const ul = uncompressedLen;\n        throw new Error(\n          'invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n      ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = getMinHashLength(CURVE.n);\n      return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\"\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    const { lowS, prehash, format } = opts;\n\n    // Verify opts, deduce signature format\n    validateSigVerOpts(opts);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    if (format !== undefined && format !== 'compact' && format !== 'der')\n      throw new Error('format must be compact or der');\n    const isHex = typeof sg === 'string' || ut.isBytes(sg);\n    const isObj =\n      !isHex &&\n      !format &&\n      typeof sg === 'object' &&\n      sg !== null &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (isObj) _sig = new Signature(sg.r, sg.s);\n      if (isHex) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n", "/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport type { CHash } from './abstract/utils.js';\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.js';\n\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash: CHash): {\n  hash: CHash;\n  hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => Uint8Array;\n  randomBytes: typeof randomBytes;\n} {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\nexport type CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\n\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, ...getHash(hash) });\n  return { ...create(defHash), create };\n}\n", "/**\n * hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380).\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { AffinePoint, Group, GroupConstructor } from './curve.js';\nimport { type IField, mod } from './modular.js';\nimport type { CHash } from './utils.js';\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\nexport type UnicodeOrBytes = string | Uint8Array;\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  anum(value);\n  anum(length);\n  if (value < 0 || value >= 1 << (8 * length)) throw new Error('invalid I2OSP input: ' + value);\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport type XY<T> = (\n  x: T,\n  y: T\n) => {\n  x: T;\n  y: T;\n};\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]): XY<T> {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x: x, y: y };\n  };\n}\n\n/** Point interface, which curves must implement to work correctly with the module. */\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\nexport type HTFMethod<T> = (msg: Uint8Array, options?: htfBasicOpts) => H2CPoint<T>;\nexport type MapMethod<T> = (scalars: bigint[]) => H2CPoint<T>;\n\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n): {\n  hashToCurve: HTFMethod<T>;\n  encodeToCurve: HTFMethod<T>;\n  mapToCurve: MapMethod<T>;\n} {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // Same as encodeToCurve, but without hash\n    mapToCurve(scalars: bigint[]): H2CPoint<T> {\n      if (!Array.isArray(scalars)) throw new Error('mapToCurve: expected array of bigints');\n      for (const i of scalars)\n        if (typeof i !== 'bigint') throw new Error('mapToCurve: expected array of bigints');\n      const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n", "/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.js';\nimport { createHasher, type HTFMethod, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport {\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n} from './abstract/utils.js';\nimport { mapToCurveSimpleSWU, type ProjPointType as PointType } from './abstract/weierstrass.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n *\n * @example\n * import { secp256k1 } from '@noble/curves/secp256k1';\n *\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7),\n    Fp: Fpk1, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n      // Endomorphism, see above\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1P)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1N)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    lift_x: typeof lift_x;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    numberToBytesBE: typeof numberToBytesBE;\n    bytesToNumberBE: typeof bytesToNumberBE;\n    taggedHash: typeof taggedHash;\n    mod: typeof mod;\n  };\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\n\n/** secp256k1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.hashToCurve)();\n\n/** secp256k1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.encodeToCurve)();\n", "'use strict';\n\nvar secp256k1 = require('@noble/curves/secp256k1');\nvar mod = require('@noble/curves/abstract/modular');\nvar utils = require('@noble/curves/abstract/utils');\n\nfunction _interopNamespaceDefault(e) {\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\n\nvar mod__namespace = /*#__PURE__*/_interopNamespaceDefault(mod);\nvar utils__namespace = /*#__PURE__*/_interopNamespaceDefault(utils);\n\n/*\n * Copyright (c) 2023 Jose-Luis Landabaso\n * Distributed under the MIT software license.\n *\n * This file includes code from the following sources:\n *  * Paul Miller's @noble/secp256k1 (specifically, the privateAdd,\n *    privateNegate, pointAddScalar, and pointMultiply functions).\n *  * Some pieces from tiny-secp256k1\n *    (https://github.com/bitcoinjs/tiny-secp256k1)\n *  * It also uses code from BitGo's BitGoJS library\n *    (https://github.com/BitGo/BitGoJS)\n *\n * This package's tests are based on modified versions of tests from\n * tiny-secp256k1 (https://github.com/bitcoinjs/tiny-secp256k1/tests).\n */\n\nconst Point = secp256k1.secp256k1.ProjectivePoint;\n\nconst THROW_BAD_PRIVATE = \"Expected Private\";\nconst THROW_BAD_POINT = \"Expected Point\";\nconst THROW_BAD_TWEAK = \"Expected Tweak\";\nconst THROW_BAD_HASH = \"Expected Hash\";\nconst THROW_BAD_SIGNATURE = \"Expected Signature\";\nconst THROW_BAD_EXTRA_DATA = \"Expected Extra Data (32 bytes)\";\nconst THROW_BAD_SCALAR = \"Expected Scalar\";\nconst THROW_BAD_RECOVERY_ID = \"Bad Recovery Id\";\n\nconst HASH_SIZE = 32;\nconst TWEAK_SIZE = 32;\nconst BN32_N = new Uint8Array([\n  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n  254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65,\n]);\nconst EXTRA_DATA_SIZE = 32;\nconst BN32_ZERO = new Uint8Array(32);\nconst BN32_P_MINUS_N = new Uint8Array([\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 69, 81, 35, 25, 80, 183, 95,\n  196, 64, 45, 161, 114, 47, 201, 186, 238,\n]);\nconst _1n = BigInt(1);\n\nfunction isUint8Array(value) {\n  return value instanceof Uint8Array;\n}\n\nfunction cmpBN32(data1, data2) {\n  for (let i = 0; i < 32; ++i) {\n    if (data1[i] !== data2[i]) {\n      return data1[i] < data2[i] ? -1 : 1;\n    }\n  }\n  return 0;\n}\n\nfunction isZero(x) {\n  return cmpBN32(x, BN32_ZERO) === 0;\n}\n\nfunction isTweak(tweak) {\n  if (\n    !(tweak instanceof Uint8Array) ||\n    tweak.length !== TWEAK_SIZE ||\n    cmpBN32(tweak, BN32_N) >= 0\n  ) {\n    return false;\n  }\n  return true;\n}\n\nfunction isSignature(signature) {\n  return (\n    signature instanceof Uint8Array &&\n    signature.length === 64 &&\n    cmpBN32(signature.subarray(0, 32), BN32_N) < 0 &&\n    cmpBN32(signature.subarray(32, 64), BN32_N) < 0\n  );\n}\n\nfunction isSigrLessThanPMinusN(signature) {\n  return (\n    isUint8Array(signature) &&\n    signature.length === 64 &&\n    cmpBN32(signature.subarray(0, 32), BN32_P_MINUS_N) < 0\n  );\n}\n\nfunction isSignatureNonzeroRS(signature) {\n  return !(\n    isZero(signature.subarray(0, 32)) || isZero(signature.subarray(32, 64))\n  );\n}\n\nfunction isHash(h) {\n  return h instanceof Uint8Array && h.length === HASH_SIZE;\n}\n\nfunction isExtraData(e) {\n  return (\n    e === undefined || (e instanceof Uint8Array && e.length === EXTRA_DATA_SIZE)\n  );\n}\n\nfunction normalizeScalar(scalar) {\n  let num;\n  if (typeof scalar === \"bigint\") {\n    num = scalar;\n  } else if (\n    typeof scalar === \"number\" &&\n    Number.isSafeInteger(scalar) &&\n    scalar >= 0\n  ) {\n    num = BigInt(scalar);\n  } else if (typeof scalar === \"string\") {\n    if (scalar.length !== 64)\n      throw new Error(\"Expected 32 bytes of private scalar\");\n    num = utils__namespace.hexToNumber(scalar);\n  } else if (scalar instanceof Uint8Array) {\n    if (scalar.length !== 32)\n      throw new Error(\"Expected 32 bytes of private scalar\");\n    num = utils__namespace.bytesToNumberBE(scalar);\n  } else {\n    throw new TypeError(\"Expected valid private scalar\");\n  }\n  if (num < 0) throw new Error(\"Expected private scalar >= 0\");\n  return num;\n}\n\nfunction normalizePrivateKey(privateKey) {\n  return secp256k1.secp256k1.utils.normPrivateKeyToScalar(privateKey);\n}\n\nfunction _privateAdd(privateKey, tweak) {\n  const p = normalizePrivateKey(privateKey);\n  const t = normalizeScalar(tweak);\n  const add = utils__namespace.numberToBytesBE(mod__namespace.mod(p + t, secp256k1.secp256k1.CURVE.n), 32);\n  return secp256k1.secp256k1.utils.isValidPrivateKey(add) ? add : null;\n}\n\nfunction _privateSub(privateKey, tweak) {\n  const p = normalizePrivateKey(privateKey);\n  const t = normalizeScalar(tweak);\n  const sub = utils__namespace.numberToBytesBE(mod__namespace.mod(p - t, secp256k1.secp256k1.CURVE.n), 32);\n  return secp256k1.secp256k1.utils.isValidPrivateKey(sub) ? sub : null;\n}\n\nfunction _privateNegate(privateKey) {\n  const p = normalizePrivateKey(privateKey);\n  const not = utils__namespace.numberToBytesBE(secp256k1.secp256k1.CURVE.n - p, 32);\n  return secp256k1.secp256k1.utils.isValidPrivateKey(not) ? not : null;\n}\n\nfunction _pointAddScalar(p, tweak, isCompressed) {\n  const P = fromHex(p);\n  const t = normalizeScalar(tweak);\n  // multiplyAndAddUnsafe(P, scalar, 1) = P + scalar*G\n  const Q = Point.BASE.multiplyAndAddUnsafe(P, t, _1n);\n  if (!Q) throw new Error(\"Tweaked point at infinity\");\n  return Q.toRawBytes(isCompressed);\n}\n\nfunction _pointMultiply(p, tweak, isCompressed) {\n  const P = fromHex(p);\n  const h = typeof tweak === \"string\" ? tweak : utils__namespace.bytesToHex(tweak);\n  const t = utils__namespace.hexToNumber(h);\n  return P.multiply(t).toRawBytes(isCompressed);\n}\n\nfunction assumeCompression(compressed, p) {\n  if (compressed === undefined) {\n    return p !== undefined ? isPointCompressed(p) : true;\n  }\n  return !!compressed;\n}\n\nfunction throwToNull(fn) {\n  try {\n    return fn();\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction fromXOnly(bytes) {\n  return secp256k1.schnorr.utils.lift_x(utils__namespace.bytesToNumberBE(bytes));\n}\n\nfunction fromHex(bytes) {\n  return bytes.length === 32 ? fromXOnly(bytes) : Point.fromHex(bytes);\n}\n\nfunction _isPoint(p, xOnly) {\n  if ((p.length === 32) !== xOnly) return false;\n  try {\n    if (xOnly) return !!fromXOnly(p);\n    else return !!Point.fromHex(p);\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isPoint(p) {\n  return _isPoint(p, false);\n}\n\nfunction isPointCompressed(p) {\n  const PUBLIC_KEY_COMPRESSED_SIZE = 33;\n  return _isPoint(p, false) && p.length === PUBLIC_KEY_COMPRESSED_SIZE;\n}\n\nfunction isPrivate(d) {\n  return secp256k1.secp256k1.utils.isValidPrivateKey(d);\n}\n\nfunction isXOnlyPoint(p) {\n  return _isPoint(p, true);\n}\n\nfunction xOnlyPointAddTweak(p, tweak) {\n  if (!isXOnlyPoint(p)) {\n    throw new Error(THROW_BAD_POINT);\n  }\n  if (!isTweak(tweak)) {\n    throw new Error(THROW_BAD_TWEAK);\n  }\n  return throwToNull(() => {\n    const P = _pointAddScalar(p, tweak, true);\n    const parity = P[0] % 2 === 1 ? 1 : 0;\n    return { parity, xOnlyPubkey: P.slice(1) };\n  });\n}\n\nfunction xOnlyPointFromPoint(p) {\n  if (!isPoint(p)) {\n    throw new Error(THROW_BAD_POINT);\n  }\n  return p.slice(1, 33);\n}\n\nfunction pointFromScalar(sk, compressed) {\n  if (!isPrivate(sk)) {\n    throw new Error(THROW_BAD_PRIVATE);\n  }\n  return throwToNull(() =>\n    secp256k1.secp256k1.getPublicKey(sk, assumeCompression(compressed)),\n  );\n}\n\nfunction xOnlyPointFromScalar(d) {\n  if (!isPrivate(d)) {\n    throw new Error(THROW_BAD_PRIVATE);\n  }\n  return xOnlyPointFromPoint(pointFromScalar(d));\n}\n\nfunction pointCompress(p, compressed) {\n  if (!isPoint(p)) {\n    throw new Error(THROW_BAD_POINT);\n  }\n  return fromHex(p).toRawBytes(assumeCompression(compressed, p));\n}\n\nfunction pointMultiply(a, tweak, compressed) {\n  if (!isPoint(a)) {\n    throw new Error(THROW_BAD_POINT);\n  }\n  if (!isTweak(tweak)) {\n    throw new Error(THROW_BAD_TWEAK);\n  }\n  return throwToNull(() =>\n    _pointMultiply(a, tweak, assumeCompression(compressed, a)),\n  );\n}\n\nfunction pointAdd(a, b, compressed) {\n  if (!isPoint(a) || !isPoint(b)) {\n    throw new Error(THROW_BAD_POINT);\n  }\n  return throwToNull(() => {\n    const A = fromHex(a);\n    const B = fromHex(b);\n    if (A.equals(B.negate())) {\n      return null;\n    } else {\n      return A.add(B).toRawBytes(assumeCompression(compressed, a));\n    }\n  });\n}\n\nfunction pointAddScalar(p, tweak, compressed) {\n  if (!isPoint(p)) {\n    throw new Error(THROW_BAD_POINT);\n  }\n  if (!isTweak(tweak)) {\n    throw new Error(THROW_BAD_TWEAK);\n  }\n  return throwToNull(() =>\n    _pointAddScalar(p, tweak, assumeCompression(compressed, p)),\n  );\n}\n\nfunction privateAdd(d, tweak) {\n  if (!isPrivate(d)) {\n    throw new Error(THROW_BAD_PRIVATE);\n  }\n  if (!isTweak(tweak)) {\n    throw new Error(THROW_BAD_TWEAK);\n  }\n  return throwToNull(() => _privateAdd(d, tweak));\n}\n\nfunction privateSub(d, tweak) {\n  if (!isPrivate(d)) {\n    throw new Error(THROW_BAD_PRIVATE);\n  }\n  if (!isTweak(tweak)) {\n    throw new Error(THROW_BAD_TWEAK);\n  }\n  return throwToNull(() => _privateSub(d, tweak));\n}\n\nfunction privateNegate(d) {\n  if (!isPrivate(d)) {\n    throw new Error(THROW_BAD_PRIVATE);\n  }\n  return _privateNegate(d);\n}\n\nfunction sign(h, d, e) {\n  if (!isPrivate(d)) {\n    throw new Error(THROW_BAD_PRIVATE);\n  }\n  if (!isHash(h)) {\n    throw new Error(THROW_BAD_SCALAR);\n  }\n  if (!isExtraData(e)) {\n    throw new Error(THROW_BAD_EXTRA_DATA);\n  }\n  return secp256k1.secp256k1.sign(h, d, { extraEntropy: e }).toCompactRawBytes();\n}\n\nfunction signRecoverable(h, d, e) {\n  if (!isPrivate(d)) {\n    throw new Error(THROW_BAD_PRIVATE);\n  }\n  if (!isHash(h)) {\n    throw new Error(THROW_BAD_SCALAR);\n  }\n  if (!isExtraData(e)) {\n    throw new Error(THROW_BAD_EXTRA_DATA);\n  }\n  const sig = secp256k1.secp256k1.sign(h, d, { extraEntropy: e });\n  return {\n    signature: sig.toCompactRawBytes(),\n    recoveryId: sig.recovery,\n  };\n}\n\nfunction signSchnorr(h, d, e) {\n  if (!isPrivate(d)) {\n    throw new Error(THROW_BAD_PRIVATE);\n  }\n  if (!isHash(h)) {\n    throw new Error(THROW_BAD_SCALAR);\n  }\n  if (!isExtraData(e)) {\n    throw new Error(THROW_BAD_EXTRA_DATA);\n  }\n  return secp256k1.schnorr.sign(h, d, e);\n}\n\nfunction recover(h, signature, recoveryId, compressed) {\n  if (!isHash(h)) {\n    throw new Error(THROW_BAD_HASH);\n  }\n\n  if (!isSignature(signature) || !isSignatureNonzeroRS(signature)) {\n    throw new Error(THROW_BAD_SIGNATURE);\n  }\n\n  if (recoveryId & 2) {\n    if (!isSigrLessThanPMinusN(signature))\n      throw new Error(THROW_BAD_RECOVERY_ID);\n  }\n  if (!isXOnlyPoint(signature.subarray(0, 32))) {\n    throw new Error(THROW_BAD_SIGNATURE);\n  }\n\n  const s =\n    secp256k1.secp256k1.Signature.fromCompact(signature).addRecoveryBit(recoveryId);\n  const Q = s.recoverPublicKey(h);\n  if (!Q) throw new Error(THROW_BAD_SIGNATURE);\n  return Q.toRawBytes(assumeCompression(compressed));\n}\n\nfunction verify(h, Q, signature, strict) {\n  if (!isPoint(Q)) {\n    throw new Error(THROW_BAD_POINT);\n  }\n  if (!isSignature(signature)) {\n    throw new Error(THROW_BAD_SIGNATURE);\n  }\n  if (!isHash(h)) {\n    throw new Error(THROW_BAD_SCALAR);\n  }\n  return secp256k1.secp256k1.verify(signature, h, Q, { lowS: strict });\n}\n\nfunction verifySchnorr(h, Q, signature) {\n  if (!isXOnlyPoint(Q)) {\n    throw new Error(THROW_BAD_POINT);\n  }\n  if (!isSignature(signature)) {\n    throw new Error(THROW_BAD_SIGNATURE);\n  }\n  if (!isHash(h)) {\n    throw new Error(THROW_BAD_SCALAR);\n  }\n  return secp256k1.schnorr.verify(signature, h, Q);\n}\n\nexports.isPoint = isPoint;\nexports.isPointCompressed = isPointCompressed;\nexports.isPrivate = isPrivate;\nexports.isXOnlyPoint = isXOnlyPoint;\nexports.pointAdd = pointAdd;\nexports.pointAddScalar = pointAddScalar;\nexports.pointCompress = pointCompress;\nexports.pointFromScalar = pointFromScalar;\nexports.pointMultiply = pointMultiply;\nexports.privateAdd = privateAdd;\nexports.privateNegate = privateNegate;\nexports.privateSub = privateSub;\nexports.recover = recover;\nexports.sign = sign;\nexports.signRecoverable = signRecoverable;\nexports.signSchnorr = signSchnorr;\nexports.verify = verify;\nexports.verifySchnorr = verifySchnorr;\nexports.xOnlyPointAddTweak = xOnlyPointAddTweak;\nexports.xOnlyPointFromPoint = xOnlyPointFromPoint;\nexports.xOnlyPointFromScalar = xOnlyPointFromScalar;\n", "'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.testnet = exports.bitcoin = void 0;\nexports.bitcoin = {\n  messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n  bech32: 'bc',\n  bip32: {\n    public: 0x0488b21e,\n    private: 0x0488ade4,\n  },\n  pubKeyHash: 0x00,\n  scriptHash: 0x05,\n  wif: 0x80,\n};\nexports.testnet = {\n  messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n  bech32: 'tb',\n  bip32: {\n    public: 0x043587cf,\n    private: 0x04358394,\n  },\n  pubKeyHash: 0x6f,\n  scriptHash: 0xc4,\n  wif: 0xef,\n};\n", "'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.maybe =\n  exports.Boolean =\n  exports.Array =\n  exports.Buffer256bit =\n  exports.Network =\n  exports.typeforce =\n    void 0;\nexports.typeforce = require('typeforce');\n// exposed, external API\nexports.Network = exports.typeforce.compile({\n  messagePrefix: exports.typeforce.oneOf(\n    exports.typeforce.Buffer,\n    exports.typeforce.String,\n  ),\n  bip32: {\n    public: exports.typeforce.UInt32,\n    private: exports.typeforce.UInt32,\n  },\n  pubKeyHash: exports.typeforce.UInt8,\n  scriptHash: exports.typeforce.UInt8,\n  wif: exports.typeforce.UInt8,\n});\nexports.Buffer256bit = exports.typeforce.BufferN(32);\nexports.Array = exports.typeforce.Array;\nexports.Boolean = exports.typeforce.Boolean; // tslint:disable-line variable-name\nexports.maybe = exports.typeforce.maybe;\n", "'use strict'\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nvar MAX_BYTES = 65536\n\n// Node supports requesting up to this number of bytes\n// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48\nvar MAX_UINT32 = 4294967295\n\nfunction oldBrowser () {\n  throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11')\n}\n\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = global.crypto || global.msCrypto\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes\n} else {\n  module.exports = oldBrowser\n}\n\nfunction randomBytes (size, cb) {\n  // phantomjs needs to throw\n  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')\n\n  var bytes = Buffer.allocUnsafe(size)\n\n  if (size > 0) {  // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues\n      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n      for (var generated = 0; generated < size; generated += MAX_BYTES) {\n        // buffer.slice automatically checks if the end is past the end of\n        // the buffer so we don't have to here\n        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))\n      }\n    } else {\n      crypto.getRandomValues(bytes)\n    }\n  }\n\n  if (typeof cb === 'function') {\n    return process.nextTick(function () {\n      cb(null, bytes)\n    })\n  }\n\n  return bytes\n}\n", "if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n", "module.exports = require('events').EventEmitter;\n", "'use strict';\n\n/** @type {import('./shams')} */\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\t/** @type {{ [k in symbol]?: unknown }} */\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\t// eslint-disable-next-line no-extra-parens\n\t\tvar descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n", "'use strict';\n\nvar hasSymbols = require('has-symbols/shams');\n\n/** @type {import('.')} */\nmodule.exports = function hasToStringTagShams() {\n\treturn hasSymbols() && !!Symbol.toStringTag;\n};\n", "'use strict';\n\n/** @type {import('.')} */\nmodule.exports = Object;\n", "'use strict';\n\n/** @type {import('.')} */\nmodule.exports = Error;\n", "'use strict';\n\n/** @type {import('./eval')} */\nmodule.exports = EvalError;\n", "'use strict';\n\n/** @type {import('./range')} */\nmodule.exports = RangeError;\n", "'use strict';\n\n/** @type {import('./ref')} */\nmodule.exports = ReferenceError;\n", "'use strict';\n\n/** @type {import('./syntax')} */\nmodule.exports = SyntaxError;\n", "'use strict';\n\n/** @type {import('./type')} */\nmodule.exports = TypeError;\n", "'use strict';\n\n/** @type {import('./uri')} */\nmodule.exports = URIError;\n", "'use strict';\n\n/** @type {import('./abs')} */\nmodule.exports = Math.abs;\n", "'use strict';\n\n/** @type {import('./floor')} */\nmodule.exports = Math.floor;\n", "'use strict';\n\n/** @type {import('./max')} */\nmodule.exports = Math.max;\n", "'use strict';\n\n/** @type {import('./min')} */\nmodule.exports = Math.min;\n", "'use strict';\n\n/** @type {import('./pow')} */\nmodule.exports = Math.pow;\n", "'use strict';\n\n/** @type {import('./round')} */\nmodule.exports = Math.round;\n", "'use strict';\n\n/** @type {import('./isNaN')} */\nmodule.exports = Number.isNaN || function isNaN(a) {\n\treturn a !== a;\n};\n", "'use strict';\n\nvar $isNaN = require('./isNaN');\n\n/** @type {import('./sign')} */\nmodule.exports = function sign(number) {\n\tif ($isNaN(number) || number === 0) {\n\t\treturn number;\n\t}\n\treturn number < 0 ? -1 : +1;\n};\n", "'use strict';\n\n/** @type {import('./gOPD')} */\nmodule.exports = Object.getOwnPropertyDescriptor;\n", "'use strict';\n\n/** @type {import('.')} */\nvar $gOPD = require('./gOPD');\n\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n", "'use strict';\n\n/** @type {import('.')} */\nvar $defineProperty = Object.defineProperty || false;\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = false;\n\t}\n}\n\nmodule.exports = $defineProperty;\n", "'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\n/** @type {import('.')} */\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n", "'use strict';\n\n/** @type {import('./Reflect.getPrototypeOf')} */\nmodule.exports = (typeof Reflect !== 'undefined' && Reflect.getPrototypeOf) || null;\n", "'use strict';\n\nvar $Object = require('es-object-atoms');\n\n/** @type {import('./Object.getPrototypeOf')} */\nmodule.exports = $Object.getPrototypeOf || null;\n", "'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar toStr = Object.prototype.toString;\nvar max = Math.max;\nvar funcType = '[object Function]';\n\nvar concatty = function concatty(a, b) {\n    var arr = [];\n\n    for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n    }\n\n    return arr;\n};\n\nvar slicy = function slicy(arrLike, offset) {\n    var arr = [];\n    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n    }\n    return arr;\n};\n\nvar joiny = function (arr, joiner) {\n    var str = '';\n    for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n            str += joiner;\n        }\n    }\n    return str;\n};\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                concatty(args, arguments)\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        }\n        return target.apply(\n            that,\n            concatty(args, arguments)\n        );\n\n    };\n\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = '$' + i;\n    }\n\n    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n", "'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n", "'use strict';\n\n/** @type {import('./functionCall')} */\nmodule.exports = Function.prototype.call;\n", "'use strict';\n\n/** @type {import('./functionApply')} */\nmodule.exports = Function.prototype.apply;\n", "'use strict';\n\n/** @type {import('./reflectApply')} */\nmodule.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;\n", "'use strict';\n\nvar bind = require('function-bind');\n\nvar $apply = require('./functionApply');\nvar $call = require('./functionCall');\nvar $reflectApply = require('./reflectApply');\n\n/** @type {import('./actualApply')} */\nmodule.exports = $reflectApply || bind.call($call, $apply);\n", "'use strict';\n\nvar bind = require('function-bind');\nvar $TypeError = require('es-errors/type');\n\nvar $call = require('./functionCall');\nvar $actualApply = require('./actualApply');\n\n/** @type {import('.')} */\nmodule.exports = function callBindBasic(args) {\n\tif (args.length < 1 || typeof args[0] !== 'function') {\n\t\tthrow new $TypeError('a function is required');\n\t}\n\treturn $actualApply(bind, $call, args);\n};\n", "'use strict';\n\nvar callBind = require('call-bind-apply-helpers');\nvar gOPD = require('gopd');\n\nvar hasProtoAccessor;\ntry {\n\t// eslint-disable-next-line no-extra-parens, no-proto\n\thasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ ([]).__proto__ === Array.prototype;\n} catch (e) {\n\tif (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {\n\t\tthrow e;\n\t}\n}\n\n// eslint-disable-next-line no-extra-parens\nvar desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ ('__proto__'));\n\nvar $Object = Object;\nvar $getPrototypeOf = $Object.getPrototypeOf;\n\n/** @type {import('./get')} */\nmodule.exports = desc && typeof desc.get === 'function'\n\t? callBind([desc.get])\n\t: typeof $getPrototypeOf === 'function'\n\t\t? /** @type {import('./get')} */ function getDunder(value) {\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\treturn $getPrototypeOf(value == null ? value : $Object(value));\n\t\t}\n\t\t: false;\n", "'use strict';\n\nvar reflectGetProto = require('./Reflect.getPrototypeOf');\nvar originalGetProto = require('./Object.getPrototypeOf');\n\nvar getDunderProto = require('dunder-proto/get');\n\n/** @type {import('.')} */\nmodule.exports = reflectGetProto\n\t? function getProto(O) {\n\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\treturn reflectGetProto(O);\n\t}\n\t: originalGetProto\n\t\t? function getProto(O) {\n\t\t\tif (!O || (typeof O !== 'object' && typeof O !== 'function')) {\n\t\t\t\tthrow new TypeError('getProto: not an object');\n\t\t\t}\n\t\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\t\treturn originalGetProto(O);\n\t\t}\n\t\t: getDunderProto\n\t\t\t? function getProto(O) {\n\t\t\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\t\t\treturn getDunderProto(O);\n\t\t\t}\n\t\t\t: null;\n", "'use strict';\n\nvar call = Function.prototype.call;\nvar $hasOwn = Object.prototype.hasOwnProperty;\nvar bind = require('function-bind');\n\n/** @type {import('.')} */\nmodule.exports = bind.call(call, $hasOwn);\n", "'use strict';\n\nvar undefined;\n\nvar $Object = require('es-object-atoms');\n\nvar $Error = require('es-errors');\nvar $EvalError = require('es-errors/eval');\nvar $RangeError = require('es-errors/range');\nvar $ReferenceError = require('es-errors/ref');\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $URIError = require('es-errors/uri');\n\nvar abs = require('math-intrinsics/abs');\nvar floor = require('math-intrinsics/floor');\nvar max = require('math-intrinsics/max');\nvar min = require('math-intrinsics/min');\nvar pow = require('math-intrinsics/pow');\nvar round = require('math-intrinsics/round');\nvar sign = require('math-intrinsics/sign');\n\nvar $Function = Function;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = require('gopd');\nvar $defineProperty = require('es-define-property');\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\n\nvar getProto = require('get-proto');\nvar $ObjectGPO = require('get-proto/Object.getPrototypeOf');\nvar $ReflectGPO = require('get-proto/Reflect.getPrototypeOf');\n\nvar $apply = require('call-bind-apply-helpers/functionApply');\nvar $call = require('call-bind-apply-helpers/functionCall');\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t__proto__: null,\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,\n\t'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': $Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': $EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': $Object,\n\t'%Object.getOwnPropertyDescriptor%': $gOPD,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': $RangeError,\n\t'%ReferenceError%': $ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': $URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,\n\n\t'%Function.prototype.call%': $call,\n\t'%Function.prototype.apply%': $apply,\n\t'%Object.defineProperty%': $defineProperty,\n\t'%Object.getPrototypeOf%': $ObjectGPO,\n\t'%Math.abs%': abs,\n\t'%Math.floor%': floor,\n\t'%Math.max%': max,\n\t'%Math.min%': min,\n\t'%Math.pow%': pow,\n\t'%Math.round%': round,\n\t'%Math.sign%': sign,\n\t'%Reflect.getPrototypeOf%': $ReflectGPO\n};\n\nif (getProto) {\n\ttry {\n\t\tnull.error; // eslint-disable-line no-unused-expressions\n\t} catch (e) {\n\t\t// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n\t\tvar errorProto = getProto(getProto(e));\n\t\tINTRINSICS['%Error.prototype%'] = errorProto;\n\t}\n}\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen && getProto) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t__proto__: null,\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('hasown');\nvar $concat = bind.call($call, Array.prototype.concat);\nvar $spliceApply = bind.call($apply, Array.prototype.splice);\nvar $replace = bind.call($call, String.prototype.replace);\nvar $strSlice = bind.call($call, String.prototype.slice);\nvar $exec = bind.call($call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBindBasic = require('call-bind-apply-helpers');\n\n/** @type {(thisArg: string, searchString: string, position?: number) => number} */\nvar $indexOf = callBindBasic([GetIntrinsic('%String.prototype.indexOf%')]);\n\n/** @type {import('.')} */\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\t// eslint-disable-next-line no-extra-parens\n\tvar intrinsic = /** @type {Parameters<typeof callBindBasic>[0][0]} */ (GetIntrinsic(name, !!allowMissing));\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBindBasic([intrinsic]);\n\t}\n\treturn intrinsic;\n};\n", "'use strict';\n\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar callBound = require('call-bound');\n\nvar $toString = callBound('Object.prototype.toString');\n\n/** @type {import('.')} */\nvar isStandardArguments = function isArguments(value) {\n\tif (\n\t\thasToStringTag\n\t\t&& value\n\t\t&& typeof value === 'object'\n\t\t&& Symbol.toStringTag in value\n\t) {\n\t\treturn false;\n\t}\n\treturn $toString(value) === '[object Arguments]';\n};\n\n/** @type {import('.')} */\nvar isLegacyArguments = function isArguments(value) {\n\tif (isStandardArguments(value)) {\n\t\treturn true;\n\t}\n\treturn value !== null\n\t\t&& typeof value === 'object'\n\t\t&& 'length' in value\n\t\t&& typeof value.length === 'number'\n\t\t&& value.length >= 0\n\t\t&& $toString(value) !== '[object Array]'\n\t\t&& 'callee' in value\n\t\t&& $toString(value.callee) === '[object Function]';\n};\n\nvar supportsStandardArguments = (function () {\n\treturn isStandardArguments(arguments);\n}());\n\n// @ts-expect-error TODO make this not error\nisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\n/** @type {import('.')} */\nmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n", "'use strict';\n\nvar callBound = require('call-bound');\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar hasOwn = require('hasown');\nvar gOPD = require('gopd');\n\n/** @type {import('.')} */\nvar fn;\n\nif (hasToStringTag) {\n\t/** @type {(receiver: ThisParameterType<typeof RegExp.prototype.exec>, ...args: Parameters<typeof RegExp.prototype.exec>) => ReturnType<typeof RegExp.prototype.exec>} */\n\tvar $exec = callBound('RegExp.prototype.exec');\n\t/** @type {object} */\n\tvar isRegexMarker = {};\n\n\tvar throwRegexMarker = function () {\n\t\tthrow isRegexMarker;\n\t};\n\t/** @type {{ toString(): never, valueOf(): never, [Symbol.toPrimitive]?(): never }} */\n\tvar badStringifier = {\n\t\ttoString: throwRegexMarker,\n\t\tvalueOf: throwRegexMarker\n\t};\n\n\tif (typeof Symbol.toPrimitive === 'symbol') {\n\t\tbadStringifier[Symbol.toPrimitive] = throwRegexMarker;\n\t}\n\n\t/** @type {import('.')} */\n\t// @ts-expect-error TS can't figure out that the $exec call always throws\n\t// eslint-disable-next-line consistent-return\n\tfn = function isRegex(value) {\n\t\tif (!value || typeof value !== 'object') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// eslint-disable-next-line no-extra-parens\n\t\tvar descriptor = /** @type {NonNullable<typeof gOPD>} */ (gOPD)(/** @type {{ lastIndex?: unknown }} */ (value), 'lastIndex');\n\t\tvar hasLastIndexDataProperty = descriptor && hasOwn(descriptor, 'value');\n\t\tif (!hasLastIndexDataProperty) {\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\t$exec(value, /** @type {string} */ (/** @type {unknown} */ (badStringifier)));\n\t\t} catch (e) {\n\t\t\treturn e === isRegexMarker;\n\t\t}\n\t};\n} else {\n\t/** @type {(receiver: ThisParameterType<typeof Object.prototype.toString>, ...args: Parameters<typeof Object.prototype.toString>) => ReturnType<typeof Object.prototype.toString>} */\n\tvar $toString = callBound('Object.prototype.toString');\n\t/** @const @type {'[object RegExp]'} */\n\tvar regexClass = '[object RegExp]';\n\n\t/** @type {import('.')} */\n\tfn = function isRegex(value) {\n\t\t// In older browsers, typeof regex incorrectly returns 'function'\n\t\tif (!value || (typeof value !== 'object' && typeof value !== 'function')) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $toString(value) === regexClass;\n\t};\n}\n\nmodule.exports = fn;\n", "'use strict';\n\nvar callBound = require('call-bound');\nvar isRegex = require('is-regex');\n\nvar $exec = callBound('RegExp.prototype.exec');\nvar $TypeError = require('es-errors/type');\n\n/** @type {import('.')} */\nmodule.exports = function regexTester(regex) {\n\tif (!isRegex(regex)) {\n\t\tthrow new $TypeError('`regex` must be a RegExp');\n\t}\n\treturn function test(s) {\n\t\treturn $exec(regex, s) !== null;\n\t};\n};\n", "'use strict';\n\nvar callBound = require('call-bound');\nvar safeRegexTest = require('safe-regex-test');\nvar isFnRegex = safeRegexTest(/^\\s*(?:function)?\\*/);\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar getProto = require('get-proto');\n\nvar toStr = callBound('Object.prototype.toString');\nvar fnToStr = callBound('Function.prototype.toString');\n\nvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\n\tif (!hasToStringTag) {\n\t\treturn false;\n\t}\n\ttry {\n\t\treturn Function('return function*() {}')();\n\t} catch (e) {\n\t}\n};\n/** @type {undefined | false | null | GeneratorFunctionConstructor} */\nvar GeneratorFunction;\n\n/** @type {import('.')} */\nmodule.exports = function isGeneratorFunction(fn) {\n\tif (typeof fn !== 'function') {\n\t\treturn false;\n\t}\n\tif (isFnRegex(fnToStr(fn))) {\n\t\treturn true;\n\t}\n\tif (!hasToStringTag) {\n\t\tvar str = toStr(fn);\n\t\treturn str === '[object GeneratorFunction]';\n\t}\n\tif (!getProto) {\n\t\treturn false;\n\t}\n\tif (typeof GeneratorFunction === 'undefined') {\n\t\tvar generatorFunc = getGeneratorFunc();\n\t\tGeneratorFunction = generatorFunc\n\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\t? /** @type {GeneratorFunctionConstructor} */ (getProto(generatorFunc))\n\t\t\t: false;\n\t}\n\treturn getProto(fn) === GeneratorFunction;\n};\n", "'use strict';\n\nvar fnToStr = Function.prototype.toString;\nvar reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;\nvar badArrayLike;\nvar isCallableMarker;\nif (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {\n\ttry {\n\t\tbadArrayLike = Object.defineProperty({}, 'length', {\n\t\t\tget: function () {\n\t\t\t\tthrow isCallableMarker;\n\t\t\t}\n\t\t});\n\t\tisCallableMarker = {};\n\t\t// eslint-disable-next-line no-throw-literal\n\t\treflectApply(function () { throw 42; }, null, badArrayLike);\n\t} catch (_) {\n\t\tif (_ !== isCallableMarker) {\n\t\t\treflectApply = null;\n\t\t}\n\t}\n} else {\n\treflectApply = null;\n}\n\nvar constructorRegex = /^\\s*class\\b/;\nvar isES6ClassFn = function isES6ClassFunction(value) {\n\ttry {\n\t\tvar fnStr = fnToStr.call(value);\n\t\treturn constructorRegex.test(fnStr);\n\t} catch (e) {\n\t\treturn false; // not a function\n\t}\n};\n\nvar tryFunctionObject = function tryFunctionToStr(value) {\n\ttry {\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tfnToStr.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar objectClass = '[object Object]';\nvar fnClass = '[object Function]';\nvar genClass = '[object GeneratorFunction]';\nvar ddaClass = '[object HTMLAllCollection]'; // IE 11\nvar ddaClass2 = '[object HTML document.all class]';\nvar ddaClass3 = '[object HTMLCollection]'; // IE 9-10\nvar hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`\n\nvar isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing\n\nvar isDDA = function isDocumentDotAll() { return false; };\nif (typeof document === 'object') {\n\t// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly\n\tvar all = document.all;\n\tif (toStr.call(all) === toStr.call(document.all)) {\n\t\tisDDA = function isDocumentDotAll(value) {\n\t\t\t/* globals document: false */\n\t\t\t// in IE 6-8, typeof document.all is \"object\" and it's truthy\n\t\t\tif ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {\n\t\t\t\ttry {\n\t\t\t\t\tvar str = toStr.call(value);\n\t\t\t\t\treturn (\n\t\t\t\t\t\tstr === ddaClass\n\t\t\t\t\t\t|| str === ddaClass2\n\t\t\t\t\t\t|| str === ddaClass3 // opera 12.16\n\t\t\t\t\t\t|| str === objectClass // IE 6-8\n\t\t\t\t\t) && value('') == null; // eslint-disable-line eqeqeq\n\t\t\t\t} catch (e) { /**/ }\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t}\n}\n\nmodule.exports = reflectApply\n\t? function isCallable(value) {\n\t\tif (isDDA(value)) { return true; }\n\t\tif (!value) { return false; }\n\t\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\t\ttry {\n\t\t\treflectApply(value, null, badArrayLike);\n\t\t} catch (e) {\n\t\t\tif (e !== isCallableMarker) { return false; }\n\t\t}\n\t\treturn !isES6ClassFn(value) && tryFunctionObject(value);\n\t}\n\t: function isCallable(value) {\n\t\tif (isDDA(value)) { return true; }\n\t\tif (!value) { return false; }\n\t\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\t\tif (hasToStringTag) { return tryFunctionObject(value); }\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tvar strClass = toStr.call(value);\n\t\tif (strClass !== fnClass && strClass !== genClass && !(/^\\[object HTML/).test(strClass)) { return false; }\n\t\treturn tryFunctionObject(value);\n\t};\n", "'use strict';\n\nvar isCallable = require('is-callable');\n\nvar toStr = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar forEachArray = function forEachArray(array, iterator, receiver) {\n    for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n            if (receiver == null) {\n                iterator(array[i], i, array);\n            } else {\n                iterator.call(receiver, array[i], i, array);\n            }\n        }\n    }\n};\n\nvar forEachString = function forEachString(string, iterator, receiver) {\n    for (var i = 0, len = string.length; i < len; i++) {\n        // no such thing as a sparse string.\n        if (receiver == null) {\n            iterator(string.charAt(i), i, string);\n        } else {\n            iterator.call(receiver, string.charAt(i), i, string);\n        }\n    }\n};\n\nvar forEachObject = function forEachObject(object, iterator, receiver) {\n    for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n            if (receiver == null) {\n                iterator(object[k], k, object);\n            } else {\n                iterator.call(receiver, object[k], k, object);\n            }\n        }\n    }\n};\n\nvar forEach = function forEach(list, iterator, thisArg) {\n    if (!isCallable(iterator)) {\n        throw new TypeError('iterator must be a function');\n    }\n\n    var receiver;\n    if (arguments.length >= 3) {\n        receiver = thisArg;\n    }\n\n    if (toStr.call(list) === '[object Array]') {\n        forEachArray(list, iterator, receiver);\n    } else if (typeof list === 'string') {\n        forEachString(list, iterator, receiver);\n    } else {\n        forEachObject(list, iterator, receiver);\n    }\n};\n\nmodule.exports = forEach;\n", "'use strict';\n\n/** @type {import('.')} */\nmodule.exports = [\n\t'Float32Array',\n\t'Float64Array',\n\t'Int8Array',\n\t'Int16Array',\n\t'Int32Array',\n\t'Uint8Array',\n\t'Uint8ClampedArray',\n\t'Uint16Array',\n\t'Uint32Array',\n\t'BigInt64Array',\n\t'BigUint64Array'\n];\n", "'use strict';\n\nvar possibleNames = require('possible-typed-array-names');\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\n\n/** @type {import('.')} */\nmodule.exports = function availableTypedArrays() {\n\tvar /** @type {ReturnType<typeof availableTypedArrays>} */ out = [];\n\tfor (var i = 0; i < possibleNames.length; i++) {\n\t\tif (typeof g[possibleNames[i]] === 'function') {\n\t\t\t// @ts-expect-error\n\t\t\tout[out.length] = possibleNames[i];\n\t\t}\n\t}\n\treturn out;\n};\n", "'use strict';\n\nvar $defineProperty = require('es-define-property');\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\n\nvar gopd = require('gopd');\n\n/** @type {import('.')} */\nmodule.exports = function defineDataProperty(\n\tobj,\n\tproperty,\n\tvalue\n) {\n\tif (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {\n\t\tthrow new $TypeError('`obj` must be an object or a function`');\n\t}\n\tif (typeof property !== 'string' && typeof property !== 'symbol') {\n\t\tthrow new $TypeError('`property` must be a string or a symbol`');\n\t}\n\tif (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {\n\t\tthrow new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {\n\t\tthrow new $TypeError('`nonWritable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {\n\t\tthrow new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 6 && typeof arguments[6] !== 'boolean') {\n\t\tthrow new $TypeError('`loose`, if provided, must be a boolean');\n\t}\n\n\tvar nonEnumerable = arguments.length > 3 ? arguments[3] : null;\n\tvar nonWritable = arguments.length > 4 ? arguments[4] : null;\n\tvar nonConfigurable = arguments.length > 5 ? arguments[5] : null;\n\tvar loose = arguments.length > 6 ? arguments[6] : false;\n\n\t/* @type {false | TypedPropertyDescriptor<unknown>} */\n\tvar desc = !!gopd && gopd(obj, property);\n\n\tif ($defineProperty) {\n\t\t$defineProperty(obj, property, {\n\t\t\tconfigurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,\n\t\t\tenumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,\n\t\t\tvalue: value,\n\t\t\twritable: nonWritable === null && desc ? desc.writable : !nonWritable\n\t\t});\n\t} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {\n\t\t// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable\n\t\tobj[property] = value; // eslint-disable-line no-param-reassign\n\t} else {\n\t\tthrow new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');\n\t}\n};\n", "'use strict';\n\nvar $defineProperty = require('es-define-property');\n\nvar hasPropertyDescriptors = function hasPropertyDescriptors() {\n\treturn !!$defineProperty;\n};\n\nhasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n\t// node v0.6 has a bug where array lengths can be Set but not Defined\n\tif (!$defineProperty) {\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn $defineProperty([], 'length', { value: 1 }).length !== 1;\n\t} catch (e) {\n\t\t// In Firefox 4-22, defining length on an array throws an exception.\n\t\treturn true;\n\t}\n};\n\nmodule.exports = hasPropertyDescriptors;\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar define = require('define-data-property');\nvar hasDescriptors = require('has-property-descriptors')();\nvar gOPD = require('gopd');\n\nvar $TypeError = require('es-errors/type');\nvar $floor = GetIntrinsic('%Math.floor%');\n\n/** @type {import('.')} */\nmodule.exports = function setFunctionLength(fn, length) {\n\tif (typeof fn !== 'function') {\n\t\tthrow new $TypeError('`fn` is not a function');\n\t}\n\tif (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {\n\t\tthrow new $TypeError('`length` must be a positive 32-bit integer');\n\t}\n\n\tvar loose = arguments.length > 2 && !!arguments[2];\n\n\tvar functionLengthIsConfigurable = true;\n\tvar functionLengthIsWritable = true;\n\tif ('length' in fn && gOPD) {\n\t\tvar desc = gOPD(fn, 'length');\n\t\tif (desc && !desc.configurable) {\n\t\t\tfunctionLengthIsConfigurable = false;\n\t\t}\n\t\tif (desc && !desc.writable) {\n\t\t\tfunctionLengthIsWritable = false;\n\t\t}\n\t}\n\n\tif (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\n\t\tif (hasDescriptors) {\n\t\t\tdefine(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);\n\t\t} else {\n\t\t\tdefine(/** @type {Parameters<define>[0]} */ (fn), 'length', length);\n\t\t}\n\t}\n\treturn fn;\n};\n", "'use strict';\n\nvar bind = require('function-bind');\nvar $apply = require('./functionApply');\nvar actualApply = require('./actualApply');\n\n/** @type {import('./applyBind')} */\nmodule.exports = function applyBind() {\n\treturn actualApply(bind, $apply, arguments);\n};\n", "'use strict';\n\nvar setFunctionLength = require('set-function-length');\n\nvar $defineProperty = require('es-define-property');\n\nvar callBindBasic = require('call-bind-apply-helpers');\nvar applyBind = require('call-bind-apply-helpers/applyBind');\n\nmodule.exports = function callBind(originalFunction) {\n\tvar func = callBindBasic(arguments);\n\tvar adjustedLength = originalFunction.length - (arguments.length - 1);\n\treturn setFunctionLength(\n\t\tfunc,\n\t\t1 + (adjustedLength > 0 ? adjustedLength : 0),\n\t\ttrue\n\t);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n", "'use strict';\n\nvar forEach = require('for-each');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBind = require('call-bind');\nvar callBound = require('call-bound');\nvar gOPD = require('gopd');\n\n/** @type {(O: object) => string} */\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\n\n/** @type {<T = unknown>(array: readonly T[], value: unknown) => number} */\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n\tfor (var i = 0; i < array.length; i += 1) {\n\t\tif (array[i] === value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n\n/** @typedef {(receiver: import('.').TypedArray) => string | typeof Uint8Array.prototype.slice.call | typeof Uint8Array.prototype.set.call} Getter */\n/** @type {{ [k in `\\$${import('.').TypedArrayName}`]?: Getter } & { __proto__: null }} */\nvar cache = { __proto__: null };\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new g[typedArray]();\n\t\tif (Symbol.toStringTag in arr) {\n\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\t// @ts-expect-error TS won't narrow inside a closure\n\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\t// @ts-expect-error TS won't narrow inside a closure\n\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t}\n\t\t\t// @ts-expect-error TODO: fix\n\t\t\tcache['$' + typedArray] = callBind(descriptor.get);\n\t\t}\n\t});\n} else {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new g[typedArray]();\n\t\tvar fn = arr.slice || arr.set;\n\t\tif (fn) {\n\t\t\t// @ts-expect-error TODO: fix\n\t\t\tcache['$' + typedArray] = callBind(fn);\n\t\t}\n\t});\n}\n\n/** @type {(value: object) => false | import('.').TypedArrayName} */\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\t/** @type {ReturnType<typeof tryAllTypedArrays>} */ var found = false;\n\tforEach(\n\t\t// eslint-disable-next-line no-extra-parens\n\t\t/** @type {Record<`\\$${TypedArrayName}`, Getter>} */ /** @type {any} */ (cache),\n\t\t/** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */\n\t\tfunction (getter, typedArray) {\n\t\t\tif (!found) {\n\t\t\t\ttry {\n\t\t\t\t// @ts-expect-error TODO: fix\n\t\t\t\t\tif ('$' + getter(value) === typedArray) {\n\t\t\t\t\t\tfound = $slice(typedArray, 1);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) { /**/ }\n\t\t\t}\n\t\t}\n\t);\n\treturn found;\n};\n\n/** @type {(value: object) => false | import('.').TypedArrayName} */\nvar trySlices = function tryAllSlices(value) {\n\t/** @type {ReturnType<typeof tryAllSlices>} */ var found = false;\n\tforEach(\n\t\t// eslint-disable-next-line no-extra-parens\n\t\t/** @type {Record<`\\$${TypedArrayName}`, Getter>} */ /** @type {any} */ (cache),\n\t\t/** @type {(getter: typeof cache, name: `\\$${import('.').TypedArrayName}`) => void} */ function (getter, name) {\n\t\t\tif (!found) {\n\t\t\t\ttry {\n\t\t\t\t\t// @ts-expect-error TODO: fix\n\t\t\t\t\tgetter(value);\n\t\t\t\t\tfound = $slice(name, 1);\n\t\t\t\t} catch (e) { /**/ }\n\t\t\t}\n\t\t}\n\t);\n\treturn found;\n};\n\n/** @type {import('.')} */\nmodule.exports = function whichTypedArray(value) {\n\tif (!value || typeof value !== 'object') { return false; }\n\tif (!hasToStringTag) {\n\t\t/** @type {string} */\n\t\tvar tag = $slice($toString(value), 8, -1);\n\t\tif ($indexOf(typedArrays, tag) > -1) {\n\t\t\treturn tag;\n\t\t}\n\t\tif (tag !== 'Object') {\n\t\t\treturn false;\n\t\t}\n\t\t// node < 0.6 hits here on real Typed Arrays\n\t\treturn trySlices(value);\n\t}\n\tif (!gOPD) { return null; } // unknown engine\n\treturn tryTypedArrays(value);\n};\n", "'use strict';\n\nvar whichTypedArray = require('which-typed-array');\n\n/** @type {import('.')} */\nmodule.exports = function isTypedArray(value) {\n\treturn !!whichTypedArray(value);\n};\n", "// Currently in sync with Node.js lib/internal/util/types.js\n// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\n'use strict';\n\nvar isArgumentsObject = require('is-arguments');\nvar isGeneratorFunction = require('is-generator-function');\nvar whichTypedArray = require('which-typed-array');\nvar isTypedArray = require('is-typed-array');\n\nfunction uncurryThis(f) {\n  return f.call.bind(f);\n}\n\nvar BigIntSupported = typeof BigInt !== 'undefined';\nvar SymbolSupported = typeof Symbol !== 'undefined';\n\nvar ObjectToString = uncurryThis(Object.prototype.toString);\n\nvar numberValue = uncurryThis(Number.prototype.valueOf);\nvar stringValue = uncurryThis(String.prototype.valueOf);\nvar booleanValue = uncurryThis(Boolean.prototype.valueOf);\n\nif (BigIntSupported) {\n  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n}\n\nif (SymbolSupported) {\n  var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n}\n\nfunction checkBoxedPrimitive(value, prototypeValueOf) {\n  if (typeof value !== 'object') {\n    return false;\n  }\n  try {\n    prototypeValueOf(value);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n\nexports.isArgumentsObject = isArgumentsObject;\nexports.isGeneratorFunction = isGeneratorFunction;\nexports.isTypedArray = isTypedArray;\n\n// Taken from here and modified for better browser support\n// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js\nfunction isPromise(input) {\n\treturn (\n\t\t(\n\t\t\ttypeof Promise !== 'undefined' &&\n\t\t\tinput instanceof Promise\n\t\t) ||\n\t\t(\n\t\t\tinput !== null &&\n\t\t\ttypeof input === 'object' &&\n\t\t\ttypeof input.then === 'function' &&\n\t\t\ttypeof input.catch === 'function'\n\t\t)\n\t);\n}\nexports.isPromise = isPromise;\n\nfunction isArrayBufferView(value) {\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    return ArrayBuffer.isView(value);\n  }\n\n  return (\n    isTypedArray(value) ||\n    isDataView(value)\n  );\n}\nexports.isArrayBufferView = isArrayBufferView;\n\n\nfunction isUint8Array(value) {\n  return whichTypedArray(value) === 'Uint8Array';\n}\nexports.isUint8Array = isUint8Array;\n\nfunction isUint8ClampedArray(value) {\n  return whichTypedArray(value) === 'Uint8ClampedArray';\n}\nexports.isUint8ClampedArray = isUint8ClampedArray;\n\nfunction isUint16Array(value) {\n  return whichTypedArray(value) === 'Uint16Array';\n}\nexports.isUint16Array = isUint16Array;\n\nfunction isUint32Array(value) {\n  return whichTypedArray(value) === 'Uint32Array';\n}\nexports.isUint32Array = isUint32Array;\n\nfunction isInt8Array(value) {\n  return whichTypedArray(value) === 'Int8Array';\n}\nexports.isInt8Array = isInt8Array;\n\nfunction isInt16Array(value) {\n  return whichTypedArray(value) === 'Int16Array';\n}\nexports.isInt16Array = isInt16Array;\n\nfunction isInt32Array(value) {\n  return whichTypedArray(value) === 'Int32Array';\n}\nexports.isInt32Array = isInt32Array;\n\nfunction isFloat32Array(value) {\n  return whichTypedArray(value) === 'Float32Array';\n}\nexports.isFloat32Array = isFloat32Array;\n\nfunction isFloat64Array(value) {\n  return whichTypedArray(value) === 'Float64Array';\n}\nexports.isFloat64Array = isFloat64Array;\n\nfunction isBigInt64Array(value) {\n  return whichTypedArray(value) === 'BigInt64Array';\n}\nexports.isBigInt64Array = isBigInt64Array;\n\nfunction isBigUint64Array(value) {\n  return whichTypedArray(value) === 'BigUint64Array';\n}\nexports.isBigUint64Array = isBigUint64Array;\n\nfunction isMapToString(value) {\n  return ObjectToString(value) === '[object Map]';\n}\nisMapToString.working = (\n  typeof Map !== 'undefined' &&\n  isMapToString(new Map())\n);\n\nfunction isMap(value) {\n  if (typeof Map === 'undefined') {\n    return false;\n  }\n\n  return isMapToString.working\n    ? isMapToString(value)\n    : value instanceof Map;\n}\nexports.isMap = isMap;\n\nfunction isSetToString(value) {\n  return ObjectToString(value) === '[object Set]';\n}\nisSetToString.working = (\n  typeof Set !== 'undefined' &&\n  isSetToString(new Set())\n);\nfunction isSet(value) {\n  if (typeof Set === 'undefined') {\n    return false;\n  }\n\n  return isSetToString.working\n    ? isSetToString(value)\n    : value instanceof Set;\n}\nexports.isSet = isSet;\n\nfunction isWeakMapToString(value) {\n  return ObjectToString(value) === '[object WeakMap]';\n}\nisWeakMapToString.working = (\n  typeof WeakMap !== 'undefined' &&\n  isWeakMapToString(new WeakMap())\n);\nfunction isWeakMap(value) {\n  if (typeof WeakMap === 'undefined') {\n    return false;\n  }\n\n  return isWeakMapToString.working\n    ? isWeakMapToString(value)\n    : value instanceof WeakMap;\n}\nexports.isWeakMap = isWeakMap;\n\nfunction isWeakSetToString(value) {\n  return ObjectToString(value) === '[object WeakSet]';\n}\nisWeakSetToString.working = (\n  typeof WeakSet !== 'undefined' &&\n  isWeakSetToString(new WeakSet())\n);\nfunction isWeakSet(value) {\n  return isWeakSetToString(value);\n}\nexports.isWeakSet = isWeakSet;\n\nfunction isArrayBufferToString(value) {\n  return ObjectToString(value) === '[object ArrayBuffer]';\n}\nisArrayBufferToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  isArrayBufferToString(new ArrayBuffer())\n);\nfunction isArrayBuffer(value) {\n  if (typeof ArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  return isArrayBufferToString.working\n    ? isArrayBufferToString(value)\n    : value instanceof ArrayBuffer;\n}\nexports.isArrayBuffer = isArrayBuffer;\n\nfunction isDataViewToString(value) {\n  return ObjectToString(value) === '[object DataView]';\n}\nisDataViewToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  typeof DataView !== 'undefined' &&\n  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))\n);\nfunction isDataView(value) {\n  if (typeof DataView === 'undefined') {\n    return false;\n  }\n\n  return isDataViewToString.working\n    ? isDataViewToString(value)\n    : value instanceof DataView;\n}\nexports.isDataView = isDataView;\n\n// Store a copy of SharedArrayBuffer in case it's deleted elsewhere\nvar SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;\nfunction isSharedArrayBufferToString(value) {\n  return ObjectToString(value) === '[object SharedArrayBuffer]';\n}\nfunction isSharedArrayBuffer(value) {\n  if (typeof SharedArrayBufferCopy === 'undefined') {\n    return false;\n  }\n\n  if (typeof isSharedArrayBufferToString.working === 'undefined') {\n    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());\n  }\n\n  return isSharedArrayBufferToString.working\n    ? isSharedArrayBufferToString(value)\n    : value instanceof SharedArrayBufferCopy;\n}\nexports.isSharedArrayBuffer = isSharedArrayBuffer;\n\nfunction isAsyncFunction(value) {\n  return ObjectToString(value) === '[object AsyncFunction]';\n}\nexports.isAsyncFunction = isAsyncFunction;\n\nfunction isMapIterator(value) {\n  return ObjectToString(value) === '[object Map Iterator]';\n}\nexports.isMapIterator = isMapIterator;\n\nfunction isSetIterator(value) {\n  return ObjectToString(value) === '[object Set Iterator]';\n}\nexports.isSetIterator = isSetIterator;\n\nfunction isGeneratorObject(value) {\n  return ObjectToString(value) === '[object Generator]';\n}\nexports.isGeneratorObject = isGeneratorObject;\n\nfunction isWebAssemblyCompiledModule(value) {\n  return ObjectToString(value) === '[object WebAssembly.Module]';\n}\nexports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n\nfunction isNumberObject(value) {\n  return checkBoxedPrimitive(value, numberValue);\n}\nexports.isNumberObject = isNumberObject;\n\nfunction isStringObject(value) {\n  return checkBoxedPrimitive(value, stringValue);\n}\nexports.isStringObject = isStringObject;\n\nfunction isBooleanObject(value) {\n  return checkBoxedPrimitive(value, booleanValue);\n}\nexports.isBooleanObject = isBooleanObject;\n\nfunction isBigIntObject(value) {\n  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n}\nexports.isBigIntObject = isBigIntObject;\n\nfunction isSymbolObject(value) {\n  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n}\nexports.isSymbolObject = isSymbolObject;\n\nfunction isBoxedPrimitive(value) {\n  return (\n    isNumberObject(value) ||\n    isStringObject(value) ||\n    isBooleanObject(value) ||\n    isBigIntObject(value) ||\n    isSymbolObject(value)\n  );\n}\nexports.isBoxedPrimitive = isBoxedPrimitive;\n\nfunction isAnyArrayBuffer(value) {\n  return typeof Uint8Array !== 'undefined' && (\n    isArrayBuffer(value) ||\n    isSharedArrayBuffer(value)\n  );\n}\nexports.isAnyArrayBuffer = isAnyArrayBuffer;\n\n['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {\n  Object.defineProperty(exports, method, {\n    enumerable: false,\n    value: function() {\n      throw new Error(method + ' is not supported in userland');\n    }\n  });\n});\n", "module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnvRegex = /^$/;\n\nif (process.env.NODE_DEBUG) {\n  var debugEnv = process.env.NODE_DEBUG;\n  debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n    .replace(/\\*/g, '.*')\n    .replace(/,/g, '$|^')\n    .toUpperCase();\n  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');\n}\nexports.debuglog = function(set) {\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (debugEnvRegex.test(set)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').slice(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.slice(1, -1);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexports.types = require('./support/types');\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\nexports.types.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\nexports.types.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\nexports.types.isNativeError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n", "'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar _require = require('buffer'),\n  Buffer = _require.Buffer;\nvar _require2 = require('util'),\n  inspect = _require2.inspect;\nvar custom = inspect && inspect.custom || 'inspect';\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\nmodule.exports = /*#__PURE__*/function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n      while (p = p.next) ret += s + p.data;\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n      return ret;\n    }\n\n    // Consumes a specified amount of bytes or characters from the buffered data.\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    }\n\n    // Consumes a specified amount of characters from the buffered data.\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n          break;\n        }\n        ++c;\n      }\n      this.length -= c;\n      return ret;\n    }\n\n    // Consumes a specified amount of bytes from the buffered data.\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n          break;\n        }\n        ++c;\n      }\n      this.length -= c;\n      return ret;\n    }\n\n    // Make sure the linked list only shows the minimal necessary information.\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n  return BufferList;\n}();", "'use strict';\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n  return this;\n}\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};", "'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n\n  var NodeError =\n  /*#__PURE__*/\n  function (_Base) {\n    _inheritsLoose(NodeError, _Base);\n\n    function NodeError(arg1, arg2, arg3) {\n      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n    }\n\n    return NodeError;\n  }(Base);\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n  codes[code] = NodeError;\n} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\n\n\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  var msg;\n\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  msg += \". Received type \".concat(typeof actual);\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented';\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\nmodule.exports.codes = codes;\n", "'use strict';\n\nvar ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n    return Math.floor(hwm);\n  }\n\n  // Default value\n  return state.objectMode ? 16 : 16 * 1024;\n}\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};", "\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\nvar destroyImpl = require('./internal/streams/destroy');\nvar _require = require('./internal/streams/state'),\n  getHighWaterMark = _require.getHighWaterMark;\nvar _require$codes = require('../errors').codes,\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nrequire('inherits')(Writable, Stream);\nfunction nop() {}\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = options.emitClose !== false;\n\n  // Should .destroy() be called after 'finish' (and potentially 'end')\n  this.autoDestroy = !!options.autoDestroy;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex);\n\n  // legacy.\n  this.writable = true;\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END();\n  // TODO: defer error events consistently everywhere, not just the cb\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n  return true;\n}\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n  return ret;\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\nWritable.prototype._writev = null;\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n  return need;\n}\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n\n  // reuse the free corkReq.\n  state.corkedRequestsFree.next = corkReq;\n}\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\nrequire('inherits')(Duplex, Readable);\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  process.nextTick(onEndNT, this);\n}\nfunction onEndNT(self) {\n  self.end();\n}\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}", "// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    callback.apply(this, args);\n  };\n}\nfunction noop() {}\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n  var writableEnded = stream._writableState && stream._writableState.finished;\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n  var onclose = function onclose() {\n    var err;\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\nmodule.exports = eos;", "'use strict';\n\nvar _Object$setPrototypeO;\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar finished = require('./end-of-stream');\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n  if (resolve !== null) {\n    var data = iter[kStream].read();\n    // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n  next: function next() {\n    var _this = this;\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    }\n\n    // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n    var lastPromise = this[kLastPromise];\n    var promise;\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n      promise = new Promise(this[kHandlePromise]);\n    }\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject];\n      // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n      iterator[kError] = err;\n      return;\n    }\n    var resolve = iterator[kLastResolve];\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\nmodule.exports = createReadableStreamAsyncIterator;", "module.exports = function () {\n  throw new Error('Readable.from is not available in the browser')\n};\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/buffer_list');\nvar destroyImpl = require('./internal/streams/destroy');\nvar _require = require('./internal/streams/state'),\n  getHighWaterMark = _require.getHighWaterMark;\nvar _require$codes = require('../errors').codes,\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n\n// Lazy loaded to improve the startup performance.\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\nrequire('inherits')(Readable, Stream);\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true;\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = options.emitClose !== false;\n\n  // Should .destroy() be called after 'end' (and potentially 'finish')\n  this.autoDestroy = !!options.autoDestroy;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex);\n\n  // legacy\n  this.readable = true;\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n  Stream.call(this);\n}\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  }\n\n  // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n  return er;\n}\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder;\n  // If setEncoding(null), decoder.encoding equals utf8\n  this._readableState.encoding = this._readableState.decoder.encoding;\n\n  // Iterate over current buffer to convert already stored Buffers:\n  var p = this._readableState.buffer.head;\n  var content = '';\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n  this._readableState.buffer.clear();\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n};\n\n// Don't raise the hwm > 1GB\nvar MAX_HWM = 0x40000000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  }\n\n  // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n  return dest;\n};\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {\n      hasUnpiped: false\n    });\n    return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0;\n\n    // Try start flowing on next tick if stream isn't explicitly paused\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n  return res;\n};\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n  return res;\n};\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true;\n\n    // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n  state.paused = false;\n  return this;\n};\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n  if (!state.reading) {\n    stream.read(0);\n  }\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  this._readableState.paused = true;\n  return this;\n};\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null);\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n  return this;\n};\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n    return createReadableStreamAsyncIterator(this);\n  };\n}\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n});\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length);\n\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n    return from(Readable, iterable, opts);\n  };\n}\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\nvar _require$codes = require('../errors').codes,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\nvar Duplex = require('./_stream_duplex');\nrequire('inherits')(Transform, Duplex);\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null)\n    // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\nfunction prefinish() {\n  var _this = this;\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null)\n    // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\nvar Transform = require('./_stream_transform');\nrequire('inherits')(PassThrough, Transform);\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};", "// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n\n'use strict';\n\nvar eos;\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\nvar _require$codes = require('../../../errors').codes,\n  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true;\n\n    // request.destroy just do .end - .abort is what we want\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\nfunction call(fn) {\n  fn();\n}\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\nmodule.exports = pipeline;", "exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\nexports.finished = require('./lib/internal/streams/end-of-stream.js');\nexports.pipeline = require('./lib/internal/streams/pipeline.js');\n", "'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('readable-stream').Transform\nvar inherits = require('inherits')\n\nfunction throwIfNotStringOrBuffer (val, prefix) {\n  if (!Buffer.isBuffer(val) && typeof val !== 'string') {\n    throw new TypeError(prefix + ' must be a string or a buffer')\n  }\n}\n\nfunction HashBase (blockSize) {\n  Transform.call(this)\n\n  this._block = Buffer.allocUnsafe(blockSize)\n  this._blockSize = blockSize\n  this._blockOffset = 0\n  this._length = [0, 0, 0, 0]\n\n  this._finalized = false\n}\n\ninherits(HashBase, Transform)\n\nHashBase.prototype._transform = function (chunk, encoding, callback) {\n  var error = null\n  try {\n    this.update(chunk, encoding)\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype._flush = function (callback) {\n  var error = null\n  try {\n    this.push(this.digest())\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype.update = function (data, encoding) {\n  throwIfNotStringOrBuffer(data, 'Data')\n  if (this._finalized) throw new Error('Digest already called')\n  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n  // consume data\n  var block = this._block\n  var offset = 0\n  while (this._blockOffset + data.length - offset >= this._blockSize) {\n    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]\n    this._update()\n    this._blockOffset = 0\n  }\n  while (offset < data.length) block[this._blockOffset++] = data[offset++]\n\n  // update length\n  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n    this._length[j] += carry\n    carry = (this._length[j] / 0x0100000000) | 0\n    if (carry > 0) this._length[j] -= 0x0100000000 * carry\n  }\n\n  return this\n}\n\nHashBase.prototype._update = function () {\n  throw new Error('_update is not implemented')\n}\n\nHashBase.prototype.digest = function (encoding) {\n  if (this._finalized) throw new Error('Digest already called')\n  this._finalized = true\n\n  var digest = this._digest()\n  if (encoding !== undefined) digest = digest.toString(encoding)\n\n  // reset state\n  this._block.fill(0)\n  this._blockOffset = 0\n  for (var i = 0; i < 4; ++i) this._length[i] = 0\n\n  return digest\n}\n\nHashBase.prototype._digest = function () {\n  throw new Error('_digest is not implemented')\n}\n\nmodule.exports = HashBase\n", "'use strict'\nvar inherits = require('inherits')\nvar HashBase = require('hash-base')\nvar Buffer = require('safe-buffer').Buffer\n\nvar ARRAY16 = new Array(16)\n\nfunction MD5 () {\n  HashBase.call(this, 64)\n\n  // state\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n}\n\ninherits(MD5, HashBase)\n\nMD5.prototype._update = function () {\n  var M = ARRAY16\n  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)\n\n  var a = this._a\n  var b = this._b\n  var c = this._c\n  var d = this._d\n\n  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)\n  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)\n  c = fnF(c, d, a, b, M[2], 0x242070db, 17)\n  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)\n  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)\n  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)\n  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)\n  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)\n  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)\n  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)\n  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)\n  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)\n  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)\n  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)\n  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)\n  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)\n\n  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)\n  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)\n  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)\n  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)\n  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)\n  d = fnG(d, a, b, c, M[10], 0x02441453, 9)\n  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)\n  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)\n  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)\n  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)\n  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)\n  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)\n  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)\n  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)\n  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)\n  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)\n\n  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)\n  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)\n  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)\n  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)\n  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)\n  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)\n  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)\n  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)\n  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)\n  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)\n  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)\n  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)\n  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)\n  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)\n  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)\n  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)\n\n  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)\n  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)\n  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)\n  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)\n  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)\n  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)\n  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)\n  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)\n  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)\n  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)\n  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)\n  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)\n  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)\n  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)\n  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)\n  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)\n\n  this._a = (this._a + a) | 0\n  this._b = (this._b + b) | 0\n  this._c = (this._c + c) | 0\n  this._d = (this._d + d) | 0\n}\n\nMD5.prototype._digest = function () {\n  // create padding and handle blocks\n  this._block[this._blockOffset++] = 0x80\n  if (this._blockOffset > 56) {\n    this._block.fill(0, this._blockOffset, 64)\n    this._update()\n    this._blockOffset = 0\n  }\n\n  this._block.fill(0, this._blockOffset, 56)\n  this._block.writeUInt32LE(this._length[0], 56)\n  this._block.writeUInt32LE(this._length[1], 60)\n  this._update()\n\n  // produce result\n  var buffer = Buffer.allocUnsafe(16)\n  buffer.writeInt32LE(this._a, 0)\n  buffer.writeInt32LE(this._b, 4)\n  buffer.writeInt32LE(this._c, 8)\n  buffer.writeInt32LE(this._d, 12)\n  return buffer\n}\n\nfunction rotl (x, n) {\n  return (x << n) | (x >>> (32 - n))\n}\n\nfunction fnF (a, b, c, d, m, k, s) {\n  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0\n}\n\nfunction fnG (a, b, c, d, m, k, s) {\n  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0\n}\n\nfunction fnH (a, b, c, d, m, k, s) {\n  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0\n}\n\nfunction fnI (a, b, c, d, m, k, s) {\n  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0\n}\n\nmodule.exports = MD5\n", "'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('readable-stream').Transform\nvar inherits = require('inherits')\n\nfunction throwIfNotStringOrBuffer (val, prefix) {\n  if (!Buffer.isBuffer(val) && typeof val !== 'string') {\n    throw new TypeError(prefix + ' must be a string or a buffer')\n  }\n}\n\nfunction HashBase (blockSize) {\n  Transform.call(this)\n\n  this._block = Buffer.allocUnsafe(blockSize)\n  this._blockSize = blockSize\n  this._blockOffset = 0\n  this._length = [0, 0, 0, 0]\n\n  this._finalized = false\n}\n\ninherits(HashBase, Transform)\n\nHashBase.prototype._transform = function (chunk, encoding, callback) {\n  var error = null\n  try {\n    this.update(chunk, encoding)\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype._flush = function (callback) {\n  var error = null\n  try {\n    this.push(this.digest())\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype.update = function (data, encoding) {\n  throwIfNotStringOrBuffer(data, 'Data')\n  if (this._finalized) throw new Error('Digest already called')\n  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n  // consume data\n  var block = this._block\n  var offset = 0\n  while (this._blockOffset + data.length - offset >= this._blockSize) {\n    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]\n    this._update()\n    this._blockOffset = 0\n  }\n  while (offset < data.length) block[this._blockOffset++] = data[offset++]\n\n  // update length\n  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n    this._length[j] += carry\n    carry = (this._length[j] / 0x0100000000) | 0\n    if (carry > 0) this._length[j] -= 0x0100000000 * carry\n  }\n\n  return this\n}\n\nHashBase.prototype._update = function () {\n  throw new Error('_update is not implemented')\n}\n\nHashBase.prototype.digest = function (encoding) {\n  if (this._finalized) throw new Error('Digest already called')\n  this._finalized = true\n\n  var digest = this._digest()\n  if (encoding !== undefined) digest = digest.toString(encoding)\n\n  // reset state\n  this._block.fill(0)\n  this._blockOffset = 0\n  for (var i = 0; i < 4; ++i) this._length[i] = 0\n\n  return digest\n}\n\nHashBase.prototype._digest = function () {\n  throw new Error('_digest is not implemented')\n}\n\nmodule.exports = HashBase\n", "'use strict'\nvar Buffer = require('buffer').Buffer\nvar inherits = require('inherits')\nvar HashBase = require('hash-base')\n\nvar ARRAY16 = new Array(16)\n\nvar zl = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n]\n\nvar zr = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n]\n\nvar sl = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n]\n\nvar sr = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n]\n\nvar hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]\nvar hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]\n\nfunction RIPEMD160 () {\n  HashBase.call(this, 64)\n\n  // state\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n}\n\ninherits(RIPEMD160, HashBase)\n\nRIPEMD160.prototype._update = function () {\n  var words = ARRAY16\n  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)\n\n  var al = this._a | 0\n  var bl = this._b | 0\n  var cl = this._c | 0\n  var dl = this._d | 0\n  var el = this._e | 0\n\n  var ar = this._a | 0\n  var br = this._b | 0\n  var cr = this._c | 0\n  var dr = this._d | 0\n  var er = this._e | 0\n\n  // computation\n  for (var i = 0; i < 80; i += 1) {\n    var tl\n    var tr\n    if (i < 16) {\n      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])\n      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])\n    } else if (i < 32) {\n      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])\n      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])\n    } else if (i < 48) {\n      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])\n      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])\n    } else if (i < 64) {\n      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])\n      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])\n    } else { // if (i<80) {\n      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])\n      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])\n    }\n\n    al = el\n    el = dl\n    dl = rotl(cl, 10)\n    cl = bl\n    bl = tl\n\n    ar = er\n    er = dr\n    dr = rotl(cr, 10)\n    cr = br\n    br = tr\n  }\n\n  // update state\n  var t = (this._b + cl + dr) | 0\n  this._b = (this._c + dl + er) | 0\n  this._c = (this._d + el + ar) | 0\n  this._d = (this._e + al + br) | 0\n  this._e = (this._a + bl + cr) | 0\n  this._a = t\n}\n\nRIPEMD160.prototype._digest = function () {\n  // create padding and handle blocks\n  this._block[this._blockOffset++] = 0x80\n  if (this._blockOffset > 56) {\n    this._block.fill(0, this._blockOffset, 64)\n    this._update()\n    this._blockOffset = 0\n  }\n\n  this._block.fill(0, this._blockOffset, 56)\n  this._block.writeUInt32LE(this._length[0], 56)\n  this._block.writeUInt32LE(this._length[1], 60)\n  this._update()\n\n  // produce result\n  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)\n  buffer.writeInt32LE(this._a, 0)\n  buffer.writeInt32LE(this._b, 4)\n  buffer.writeInt32LE(this._c, 8)\n  buffer.writeInt32LE(this._d, 12)\n  buffer.writeInt32LE(this._e, 16)\n  return buffer\n}\n\nfunction rotl (x, n) {\n  return (x << n) | (x >>> (32 - n))\n}\n\nfunction fn1 (a, b, c, d, e, m, k, s) {\n  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn2 (a, b, c, d, e, m, k, s) {\n  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn3 (a, b, c, d, e, m, k, s) {\n  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn4 (a, b, c, d, e, m, k, s) {\n  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn5 (a, b, c, d, e, m, k, s) {\n  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0\n}\n\nmodule.exports = RIPEMD160\n", "var Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n", "/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined\n * in FIPS PUB 180-1\n * This source code is derived from sha1.js of the same repository.\n * The difference between SHA-0 and SHA-1 is just a bitwise rotate left\n * operation was added.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha, Hash)\n\nSha.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha\n", "/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha1 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha1, Hash)\n\nSha1.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl1 (num) {\n  return (num << 1) | (num >>> 31)\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha1.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha1.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha1\n", "/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n]\n\nvar W = new Array(64)\n\nfunction Sha256 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha256, Hash)\n\nSha256.prototype.init = function () {\n  this._a = 0x6a09e667\n  this._b = 0xbb67ae85\n  this._c = 0x3c6ef372\n  this._d = 0xa54ff53a\n  this._e = 0x510e527f\n  this._f = 0x9b05688c\n  this._g = 0x1f83d9ab\n  this._h = 0x5be0cd19\n\n  return this\n}\n\nfunction ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x) {\n  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)\n}\n\nfunction sigma1 (x) {\n  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)\n}\n\nfunction gamma0 (x) {\n  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)\n}\n\nfunction gamma1 (x) {\n  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)\n}\n\nSha256.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n  var f = this._f | 0\n  var g = this._g | 0\n  var h = this._h | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0\n\n  for (var j = 0; j < 64; ++j) {\n    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0\n    var T2 = (sigma0(a) + maj(a, b, c)) | 0\n\n    h = g\n    g = f\n    f = e\n    e = (d + T1) | 0\n    d = c\n    c = b\n    b = a\n    a = (T1 + T2) | 0\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n  this._f = (f + this._f) | 0\n  this._g = (g + this._g) | 0\n  this._h = (h + this._h) | 0\n}\n\nSha256.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(32)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n  H.writeInt32BE(this._h, 28)\n\n  return H\n}\n\nmodule.exports = Sha256\n", "/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Sha256 = require('./sha256')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar W = new Array(64)\n\nfunction Sha224 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha224, Sha256)\n\nSha224.prototype.init = function () {\n  this._a = 0xc1059ed8\n  this._b = 0x367cd507\n  this._c = 0x3070dd17\n  this._d = 0xf70e5939\n  this._e = 0xffc00b31\n  this._f = 0x68581511\n  this._g = 0x64f98fa7\n  this._h = 0xbefa4fa4\n\n  return this\n}\n\nSha224.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(28)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n\n  return H\n}\n\nmodule.exports = Sha224\n", "var inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n]\n\nvar W = new Array(160)\n\nfunction Sha512 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha512, Hash)\n\nSha512.prototype.init = function () {\n  this._ah = 0x6a09e667\n  this._bh = 0xbb67ae85\n  this._ch = 0x3c6ef372\n  this._dh = 0xa54ff53a\n  this._eh = 0x510e527f\n  this._fh = 0x9b05688c\n  this._gh = 0x1f83d9ab\n  this._hh = 0x5be0cd19\n\n  this._al = 0xf3bcc908\n  this._bl = 0x84caa73b\n  this._cl = 0xfe94f82b\n  this._dl = 0x5f1d36f1\n  this._el = 0xade682d1\n  this._fl = 0x2b3e6c1f\n  this._gl = 0xfb41bd6b\n  this._hl = 0x137e2179\n\n  return this\n}\n\nfunction Ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x, xl) {\n  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)\n}\n\nfunction sigma1 (x, xl) {\n  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)\n}\n\nfunction Gamma0 (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)\n}\n\nfunction Gamma0l (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)\n}\n\nfunction Gamma1 (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)\n}\n\nfunction Gamma1l (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)\n}\n\nfunction getCarry (a, b) {\n  return (a >>> 0) < (b >>> 0) ? 1 : 0\n}\n\nSha512.prototype._update = function (M) {\n  var W = this._w\n\n  var ah = this._ah | 0\n  var bh = this._bh | 0\n  var ch = this._ch | 0\n  var dh = this._dh | 0\n  var eh = this._eh | 0\n  var fh = this._fh | 0\n  var gh = this._gh | 0\n  var hh = this._hh | 0\n\n  var al = this._al | 0\n  var bl = this._bl | 0\n  var cl = this._cl | 0\n  var dl = this._dl | 0\n  var el = this._el | 0\n  var fl = this._fl | 0\n  var gl = this._gl | 0\n  var hl = this._hl | 0\n\n  for (var i = 0; i < 32; i += 2) {\n    W[i] = M.readInt32BE(i * 4)\n    W[i + 1] = M.readInt32BE(i * 4 + 4)\n  }\n  for (; i < 160; i += 2) {\n    var xh = W[i - 15 * 2]\n    var xl = W[i - 15 * 2 + 1]\n    var gamma0 = Gamma0(xh, xl)\n    var gamma0l = Gamma0l(xl, xh)\n\n    xh = W[i - 2 * 2]\n    xl = W[i - 2 * 2 + 1]\n    var gamma1 = Gamma1(xh, xl)\n    var gamma1l = Gamma1l(xl, xh)\n\n    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n    var Wi7h = W[i - 7 * 2]\n    var Wi7l = W[i - 7 * 2 + 1]\n\n    var Wi16h = W[i - 16 * 2]\n    var Wi16l = W[i - 16 * 2 + 1]\n\n    var Wil = (gamma0l + Wi7l) | 0\n    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0\n    Wil = (Wil + gamma1l) | 0\n    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0\n    Wil = (Wil + Wi16l) | 0\n    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0\n\n    W[i] = Wih\n    W[i + 1] = Wil\n  }\n\n  for (var j = 0; j < 160; j += 2) {\n    Wih = W[j]\n    Wil = W[j + 1]\n\n    var majh = maj(ah, bh, ch)\n    var majl = maj(al, bl, cl)\n\n    var sigma0h = sigma0(ah, al)\n    var sigma0l = sigma0(al, ah)\n    var sigma1h = sigma1(eh, el)\n    var sigma1l = sigma1(el, eh)\n\n    // t1 = h + sigma1 + ch + K[j] + W[j]\n    var Kih = K[j]\n    var Kil = K[j + 1]\n\n    var chh = Ch(eh, fh, gh)\n    var chl = Ch(el, fl, gl)\n\n    var t1l = (hl + sigma1l) | 0\n    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0\n    t1l = (t1l + chl) | 0\n    t1h = (t1h + chh + getCarry(t1l, chl)) | 0\n    t1l = (t1l + Kil) | 0\n    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0\n    t1l = (t1l + Wil) | 0\n    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0\n\n    // t2 = sigma0 + maj\n    var t2l = (sigma0l + majl) | 0\n    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0\n\n    hh = gh\n    hl = gl\n    gh = fh\n    gl = fl\n    fh = eh\n    fl = el\n    el = (dl + t1l) | 0\n    eh = (dh + t1h + getCarry(el, dl)) | 0\n    dh = ch\n    dl = cl\n    ch = bh\n    cl = bl\n    bh = ah\n    bl = al\n    al = (t1l + t2l) | 0\n    ah = (t1h + t2h + getCarry(al, t1l)) | 0\n  }\n\n  this._al = (this._al + al) | 0\n  this._bl = (this._bl + bl) | 0\n  this._cl = (this._cl + cl) | 0\n  this._dl = (this._dl + dl) | 0\n  this._el = (this._el + el) | 0\n  this._fl = (this._fl + fl) | 0\n  this._gl = (this._gl + gl) | 0\n  this._hl = (this._hl + hl) | 0\n\n  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0\n  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0\n  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0\n  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0\n  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0\n  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0\n  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0\n  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0\n}\n\nSha512.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(64)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n  writeInt64BE(this._gh, this._gl, 48)\n  writeInt64BE(this._hh, this._hl, 56)\n\n  return H\n}\n\nmodule.exports = Sha512\n", "var inherits = require('inherits')\nvar SHA512 = require('./sha512')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar W = new Array(160)\n\nfunction Sha384 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha384, SHA512)\n\nSha384.prototype.init = function () {\n  this._ah = 0xcbbb9d5d\n  this._bh = 0x629a292a\n  this._ch = 0x9159015a\n  this._dh = 0x152fecd8\n  this._eh = 0x67332667\n  this._fh = 0x8eb44a87\n  this._gh = 0xdb0c2e0d\n  this._hh = 0x47b5481d\n\n  this._al = 0xc1059ed8\n  this._bl = 0x367cd507\n  this._cl = 0x3070dd17\n  this._dl = 0xf70e5939\n  this._el = 0xffc00b31\n  this._fl = 0x68581511\n  this._gl = 0x64f98fa7\n  this._hl = 0xbefa4fa4\n\n  return this\n}\n\nSha384.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(48)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n\n  return H\n}\n\nmodule.exports = Sha384\n", "var exports = module.exports = function SHA (algorithm) {\n  algorithm = algorithm.toLowerCase()\n\n  var Algorithm = exports[algorithm]\n  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')\n\n  return new Algorithm()\n}\n\nexports.sha = require('./sha')\nexports.sha1 = require('./sha1')\nexports.sha224 = require('./sha224')\nexports.sha256 = require('./sha256')\nexports.sha384 = require('./sha384')\nexports.sha512 = require('./sha512')\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/lib/_stream_readable.js');\nStream.Writable = require('readable-stream/lib/_stream_writable.js');\nStream.Duplex = require('readable-stream/lib/_stream_duplex.js');\nStream.Transform = require('readable-stream/lib/_stream_transform.js');\nStream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');\nStream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')\nStream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n", "'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\nvar Transform = require('stream').Transform;\nvar StringDecoder = require('string_decoder').StringDecoder;\nvar inherits = require('inherits');\n\nfunction CipherBase(hashMode) {\n\tTransform.call(this);\n\tthis.hashMode = typeof hashMode === 'string';\n\tif (this.hashMode) {\n\t\tthis[hashMode] = this._finalOrDigest;\n\t} else {\n\t\tthis['final'] = this._finalOrDigest;\n\t}\n\tif (this._final) {\n\t\tthis.__final = this._final;\n\t\tthis._final = null;\n\t}\n\tthis._decoder = null;\n\tthis._encoding = null;\n}\ninherits(CipherBase, Transform);\n\nvar useUint8Array = typeof Uint8Array !== 'undefined';\nvar useArrayBuffer = typeof ArrayBuffer !== 'undefined'\n\t&& typeof Uint8Array !== 'undefined'\n\t&& ArrayBuffer.isView\n\t&& (Buffer.prototype instanceof Uint8Array || Buffer.TYPED_ARRAY_SUPPORT);\n\nfunction toBuffer(data, encoding) {\n\t/*\n\t * No need to do anything for exact instance\n\t * This is only valid when safe-buffer.Buffer === buffer.Buffer, i.e. when Buffer.from/Buffer.alloc existed\n\t */\n\tif (data instanceof Buffer) {\n\t\treturn data;\n\t}\n\n\t// Convert strings to Buffer\n\tif (typeof data === 'string') {\n\t\treturn Buffer.from(data, encoding);\n\t}\n\n\t/*\n\t * Wrap any TypedArray instances and DataViews\n\t * Makes sense only on engines with full TypedArray support -- let Buffer detect that\n\t */\n\tif (useArrayBuffer && ArrayBuffer.isView(data)) {\n\t\t// Bug in Node.js <6.3.1, which treats this as out-of-bounds\n\t\tif (data.byteLength === 0) {\n\t\t\treturn Buffer.alloc(0);\n\t\t}\n\n\t\tvar res = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n\t\t/*\n\t\t * Recheck result size, as offset/length doesn't work on Node.js <5.10\n\t\t * We just go to Uint8Array case if this fails\n\t\t */\n\t\tif (res.byteLength === data.byteLength) {\n\t\t\treturn res;\n\t\t}\n\t}\n\n\t/*\n\t * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over\n\t * Doesn't make sense with other TypedArray instances\n\t */\n\tif (useUint8Array && data instanceof Uint8Array) {\n\t\treturn Buffer.from(data);\n\t}\n\n\t/*\n\t * Old Buffer polyfill on an engine that doesn't have TypedArray support\n\t * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed\n\t * Convert to our current Buffer implementation\n\t */\n\tif (\n\t\tBuffer.isBuffer(data)\n\t\t\t&& data.constructor\n\t\t\t&& typeof data.constructor.isBuffer === 'function'\n\t\t\t&& data.constructor.isBuffer(data)\n\t) {\n\t\treturn Buffer.from(data);\n\t}\n\n\tthrow new TypeError('The \"data\" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');\n}\n\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n\tvar bufferData = toBuffer(data, inputEnc); // asserts correct input type\n\tvar outData = this._update(bufferData);\n\tif (this.hashMode) {\n\t\treturn this;\n\t}\n\n\tif (outputEnc) {\n\t\toutData = this._toString(outData, outputEnc);\n\t}\n\n\treturn outData;\n};\n\nCipherBase.prototype.setAutoPadding = function () {};\nCipherBase.prototype.getAuthTag = function () {\n\tthrow new Error('trying to get auth tag in unsupported state');\n};\n\nCipherBase.prototype.setAuthTag = function () {\n\tthrow new Error('trying to set auth tag in unsupported state');\n};\n\nCipherBase.prototype.setAAD = function () {\n\tthrow new Error('trying to set aad in unsupported state');\n};\n\nCipherBase.prototype._transform = function (data, _, next) {\n\tvar err;\n\ttry {\n\t\tif (this.hashMode) {\n\t\t\tthis._update(data);\n\t\t} else {\n\t\t\tthis.push(this._update(data));\n\t\t}\n\t} catch (e) {\n\t\terr = e;\n\t} finally {\n\t\tnext(err);\n\t}\n};\nCipherBase.prototype._flush = function (done) {\n\tvar err;\n\ttry {\n\t\tthis.push(this.__final());\n\t} catch (e) {\n\t\terr = e;\n\t}\n\n\tdone(err);\n};\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\n\tvar outData = this.__final() || Buffer.alloc(0);\n\tif (outputEnc) {\n\t\toutData = this._toString(outData, outputEnc, true);\n\t}\n\treturn outData;\n};\n\nCipherBase.prototype._toString = function (value, enc, fin) {\n\tif (!this._decoder) {\n\t\tthis._decoder = new StringDecoder(enc);\n\t\tthis._encoding = enc;\n\t}\n\n\tif (this._encoding !== enc) {\n\t\tthrow new Error('can’t switch encodings');\n\t}\n\n\tvar out = this._decoder.write(value);\n\tif (fin) {\n\t\tout += this._decoder.end();\n\t}\n\n\treturn out;\n};\n\nmodule.exports = CipherBase;\n", "'use strict'\nvar inherits = require('inherits')\nvar MD5 = require('md5.js')\nvar RIPEMD160 = require('ripemd160')\nvar sha = require('sha.js')\nvar Base = require('cipher-base')\n\nfunction Hash (hash) {\n  Base.call(this, 'digest')\n\n  this._hash = hash\n}\n\ninherits(Hash, Base)\n\nHash.prototype._update = function (data) {\n  this._hash.update(data)\n}\n\nHash.prototype._final = function () {\n  return this._hash.digest()\n}\n\nmodule.exports = function createHash (alg) {\n  alg = alg.toLowerCase()\n  if (alg === 'md5') return new MD5()\n  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()\n\n  return new Hash(sha(alg))\n}\n", "'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (psz < source.length) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n", "'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n", "'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n", "var bs58check = require('bs58check')\n\nfunction decodeRaw (buffer, version) {\n  // check version only if defined\n  if (version !== undefined && buffer[0] !== version) throw new Error('Invalid network version')\n\n  // uncompressed\n  if (buffer.length === 33) {\n    return {\n      version: buffer[0],\n      privateKey: buffer.slice(1, 33),\n      compressed: false\n    }\n  }\n\n  // invalid length\n  if (buffer.length !== 34) throw new Error('Invalid WIF length')\n\n  // invalid compression flag\n  if (buffer[33] !== 0x01) throw new Error('Invalid compression flag')\n\n  return {\n    version: buffer[0],\n    privateKey: buffer.slice(1, 33),\n    compressed: true\n  }\n}\n\nfunction encodeRaw (version, privateKey, compressed) {\n  var result = new Buffer(compressed ? 34 : 33)\n\n  result.writeUInt8(version, 0)\n  privateKey.copy(result, 1)\n\n  if (compressed) {\n    result[33] = 0x01\n  }\n\n  return result\n}\n\nfunction decode (string, version) {\n  return decodeRaw(bs58check.decode(string), version)\n}\n\nfunction encode (version, privateKey, compressed) {\n  if (typeof version === 'number') return bs58check.encode(encodeRaw(version, privateKey, compressed))\n\n  return bs58check.encode(\n    encodeRaw(\n      version.version,\n      version.privateKey,\n      version.compressed\n    )\n  )\n}\n\nmodule.exports = {\n  decode: decode,\n  decodeRaw: decodeRaw,\n  encode: encode,\n  encodeRaw: encodeRaw\n}\n", "'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.testEcc = void 0;\nconst h = (hex) => Buffer.from(hex, 'hex');\nfunction testEcc(ecc) {\n  assert(\n    ecc.isPoint(\n      h('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n    ),\n  );\n  assert(\n    !ecc.isPoint(\n      h('030000000000000000000000000000000000000000000000000000000000000005'),\n    ),\n  );\n  assert(\n    ecc.isPrivate(\n      h('79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n    ),\n  );\n  // order - 1\n  assert(\n    ecc.isPrivate(\n      h('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140'),\n    ),\n  );\n  // 0\n  assert(\n    !ecc.isPrivate(\n      h('0000000000000000000000000000000000000000000000000000000000000000'),\n    ),\n  );\n  // order\n  assert(\n    !ecc.isPrivate(\n      h('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    ),\n  );\n  // order + 1\n  assert(\n    !ecc.isPrivate(\n      h('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142'),\n    ),\n  );\n  // 1 + 0 == 1\n  assert(\n    Buffer.from(\n      ecc.privateAdd(\n        h('0000000000000000000000000000000000000000000000000000000000000001'),\n        h('0000000000000000000000000000000000000000000000000000000000000000'),\n      ),\n    ).equals(\n      h('0000000000000000000000000000000000000000000000000000000000000001'),\n    ),\n  );\n  // -3 + 3 == 0\n  assert(\n    ecc.privateAdd(\n      h('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e'),\n      h('0000000000000000000000000000000000000000000000000000000000000003'),\n    ) === null,\n  );\n  assert(\n    Buffer.from(\n      ecc.privateAdd(\n        h('e211078564db65c3ce7704f08262b1f38f1ef412ad15b5ac2d76657a63b2c500'),\n        h('b51fbb69051255d1becbd683de5848242a89c229348dd72896a87ada94ae8665'),\n      ),\n    ).equals(\n      h('9730c2ee69edbb958d42db7460bafa18fef9d955325aec99044c81c8282b0a24'),\n    ),\n  );\n  assert(\n    Buffer.from(\n      ecc.privateNegate(\n        h('0000000000000000000000000000000000000000000000000000000000000001'),\n      ),\n    ).equals(\n      h('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140'),\n    ),\n  );\n  assert(\n    Buffer.from(\n      ecc.privateNegate(\n        h('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e'),\n      ),\n    ).equals(\n      h('0000000000000000000000000000000000000000000000000000000000000003'),\n    ),\n  );\n  assert(\n    Buffer.from(\n      ecc.privateNegate(\n        h('b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af'),\n      ),\n    ).equals(\n      h('4eede1bf775995d70a494f0a7bb6bc11e0b8cccd41cce8009ab1132c8b0a3792'),\n    ),\n  );\n  assert(\n    Buffer.from(\n      ecc.pointCompress(\n        h(\n          '0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n        ),\n        true,\n      ),\n    ).equals(\n      h('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n    ),\n  );\n  assert(\n    Buffer.from(\n      ecc.pointCompress(\n        h(\n          '0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n        ),\n        false,\n      ),\n    ).equals(\n      h(\n        '0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n      ),\n    ),\n  );\n  assert(\n    Buffer.from(\n      ecc.pointCompress(\n        h('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n        true,\n      ),\n    ).equals(\n      h('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n    ),\n  );\n  assert(\n    Buffer.from(\n      ecc.pointCompress(\n        h('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n        false,\n      ),\n    ).equals(\n      h(\n        '0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n      ),\n    ),\n  );\n  assert(\n    Buffer.from(\n      ecc.pointFromScalar(\n        h('b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af'),\n      ),\n    ).equals(\n      h('02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99'),\n    ),\n  );\n  assert(\n    ecc.xOnlyPointAddTweak(\n      h('79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n      h('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140'),\n    ) === null,\n  );\n  let xOnlyRes = ecc.xOnlyPointAddTweak(\n    h('1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b'),\n    h('a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac'),\n  );\n  assert(\n    Buffer.from(xOnlyRes.xOnlyPubkey).equals(\n      h('e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf'),\n    ) && xOnlyRes.parity === 1,\n  );\n  xOnlyRes = ecc.xOnlyPointAddTweak(\n    h('2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991'),\n    h('823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47'),\n  );\n  assert(\n    Buffer.from(xOnlyRes.xOnlyPubkey).equals(\n      h('9534f8dc8c6deda2dc007655981c78b49c5d96c778fbf363462a11ec9dfd948c'),\n    ) && xOnlyRes.parity === 0,\n  );\n  assert(\n    Buffer.from(\n      ecc.sign(\n        h('5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed'),\n        h('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140'),\n      ),\n    ).equals(\n      h(\n        '54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5',\n      ),\n    ),\n  );\n  assert(\n    ecc.verify(\n      h('5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed'),\n      h('0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n      h(\n        '54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5',\n      ),\n    ),\n  );\n  if (ecc.signSchnorr) {\n    assert(\n      Buffer.from(\n        ecc.signSchnorr(\n          h('7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c'),\n          h('c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9'),\n          h('c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906'),\n        ),\n      ).equals(\n        h(\n          '5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7',\n        ),\n      ),\n    );\n  }\n  if (ecc.verifySchnorr) {\n    assert(\n      ecc.verifySchnorr(\n        h('7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c'),\n        h('dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8'),\n        h(\n          '5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7',\n        ),\n      ),\n    );\n  }\n}\nexports.testEcc = testEcc;\nfunction assert(bool) {\n  if (!bool) throw new Error('ecc library invalid');\n}\n", "'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.ECPairFactory = exports.networks = void 0;\nconst networks = require('./networks');\nexports.networks = networks;\nconst types = require('./types');\nconst randomBytes = require('randombytes');\nconst wif = require('wif');\nconst testecc_1 = require('./testecc');\nconst isOptions = types.typeforce.maybe(\n  types.typeforce.compile({\n    compressed: types.maybe(types.Boolean),\n    network: types.maybe(types.Network),\n  }),\n);\nconst toXOnly = (pubKey) =>\n  pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);\nfunction ECPairFactory(ecc) {\n  (0, testecc_1.testEcc)(ecc);\n  function isPoint(maybePoint) {\n    return ecc.isPoint(maybePoint);\n  }\n  function fromPrivateKey(buffer, options) {\n    types.typeforce(types.Buffer256bit, buffer);\n    if (!ecc.isPrivate(buffer))\n      throw new TypeError('Private key not in range [1, n)');\n    types.typeforce(isOptions, options);\n    return new ECPair(buffer, undefined, options);\n  }\n  function fromPublicKey(buffer, options) {\n    types.typeforce(ecc.isPoint, buffer);\n    types.typeforce(isOptions, options);\n    return new ECPair(undefined, buffer, options);\n  }\n  function fromWIF(wifString, network) {\n    const decoded = wif.decode(wifString);\n    const version = decoded.version;\n    // list of networks?\n    if (types.Array(network)) {\n      network = network\n        .filter((x) => {\n          return version === x.wif;\n        })\n        .pop();\n      if (!network) throw new Error('Unknown network version');\n      // otherwise, assume a network object (or default to bitcoin)\n    } else {\n      network = network || networks.bitcoin;\n      if (version !== network.wif) throw new Error('Invalid network version');\n    }\n    return fromPrivateKey(decoded.privateKey, {\n      compressed: decoded.compressed,\n      network: network,\n    });\n  }\n  function makeRandom(options) {\n    types.typeforce(isOptions, options);\n    if (options === undefined) options = {};\n    const rng = options.rng || randomBytes;\n    let d;\n    do {\n      d = rng(32);\n      types.typeforce(types.Buffer256bit, d);\n    } while (!ecc.isPrivate(d));\n    return fromPrivateKey(d, options);\n  }\n  class ECPair {\n    __D;\n    __Q;\n    compressed;\n    network;\n    lowR;\n    constructor(__D, __Q, options) {\n      this.__D = __D;\n      this.__Q = __Q;\n      this.lowR = false;\n      if (options === undefined) options = {};\n      this.compressed =\n        options.compressed === undefined ? true : options.compressed;\n      this.network = options.network || networks.bitcoin;\n      if (__Q !== undefined)\n        this.__Q = Buffer.from(ecc.pointCompress(__Q, this.compressed));\n    }\n    get privateKey() {\n      return this.__D;\n    }\n    get publicKey() {\n      if (!this.__Q) {\n        // It is not possible for both `__Q` and `__D` to be `undefined` at the same time.\n        // The factory methods guard for this.\n        const p = ecc.pointFromScalar(this.__D, this.compressed);\n        // It is not possible for `p` to be null.\n        // `fromPrivateKey()` checks that `__D` is a valid scalar.\n        this.__Q = Buffer.from(p);\n      }\n      return this.__Q;\n    }\n    toWIF() {\n      if (!this.__D) throw new Error('Missing private key');\n      return wif.encode(this.network.wif, this.__D, this.compressed);\n    }\n    tweak(t) {\n      if (this.privateKey) return this.tweakFromPrivateKey(t);\n      return this.tweakFromPublicKey(t);\n    }\n    sign(hash, lowR) {\n      if (!this.__D) throw new Error('Missing private key');\n      if (lowR === undefined) lowR = this.lowR;\n      if (lowR === false) {\n        return Buffer.from(ecc.sign(hash, this.__D));\n      } else {\n        let sig = ecc.sign(hash, this.__D);\n        const extraData = Buffer.alloc(32, 0);\n        let counter = 0;\n        // if first try is lowR, skip the loop\n        // for second try and on, add extra entropy counting up\n        while (sig[0] > 0x7f) {\n          counter++;\n          extraData.writeUIntLE(counter, 0, 6);\n          sig = ecc.sign(hash, this.__D, extraData);\n        }\n        return Buffer.from(sig);\n      }\n    }\n    signSchnorr(hash) {\n      if (!this.privateKey) throw new Error('Missing private key');\n      if (!ecc.signSchnorr)\n        throw new Error('signSchnorr not supported by ecc library');\n      return Buffer.from(ecc.signSchnorr(hash, this.privateKey));\n    }\n    verify(hash, signature) {\n      return ecc.verify(hash, this.publicKey, signature);\n    }\n    verifySchnorr(hash, signature) {\n      if (!ecc.verifySchnorr)\n        throw new Error('verifySchnorr not supported by ecc library');\n      return ecc.verifySchnorr(hash, this.publicKey.subarray(1, 33), signature);\n    }\n    tweakFromPublicKey(t) {\n      const xOnlyPubKey = toXOnly(this.publicKey);\n      const tweakedPublicKey = ecc.xOnlyPointAddTweak(xOnlyPubKey, t);\n      if (!tweakedPublicKey || tweakedPublicKey.xOnlyPubkey === null)\n        throw new Error('Cannot tweak public key!');\n      const parityByte = Buffer.from([\n        tweakedPublicKey.parity === 0 ? 0x02 : 0x03,\n      ]);\n      return fromPublicKey(\n        Buffer.concat([parityByte, tweakedPublicKey.xOnlyPubkey]),\n        { network: this.network, compressed: this.compressed },\n      );\n    }\n    tweakFromPrivateKey(t) {\n      const hasOddY =\n        this.publicKey[0] === 3 ||\n        (this.publicKey[0] === 4 && (this.publicKey[64] & 1) === 1);\n      const privateKey = hasOddY\n        ? ecc.privateNegate(this.privateKey)\n        : this.privateKey;\n      const tweakedPrivateKey = ecc.privateAdd(privateKey, t);\n      if (!tweakedPrivateKey) throw new Error('Invalid tweaked private key!');\n      return fromPrivateKey(Buffer.from(tweakedPrivateKey), {\n        network: this.network,\n        compressed: this.compressed,\n      });\n    }\n  }\n  return {\n    isPoint,\n    fromPrivateKey,\n    fromPublicKey,\n    fromWIF,\n    makeRandom,\n  };\n}\nexports.ECPairFactory = ECPairFactory;\n", "'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.networks = exports.ECPairFactory = exports.default = void 0;\nvar ecpair_1 = require('./ecpair');\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function () {\n    return ecpair_1.ECPairFactory;\n  },\n});\nObject.defineProperty(exports, 'ECPairFactory', {\n  enumerable: true,\n  get: function () {\n    return ecpair_1.ECPairFactory;\n  },\n});\nObject.defineProperty(exports, 'networks', {\n  enumerable: true,\n  get: function () {\n    return ecpair_1.networks;\n  },\n});\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validator = exports.ecpair = void 0;\nconst ecpair_1 = __importDefault(require(\"ecpair\"));\nconst secp256k1_1 = __importDefault(require(\"@bitcoinerlab/secp256k1\"));\nexports.ecpair = (0, ecpair_1.default)(secp256k1_1.default);\nconst validator = (pubkey, msghash, signature) => exports.ecpair.fromPublicKey(pubkey).verify(msghash, signature);\nexports.validator = validator;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBitcoinNetwork = void 0;\nconst bitcoinjs_lib_1 = require(\"bitcoinjs-lib\");\nfunction getBitcoinNetwork(network) {\n    switch (network) {\n        case 'regtest':\n            return bitcoinjs_lib_1.networks.regtest;\n        case 'testnet':\n            return bitcoinjs_lib_1.networks.testnet;\n        case 'mainnet':\n            return bitcoinjs_lib_1.networks.bitcoin;\n        default:\n            throw new Error(`Unsupported network: ${network}`);\n    }\n}\nexports.getBitcoinNetwork = getBitcoinNetwork;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst ecpair_1 = require(\"../utils/ecpair\");\nconst bitcoinjs_lib_1 = require(\"bitcoinjs-lib\");\nconst network_1 = require(\"../utils/network\");\nclass Account {\n    keypair;\n    network;\n    constructor({ privateKey, wif, network }) {\n        this.keypair = ecpair_1.ecpair.makeRandom();\n        if (privateKey) {\n            const privateKeyBuffer = Buffer.from(privateKey, \"hex\");\n            this.keypair = ecpair_1.ecpair.fromPrivateKey(privateKeyBuffer, {\n                network: (0, network_1.getBitcoinNetwork)(network),\n            });\n        }\n        if (wif) {\n            this.keypair = ecpair_1.ecpair.fromWIF(wif, (0, network_1.getBitcoinNetwork)(network));\n        }\n        this.network = network;\n    }\n    p2pkh() {\n        const p2pkhPayments = bitcoinjs_lib_1.payments.p2pkh({\n            pubkey: this.keypair.publicKey,\n            network: (0, network_1.getBitcoinNetwork)(this.network),\n        });\n        return {\n            address: p2pkhPayments.address,\n            keypair: this.keypair,\n        };\n    }\n    p2wpkh() {\n        const p2wpkhPayments = bitcoinjs_lib_1.payments.p2wpkh({\n            pubkey: this.keypair.publicKey,\n            network: (0, network_1.getBitcoinNetwork)(this.network),\n        });\n        return {\n            address: p2wpkhPayments.address,\n            keypair: this.keypair,\n        };\n    }\n    p2tr() {\n        const p2trPayments = bitcoinjs_lib_1.payments.p2tr({\n            internalPubkey: this.keypair.publicKey.slice(1, 33),\n            network: (0, network_1.getBitcoinNetwork)(this.network),\n        });\n        return {\n            address: p2trPayments.address,\n            keypair: this.keypair,\n        };\n    }\n}\nexports.Account = Account;\n", "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nvar t=function(){return t=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var s in r=arguments[e])Object.prototype.hasOwnProperty.call(r,s)&&(t[s]=r[s]);return t},t.apply(this,arguments)};var r=\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";var e=t=>{if(!t||\"string\"!=typeof t)throw new Error(`Expected base58 string but got “${t}”`);if(t.match(/[IOl0]/gmu))throw new Error(`Invalid base58 character “${t.match(/[IOl0]/gmu)}”`);const e=t.match(/^1+/gmu),n=e?e[0].length:0,s=(t.length-n)*(Math.log(58)/Math.log(256))+1>>>0;return new Uint8Array([...new Uint8Array(n),...t.match(/.{1}/gmu).map((t=>r.indexOf(t))).reduce(((t,r)=>t=t.map((t=>{const e=58*t+r;return r=e>>8,e}))),new Uint8Array(s)).reverse().filter((i=!1,t=>i=i||t))]);var i};(()=>{const t=Array(256).fill(-1);for(let e=0;e<r.length;++e)t[r.charCodeAt(e)]=e})();var n=e;var s,i,o,h=(s=function(t,r){Object.defineProperty(r,\"__esModule\",{value:!0}),r.bech32m=r.bech32=void 0;const e=\"qpzry9x8gf2tvdw0s3jn54khce6mua7l\",n={};for(let t=0;t<32;t++){const r=e.charAt(t);n[r]=t}function s(t){const r=t>>25;return(33554431&t)<<5^996825010&-(r>>0&1)^642813549&-(r>>1&1)^513874426&-(r>>2&1)^1027748829&-(r>>3&1)^705979059&-(r>>4&1)}function i(t){let r=1;for(let e=0;e<t.length;++e){const n=t.charCodeAt(e);if(n<33||n>126)return\"Invalid prefix (\"+t+\")\";r=s(r)^n>>5}r=s(r);for(let e=0;e<t.length;++e){const n=t.charCodeAt(e);r=s(r)^31&n}return r}function o(t,r,e,n){let s=0,i=0;const o=(1<<e)-1,h=[];for(let n=0;n<t.length;++n)for(s=s<<r|t[n],i+=r;i>=e;)i-=e,h.push(s>>i&o);if(n)i>0&&h.push(s<<e-i&o);else{if(i>=r)return\"Excess padding\";if(s<<e-i&o)return\"Non-zero padding\"}return h}function h(t){return o(t,8,5,!0)}function c(t){const r=o(t,5,8,!1);if(Array.isArray(r))return r}function a(t){const r=o(t,5,8,!1);if(Array.isArray(r))return r;throw new Error(r)}function f(t){let r;function o(t,e){if(e=e||90,t.length<8)return t+\" too short\";if(t.length>e)return\"Exceeds length limit\";const o=t.toLowerCase(),h=t.toUpperCase();if(t!==o&&t!==h)return\"Mixed-case string \"+t;const c=(t=o).lastIndexOf(\"1\");if(-1===c)return\"No separator character for \"+t;if(0===c)return\"Missing prefix for \"+t;const a=t.slice(0,c),f=t.slice(c+1);if(f.length<6)return\"Data too short\";let u=i(a);if(\"string\"==typeof u)return u;const l=[];for(let t=0;t<f.length;++t){const r=f.charAt(t),e=n[r];if(void 0===e)return\"Unknown character \"+r;u=s(u)^e,t+6>=f.length||l.push(e)}return u!==r?\"Invalid checksum for \"+t:{prefix:a,words:l}}return r=\"bech32\"===t?1:734539939,{decodeUnsafe:function(t,r){const e=o(t,r);if(\"object\"==typeof e)return e},decode:function(t,r){const e=o(t,r);if(\"object\"==typeof e)return e;throw new Error(e)},encode:function(t,n,o){if(o=o||90,t.length+7+n.length>o)throw new TypeError(\"Exceeds length limit\");let h=i(t=t.toLowerCase());if(\"string\"==typeof h)throw new Error(h);let c=t+\"1\";for(let t=0;t<n.length;++t){const r=n[t];if(r>>5!=0)throw new Error(\"Non 5-bit word\");h=s(h)^r,c+=e.charAt(r)}for(let t=0;t<6;++t)h=s(h);h^=r;for(let t=0;t<6;++t)c+=e.charAt(h>>5*(5-t)&31);return c},toWords:h,fromWordsUnsafe:c,fromWords:a}}r.bech32=f(\"bech32\"),r.bech32m=f(\"bech32m\")},s(i={exports:{}},i.exports),i.exports);(o=h)&&o.__esModule&&Object.prototype.hasOwnProperty.call(o,\"default\")&&o.default;var c=h.bech32m,a=h.bech32;const f=[1116352408,1899447441,-1245643825,-373957723,961987163,1508970993,-1841331548,-1424204075,-670586216,310598401,607225278,1426881987,1925078388,-2132889090,-1680079193,-1046744716,-459576895,-272742522,264347078,604807628,770255983,1249150122,1555081692,1996064986,-1740746414,-1473132947,-1341970488,-1084653625,-958395405,-710438585,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,-2117940946,-1838011259,-1564481375,-1474664885,-1035236496,-949202525,-778901479,-694614492,-200395387,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,-2067236844,-1933114872,-1866530822,-1538233109,-1090935817,-965641998],u={sha256:1};class l{constructor(){this.A=1779033703,this.B=-1150833019,this.C=1013904242,this.D=-1521486534,this.E=1359893119,this.F=-1694144372,this.G=528734635,this.H=1541459225,this._size=0,this._sp=0,(!p||w>=8e3)&&(p=new ArrayBuffer(8e3),w=0),this._byte=new Uint8Array(p,w,80),this._word=new Int32Array(p,w,20),w+=80}update(t){if(\"string\"==typeof t)return this._utf8(t);if(null==t)throw new TypeError(\"Invalid type: \"+typeof t);const r=t.byteOffset,e=t.byteLength;let n=e/64|0,s=0;if(n&&!(3&r)&&!(this._size%64)){const e=new Int32Array(t.buffer,r,16*n);for(;n--;)this._int32(e,s>>2),s+=64;this._size+=s}if(1!==t.BYTES_PER_ELEMENT&&t.buffer){const n=new Uint8Array(t.buffer,r+s,e-s);return this._uint8(n)}return s===e?this:this._uint8(t,s)}_uint8(t,r){const{_byte:e,_word:n}=this,s=t.length;for(r|=0;r<s;){const i=this._size%64;let o=i;for(;r<s&&o<64;)e[o++]=t[r++];o>=64&&this._int32(n),this._size+=o-i}return this}_utf8(t){const{_byte:r,_word:e}=this,n=t.length;let s=this._sp;for(let i=0;i<n;){const o=this._size%64;let h=o;for(;i<n&&h<64;){let e=0|t.charCodeAt(i++);e<128?r[h++]=e:e<2048?(r[h++]=192|e>>>6,r[h++]=128|63&e):e<55296||e>57343?(r[h++]=224|e>>>12,r[h++]=128|e>>>6&63,r[h++]=128|63&e):s?(e=((1023&s)<<10)+(1023&e)+65536,r[h++]=240|e>>>18,r[h++]=128|e>>>12&63,r[h++]=128|e>>>6&63,r[h++]=128|63&e,s=0):s=e}h>=64&&(this._int32(e),e[0]=e[16]),this._size+=h-o}return this._sp=s,this}_int32(t,r){let{A:e,B:n,C:s,D:i,E:o,F:h,G:c,H:a}=this,u=0;for(r|=0;u<16;)d[u++]=g(t[r++]);for(u=16;u<64;u++)d[u]=A(d[u-2])+d[u-7]+m(d[u-15])+d[u-16]|0;for(u=0;u<64;u++){const t=a+E(o)+b(o,h,c)+f[u]+d[u]|0,r=v(e)+_(e,n,s)|0;a=c,c=h,h=o,o=i+t|0,i=s,s=n,n=e,e=t+r|0}this.A=e+this.A|0,this.B=n+this.B|0,this.C=s+this.C|0,this.D=i+this.D|0,this.E=o+this.E|0,this.F=h+this.F|0,this.G=c+this.G|0,this.H=a+this.H|0}digest(t){const{_byte:r,_word:e}=this;let n=this._size%64|0;for(r[n++]=128;3&n;)r[n++]=0;if(n>>=2,n>14){for(;n<16;)e[n++]=0;n=0,this._int32(e)}for(;n<16;)e[n++]=0;const s=8*this._size,i=(4294967295&s)>>>0,o=(s-i)/4294967296;return o&&(e[14]=g(o)),i&&(e[15]=g(i)),this._int32(e),\"hex\"===t?this._hex():this._bin()}_hex(){const{A:t,B:r,C:e,D:n,E:s,F:i,G:o,H:h}=this;return y(t)+y(r)+y(e)+y(n)+y(s)+y(i)+y(o)+y(h)}_bin(){const{A:t,B:r,C:e,D:n,E:s,F:i,G:o,H:h,_byte:c,_word:a}=this;return a[0]=g(t),a[1]=g(r),a[2]=g(e),a[3]=g(n),a[4]=g(s),a[5]=g(i),a[6]=g(o),a[7]=g(h),c.slice(0,32)}}const d=new Int32Array(64);let p,w=0;const y=t=>(t+4294967296).toString(16).substr(-8),g=254===new Uint8Array(new Uint16Array([65279]).buffer)[0]?t=>t:t=>t<<24&4278190080|t<<8&16711680|t>>8&65280|t>>24&255,b=(t,r,e)=>e^t&(r^e),_=(t,r,e)=>t&r|e&(t|r),v=t=>(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10),E=t=>(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7),m=t=>(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3,A=t=>(t>>>17|t<<15)^(t>>>19|t<<13)^t>>>10;var x,k,I=function(t){return function(t){if(t&&!u[t]&&!u[t.toLowerCase()])throw new Error(\"Digest method not supported\");return new l}().update(t).digest()};!function(t){t.mainnet=\"mainnet\",t.testnet=\"testnet\",t.regtest=\"regtest\"}(x||(x={})),function(t){t.p2pkh=\"p2pkh\",t.p2sh=\"p2sh\",t.p2wpkh=\"p2wpkh\",t.p2wsh=\"p2wsh\",t.p2tr=\"p2tr\"}(k||(k={}));var C={0:{type:k.p2pkh,network:x.mainnet},111:{type:k.p2pkh,network:x.testnet},5:{type:k.p2sh,network:x.mainnet},196:{type:k.p2sh,network:x.testnet}},z=function(r){var e,s=r.substr(0,2).toLowerCase();if(\"bc\"===s||\"tb\"===s)return function(t){var r;try{r=t.startsWith(\"bc1p\")||t.startsWith(\"tb1p\")||t.startsWith(\"bcrt1p\")?c.decode(t):a.decode(t)}catch(t){throw new Error(\"Invalid address\")}var e={bc:x.mainnet,tb:x.testnet,bcrt:x.regtest}[r.prefix];if(void 0===e)throw new Error(\"Invalid address\");var n=r.words[0];if(n<0||n>16)throw new Error(\"Invalid address\");return{bech32:!0,network:e,address:t,type:20===a.fromWords(r.words.slice(1)).length?k.p2wpkh:1===n?k.p2tr:k.p2wsh}}(r);try{e=n(r)}catch(t){throw new Error(\"Invalid address\")}var i=e.length;if(25!==i)throw new Error(\"Invalid address\");var o=e[0],h=e.slice(i-4,i),f=e.slice(0,i-4),u=I(I(f)).slice(0,4);if(h.some((function(t,r){return t!==u[r]})))throw new Error(\"Invalid address\");if(!Object.keys(C).map(Number).includes(o))throw new Error(\"Invalid address\");return t(t({},C[o]),{address:r,bech32:!1})},O=function(t,r){try{var e=z(t);return!r||r===e.network}catch(t){return!1}};export{k as AddressType,x as Network,O as default,z as getAddressInfo,O as validate};\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAddressType = void 0;\nconst bitcoin_address_validation_1 = require(\"bitcoin-address-validation\");\nfunction getAddressType(address) {\n    const adddresInfo = (0, bitcoin_address_validation_1.getAddressInfo)(address);\n    return adddresInfo.type;\n}\nexports.getAddressType = getAddressType;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchGET = exports.fetchPOST = void 0;\nasync function fetchPOST(url, headers, body) {\n    try {\n        const resFetch = await fetch(`${url}`, {\n            method: \"POST\",\n            headers,\n            body,\n        });\n        if (!resFetch.ok)\n            throw new Error(`Error POST on : ${url} ${await resFetch.text()}`);\n        // Get the content type from headers\n        const contentType = resFetch.headers.get(\"content-type\");\n        // Clone the response before reading it\n        if (contentType && contentType.includes(\"application/json\")) {\n            return await resFetch.json();\n        }\n        else {\n            return await resFetch.text();\n        }\n    }\n    catch (e) {\n        console.error(e);\n        throw new Error(`Error fetch POST`);\n    }\n}\nexports.fetchPOST = fetchPOST;\nasync function fetchGET(url, headers) {\n    try {\n        const resFetch = await fetch(`${url}`, { headers });\n        if (!resFetch.ok)\n            throw new Error(`Error GET on : ${url} ${await resFetch.text()}`);\n        // Get the content type from headers\n        const contentType = resFetch.headers.get(\"content-type\");\n        // Clone the response before reading it\n        if (contentType && contentType.includes(\"application/json\")) {\n            return await resFetch.json();\n        }\n        else {\n            return await resFetch.text();\n        }\n    }\n    catch (e) {\n        console.error(e);\n        throw new Error(`Error fetch GET`);\n    }\n}\nexports.fetchGET = fetchGET;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getGlittrAsset = exports.getAssetUtxos = exports.getAssetTickers = void 0;\nconst fetch_1 = require(\"../utils/fetch\");\n// TODO change hardcode api url \nconst getAssetTickers = async (client, assets) => {\n    try {\n        return await Promise.all(assets.map(async (asset) => {\n            if (!asset.includes(':')) {\n                throw new Error(`Invalid asset format: ${asset}. Expected format: block:txIndex`);\n            }\n            const [block, txIndex] = asset.split(':');\n            if (!block || !txIndex) {\n                throw new Error(`Invalid asset format: ${asset}. Missing block or txIndex`);\n            }\n            try {\n                const metadataData = await (0, fetch_1.fetchGET)(`${client.glittrApi}/blocktx/${block}/${txIndex}`, { Authorization: `Bearer ${client.apiKey}` });\n                if (!metadataData?.is_valid) {\n                    throw new Error(`Invalid metadata for asset ${block}:${txIndex}`);\n                }\n                if (!metadataData?.message?.message) {\n                    throw new Error(`Missing message data for asset ${block}:${txIndex}`);\n                }\n                const contractCreation = metadataData.message.message.contract_creation;\n                const ticker = contractCreation?.contract_type?.moa?.ticker ||\n                    contractCreation?.contract_type?.mba?.ticker;\n                if (!ticker) {\n                    throw new Error(`No ticker found for asset ${block}:${txIndex}`);\n                }\n                return ticker;\n            }\n            catch (error) {\n                throw new Error(`Error processing asset ${block}:${txIndex}: ${error}`);\n            }\n        }));\n    }\n    catch (error) {\n        throw new Error(`Error fetching asset metadata: ${error}`);\n    }\n};\nexports.getAssetTickers = getAssetTickers;\nconst getAssetUtxos = async (client, address, asset) => {\n    try {\n        // Fetch asset balance data\n        const balanceData = await (0, fetch_1.fetchGET)(`${client.glittrApi}/helper/address/${address}/balance`, { Authorization: `Bearer ${client.apiKey}` });\n        if (!balanceData?.balance?.utxos) {\n            throw new Error('Invalid balance data format');\n        }\n        // Fetch UTXO values from electrum\n        const utxoValuesData = await (0, fetch_1.fetchGET)(`${client.electrumApi}/address/${address}/utxo`, { Authorization: `Bearer ${client.apiKey}` });\n        // Filter utxos that contain the specified asset\n        const relevantUtxos = balanceData.balance.utxos.filter((utxo) => {\n            return utxo.assets && asset in utxo.assets;\n        });\n        return relevantUtxos.map((utxo) => {\n            // Find matching UTXO value\n            const utxoValue = utxoValuesData.find(u => u.txid === utxo.txid && u.vout === utxo.vout);\n            if (!utxoValue) {\n                throw new Error(`UTXO value not found for ${utxo.txid}:${utxo.vout}`);\n            }\n            return {\n                txid: utxo.txid,\n                vout: utxo.vout,\n                value: utxoValue?.value,\n                status: utxoValue?.status,\n                assetAmount: utxo.assets[asset]\n            };\n        });\n    }\n    catch (error) {\n        throw new Error(`Error fetching asset UTXOs: ${error}`);\n    }\n};\nexports.getAssetUtxos = getAssetUtxos;\nconst getGlittrAsset = async (client, txid, vout) => {\n    try {\n        const asset = await (0, fetch_1.fetchGET)(`${client.glittrApi}/assets/${txid}/${vout}`, { Authorization: `Bearer ${client.apiKey}` });\n        return JSON.stringify(asset);\n    }\n    catch (error) {\n        throw new Error(`Error fetching glittr asset by utxo: ${error}`);\n    }\n};\nexports.getGlittrAsset = getGlittrAsset;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.electrumFetchNonGlittrUtxos = exports.electrumFetchTxHex = void 0;\nconst asset_1 = require(\"../helper/asset\");\nconst fetch_1 = require(\"./fetch\");\nconst electrumFetchTxHex = async (electrumApiUrl, apiKey, txId) => {\n    try {\n        const txHex = await (0, fetch_1.fetchGET)(`${electrumApiUrl}/tx/${txId}/hex`, { Authorization: `Bearer ${apiKey}` });\n        return txHex;\n    }\n    catch (e) {\n        throw new Error(`Error fetching TX Hex : ${e}`);\n    }\n};\nexports.electrumFetchTxHex = electrumFetchTxHex;\nconst electrumFetchNonGlittrUtxos = async (client, address) => {\n    try {\n        const unconfirmedUtxos = await (0, fetch_1.fetchGET)(`${client.electrumApi}/address/${address}/utxo`, { Authorization: `Bearer ${client.apiKey}` }) ?? [];\n        const utxos = unconfirmedUtxos.filter((tx) => tx.status && tx.status.confirmed);\n        const nonGlittrUtxos = [];\n        for (const utxo of utxos) {\n            const assetString = await (0, asset_1.getGlittrAsset)(client, utxo.txid, utxo.vout);\n            const asset = JSON.parse(assetString);\n            const assetIsEmpty = !asset.assets ||\n                !asset.assets.list ||\n                Object.keys(asset.assets.list).length === 0;\n            if (assetIsEmpty) {\n                nonGlittrUtxos.push(utxo);\n            }\n        }\n        return nonGlittrUtxos;\n    }\n    catch (e) {\n        throw new Error(`Error fetching Non Glittr UTXOS : ${e}`);\n    }\n};\nexports.electrumFetchNonGlittrUtxos = electrumFetchNonGlittrUtxos;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addFeeToTx = exports.getTransactionBytes = exports.getOutputBytes = exports.getInputBytes = exports.getFeeRate = void 0;\nconst coinselect_1 = require(\"../client/coinselect\");\nconst DEFAULT_FEE_RATES = {\n    MAINNET: {\n        HIGH: 25,\n        MEDIUM: 15,\n        LOW: 5\n    },\n    TESTNET: {\n        HIGH: 10,\n        MEDIUM: 5,\n        LOW: 1\n    },\n    REGTEST: {\n        HIGH: 1,\n        MEDIUM: 1,\n        LOW: 1\n    }\n};\nasync function getFeeRate(network, level, mempoolUrl) {\n    // For regtest, always use minimal fee rate\n    if (network === 'regtest') {\n        return DEFAULT_FEE_RATES.REGTEST[level || 'MEDIUM'];\n    }\n    // For mainnet/testnet, try to get from mempool if URL provided\n    if (mempoolUrl) {\n        try {\n            const response = await fetch(mempoolUrl);\n            const fees = await response.json();\n            switch (level) {\n                case 'HIGH':\n                    return fees.fastestFee;\n                case 'MEDIUM':\n                    return fees.halfHourFee;\n                case 'LOW':\n                    return fees.minimumFee;\n            }\n        }\n        catch (error) {\n            console.warn('Failed to fetch fee rates, using defaults');\n        }\n    }\n    // Cast the network string to the correct type\n    const networkKey = network.toUpperCase();\n    return DEFAULT_FEE_RATES[networkKey][level || 'MEDIUM'];\n}\nexports.getFeeRate = getFeeRate;\nfunction getInputBytes(input) {\n    let bytes = coinselect_1.FEE_TX_INPUT_BASE;\n    if (input.redeemScript) {\n        bytes += input.redeemScript.length;\n    }\n    if (input.witnessScript) {\n        bytes += Math.ceil(input.witnessScript.byteLength / 4);\n    }\n    else if (input.isTaproot) {\n        if (input.taprootWitness) {\n            bytes += Math.ceil(coinselect_1.FEE_TX_INPUT_TAPROOT +\n                input.taprootWitness.reduce((prev, buffer) => prev + buffer.byteLength, 0) /\n                    4);\n        }\n        else {\n            bytes += coinselect_1.FEE_TX_INPUT_TAPROOT;\n        }\n    }\n    else if (input.witnessUtxo) {\n        bytes += coinselect_1.FEE_TX_INPUT_SEGWIT;\n    }\n    else if (!input.redeemScript) {\n        bytes += coinselect_1.FEE_TX_INPUT_PUBKEYHASH;\n    }\n    return bytes;\n}\nexports.getInputBytes = getInputBytes;\nfunction getOutputBytes(output) {\n    let bytes = coinselect_1.FEE_TX_OUTPUT_BASE;\n    if (output.script) {\n        bytes += output.script.byteLength;\n    }\n    else if (output.address?.startsWith(\"bc1\") || // mainnet\n        output.address?.startsWith(\"tb1\") || // testnet\n        output.address?.startsWith(\"bcrt1\") // regtest\n    ) {\n        // 42 for mainnet/testnet, 44 for regtest\n        if (output.address?.length === 42 || output.address?.length === 44) {\n            bytes += coinselect_1.FEE_TX_OUTPUT_SEGWIT;\n        }\n        else {\n            // taproot fee approximate is same like p2wsh (2 of 3 multisig)\n            bytes += coinselect_1.FEE_TX_OUTPUT_SEGWIT_SCRIPTHASH;\n        }\n        // both testnet and regtest has the same prefix 2\n    }\n    else if (output.address?.startsWith(\"3\") ||\n        output.address?.startsWith(\"2\")) {\n        bytes += coinselect_1.FEE_TX_OUTPUT_SCRIPTHASH;\n    }\n    else {\n        bytes += coinselect_1.FEE_TX_OUTPUT_PUBKEYHASH;\n    }\n    return bytes;\n}\nexports.getOutputBytes = getOutputBytes;\nfunction getTransactionBytes(inputs, outputs) {\n    return (coinselect_1.FEE_TX_EMPTY_SIZE +\n        inputs.reduce((prev, input) => prev + getInputBytes(input), 0) +\n        outputs.reduce((prev, output) => prev + getOutputBytes(output), 0));\n}\nexports.getTransactionBytes = getTransactionBytes;\nasync function addFeeToTx(network, address, utxos, inputs, outputs) {\n    const feeRate = await getFeeRate(network);\n    const txBytes = getTransactionBytes(inputs, outputs);\n    const totalFee = feeRate * txBytes;\n    for (const utxo of utxos) {\n        if (inputs.some(input => input.txid === utxo.txid && input.vout === utxo.vout))\n            continue;\n        inputs.push(utxo);\n        const totalInputValue = inputs.reduce((prev, input) => prev + input.value, 0);\n        const totalOutputValue = outputs.reduce((prev, output) => prev + output.value, 0);\n        if (totalInputValue >= totalOutputValue + totalFee + 1000)\n            break;\n    }\n    // Calculate change amount\n    const changeAmountBytes = coinselect_1.FEE_TX_OUTPUT_BASE + coinselect_1.FEE_TX_OUTPUT_PUBKEYHASH;\n    const txBytesAfterFee = getTransactionBytes(inputs, outputs);\n    const feeWithChangeAmount = feeRate * (txBytesAfterFee + changeAmountBytes);\n    const remainderAfterChangeAmount = inputs.reduce((prev, input) => prev + input.value, 0) -\n        (outputs.reduce((prev, output) => prev + output.value, 0) + feeWithChangeAmount + totalFee);\n    const changeFee = feeRate * (coinselect_1.FEE_TX_OUTPUT_BASE + coinselect_1.FEE_TX_OUTPUT_PUBKEYHASH);\n    if (remainderAfterChangeAmount > 546 && remainderAfterChangeAmount > changeFee) {\n        outputs.push({\n            address,\n            value: remainderAfterChangeAmount\n        });\n    }\n    // Final validation temporary disabled\n    // const finalTxBytes = getTransactionBytes(inputs, outputs);\n    // const finalFee = inputs.reduce((prev, input) => prev + input.value, 0) -\n    //   outputs.reduce((prev, output) => prev + output.value, 0);\n    // if (finalFee / finalTxBytes < 1) {\n    //   throw new Error('Transaction fee rate too low. Minimum required is 1 sat/vbyte.');\n    // }\n    return { inputs, outputs };\n}\nexports.addFeeToTx = addFeeToTx;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encryptMessage = exports.encodeGlittrData = void 0;\nconst bitcoinjs_lib_1 = require(\"bitcoinjs-lib\");\nconst secp256k1_1 = require(\"@noble/curves/secp256k1\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nfunction encodeGlittrData(message) {\n    const glittrFlag = Buffer.from(\"GLITTR\", \"utf8\"); // Prefix\n    const glittrData = Buffer.from(message, \"utf8\");\n    const embed = bitcoinjs_lib_1.script.compile([106, glittrFlag, glittrData]);\n    return embed;\n}\nexports.encodeGlittrData = encodeGlittrData;\nasync function encryptMessage(publicKeyBytes, message) {\n    const ephemeralPrivateKey = secp256k1_1.secp256k1.utils.randomPrivateKey();\n    const ephemeralPublicKey = secp256k1_1.secp256k1.getPublicKey(ephemeralPrivateKey);\n    const publicKey = secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKeyBytes);\n    // Simplified ECDH calculation\n    const sharedSecret = publicKey.multiply(BigInt('0x' + Buffer.from(ephemeralPrivateKey).toString('hex'))).toRawBytes();\n    const symmetricKey = (0, sha256_1.sha256)(sharedSecret);\n    const nonce = crypto.getRandomValues(new Uint8Array(12));\n    const key = await crypto.subtle.importKey('raw', symmetricKey, { name: 'AES-GCM' }, false, ['encrypt']);\n    const ciphertext = await crypto.subtle.encrypt({ name: 'AES-GCM', iv: nonce }, key, new TextEncoder().encode(message));\n    // Combine all components\n    return Buffer.concat([\n        Buffer.from(ephemeralPublicKey),\n        nonce,\n        new Uint8Array(ciphertext)\n    ]);\n}\nexports.encryptMessage = encryptMessage;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BUFFER_MAX_VARUINT_LENGTH = exports.I128_MIN_NUMBER = exports.I128_MAX_NUMBER = exports.U128_MAX_NUMBER = void 0;\nexports.U128_MAX_NUMBER = 0xffffffffffffffffffffffffffffffffn;\nexports.I128_MAX_NUMBER = exports.U128_MAX_NUMBER / 2n;\nexports.I128_MIN_NUMBER = -exports.I128_MAX_NUMBER;\nexports.BUFFER_MAX_VARUINT_LENGTH = 19; // maximum u128 length\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeVaruint = exports.encodeVaruint = void 0;\nconst const_1 = require(\"../helper/const\");\nfunction encodeVaruint(t) {\n    let n = BigInt(t);\n    if (n < 0n) {\n        throw new Error(\"Value must be positive\");\n    }\n    if (n > const_1.U128_MAX_NUMBER) {\n        throw new Error(`Can't encode value more than ${const_1.U128_MAX_NUMBER}`);\n    }\n    const arr = new Uint8Array(const_1.BUFFER_MAX_VARUINT_LENGTH);\n    let i = 0;\n    while (n >> 7n > 0) {\n        arr[i] = Number((n & 255n) | 128n);\n        n >>= 7n;\n        i += 1;\n    }\n    arr[i] = Number(n);\n    return arr.slice(0, i + 1);\n}\nexports.encodeVaruint = encodeVaruint;\nfunction decodeVaruint(varIntLike) {\n    if (typeof varIntLike == \"string\") {\n        return BigInt(varIntLike);\n    }\n    let finalValue = BigInt(0);\n    for (let i = 0; i < varIntLike.length; i += 1) {\n        const byte = varIntLike[i];\n        const value = byte & 127;\n        finalValue = finalValue | (BigInt(value) << (7n * BigInt(i)));\n    }\n    if (finalValue < 0n) {\n        // this can't be happen, just for safety\n        throw new Error(\"Value is minus, something wrong\");\n    }\n    return finalValue;\n}\nexports.decodeVaruint = decodeVaruint;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeVarint = exports.encodeVarint = void 0;\nconst const_1 = require(\"../helper/const\");\nfunction encodeVarint(t) {\n    let n = BigInt(t);\n    if (n > const_1.I128_MAX_NUMBER) {\n        throw new Error(`Can't encode value more than ${const_1.I128_MAX_NUMBER}`);\n    }\n    if (n < const_1.I128_MIN_NUMBER) {\n        throw new Error(`Can't encode value less than ${const_1.I128_MIN_NUMBER}`);\n    }\n    // zigzag encoding to convert it into unsigned\n    let unsigned = 0n;\n    if (n > 1n) {\n        // positive\n        unsigned = n << 1n;\n    }\n    else if (n !== 0n) {\n        // negative\n        unsigned = (-n << 1n) - 1n;\n    }\n    n = unsigned;\n    const arr = new Uint8Array(const_1.BUFFER_MAX_VARUINT_LENGTH);\n    let i = 0;\n    while (n >> 7n > 0) {\n        arr[i] = Number((n & 255n) | 128n);\n        n >>= 7n;\n        i += 1;\n    }\n    arr[i] = Number(n);\n    return arr.slice(0, i + 1);\n}\nexports.encodeVarint = encodeVarint;\nfunction decodeVarint(buffer) {\n    let finalValue = BigInt(0);\n    for (let i = 0; i < buffer.length; i += 1) {\n        const byte = buffer[i];\n        const value = byte & 127;\n        finalValue = finalValue | (BigInt(value) << (7n * BigInt(i)));\n    }\n    if (finalValue < 0n) {\n        // this can't be happen, just for safety\n        throw new Error(\"Value is minus, something wrong\");\n    }\n    if (finalValue == 0n) {\n        return finalValue;\n    }\n    // zigzag encoding to convert it into signed\n    if ((finalValue & 1n) == 1n) {\n        // negative\n        return -((finalValue + 1n) >> 1n);\n    }\n    else {\n        // positive\n        return finalValue >> 1n;\n    }\n}\nexports.decodeVarint = decodeVarint;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeBase26 = void 0;\nconst const_1 = require(\"../helper/const\");\nconst varuint_1 = require(\"./varuint\");\nfunction encodeBase26(str) {\n    str = str.toUpperCase();\n    // should be u128\n    let number = 0n;\n    // should be u32\n    let spacersValue = 0n;\n    let charIndex = 0;\n    for (let i = 0; i < str.length; i += 1) {\n        const c = str.charAt(i);\n        if (c >= \"A\" && c <= \"Z\") {\n            if (charIndex > 0) {\n                number += 1n;\n            }\n            number *= 26n;\n            number += BigInt(c.charCodeAt(0) - \"A\".charCodeAt(0));\n            if (number > const_1.U128_MAX_NUMBER) {\n                throw new Error(\"Character is too large to be encoded\");\n            }\n            charIndex += 1;\n        }\n        else if (c === \".\" || c === \"•\") {\n            const flag = 1n << BigInt(charIndex);\n            if ((spacersValue & flag) === 0n) {\n                spacersValue |= flag;\n            }\n        }\n        else {\n            throw new Error(`Invalid character in ticker: ${c}`);\n        }\n    }\n    if (spacersValue > 0n) {\n        return {\n            number: (0, varuint_1.encodeVaruint)(number),\n            spacers: (0, varuint_1.encodeVaruint)(spacersValue)\n        };\n    }\n    else {\n        return {\n            number: (0, varuint_1.encodeVaruint)(number),\n        };\n    }\n}\nexports.encodeBase26 = encodeBase26;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Header = void 0;\nclass Header {\n    value;\n    constructor(version, isCompressed) {\n        if (version > 0x3f) {\n            throw new Error(\"Version must be less than 64\");\n        }\n        const versionShifted = version << 2;\n        const reservedFlag = 0;\n        const flags = ((isCompressed ? 1 : 0) << 1) | reservedFlag;\n        this.value = versionShifted | flags;\n    }\n    getVersion() {\n        return this.value >> 2;\n    }\n    isCompressed() {\n        return (this.value & 2) !== 0;\n    }\n    isReserved() {\n        return (this.value & 1) !== 0;\n    }\n    toBytes() {\n        return new Uint8Array([this.value]);\n    }\n    static fromBytes(bytes) {\n        const value = bytes[0];\n        const header = Object.create(Header.prototype);\n        header.value = value;\n        return header;\n    }\n}\nexports.Header = Header;\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./ecpair\"), exports);\n__exportStar(require(\"./common\"), exports);\n__exportStar(require(\"./network\"), exports);\n__exportStar(require(\"./electrum\"), exports);\n__exportStar(require(\"./encode\"), exports);\n__exportStar(require(\"./varuint\"), exports);\n__exportStar(require(\"./varint\"), exports);\n__exportStar(require(\"./az-base26\"), exports);\n__exportStar(require(\"./header\"), exports);\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dustThreshold = exports.coinSelect = exports.FEE_TX_OUTPUT_TAPROOT = exports.FEE_TX_OUTPUT_SEGWIT_SCRIPTHASH = exports.FEE_TX_OUTPUT_SEGWIT = exports.FEE_TX_OUTPUT_SCRIPTHASH = exports.FEE_TX_OUTPUT_PUBKEYHASH = exports.FEE_TX_OUTPUT_BASE = exports.FEE_TX_INPUT_TAPROOT = exports.FEE_TX_INPUT_SEGWIT_SCRIPTHASH = exports.FEE_TX_INPUT_SEGWIT = exports.FEE_TX_INPUT_SCRIPTHASH = exports.FEE_TX_INPUT_PUBKEYHASH = exports.FEE_TX_INPUT_BASE = exports.FEE_TX_EMPTY_SIZE = void 0;\nconst bitcoin_address_validation_1 = require(\"bitcoin-address-validation\");\nconst address_1 = require(\"../utils/address\");\nconst bitcoinjs_lib_1 = require(\"bitcoinjs-lib\");\nconst electrum_1 = require(\"../utils/electrum\");\nconst fee_1 = require(\"../helper/fee\");\nconst fetch_1 = require(\"../utils/fetch\");\nconst utils_1 = require(\"../utils\");\nexports.FEE_TX_EMPTY_SIZE = 4 + 1 + 1 + 4;\nexports.FEE_TX_INPUT_BASE = 32 + 4 + 1 + 4;\nexports.FEE_TX_INPUT_PUBKEYHASH = 107;\nexports.FEE_TX_INPUT_SCRIPTHASH = 1; // calculate based on script length\nexports.FEE_TX_INPUT_SEGWIT = 27 + 1;\nexports.FEE_TX_INPUT_SEGWIT_SCRIPTHASH = 0; // calculate based on script length\nexports.FEE_TX_INPUT_TAPROOT = 17 + 1;\nexports.FEE_TX_OUTPUT_BASE = 8 + 1;\nexports.FEE_TX_OUTPUT_PUBKEYHASH = 25;\nexports.FEE_TX_OUTPUT_SCRIPTHASH = 23;\nexports.FEE_TX_OUTPUT_SEGWIT = 22;\nexports.FEE_TX_OUTPUT_SEGWIT_SCRIPTHASH = 34;\nexports.FEE_TX_OUTPUT_TAPROOT = 34;\nfunction _sumValues(data) {\n    // @ts-ignore\n    return data?.reduce((prev, input) => prev + (input.value || 0), 0);\n}\nfunction _isTxContainsOnlyTransfer(tx) {\n    // Check if tx has exactly one key and it's 'transfer'\n    const keys = Object.keys(tx);\n    if (keys.length === 1 && keys[0] === \"transfer\" && tx.transfer?.transfers) {\n        return tx.transfer.transfers.map((transfer) => ({\n            asset: transfer.asset,\n            amount: transfer.amount,\n        }));\n    }\n    return null;\n}\nfunction _isTxContainsMintContractCall(tx) {\n    if (tx.contract_call &&\n        tx.contract_call.call_type &&\n        \"mint\" in tx.contract_call.call_type) {\n        const mintCall = tx.contract_call.call_type.mint;\n        return {\n            contract: tx.contract_call.contract,\n            pointer: mintCall.pointer,\n        };\n    }\n    return null;\n}\nasync function coinSelect(client, inputs, outputs, feeRate, address, tx, changeOutputAddress, publicKey) {\n    let txBytes = (0, fee_1.getTransactionBytes)(inputs, outputs);\n    let totalInputValue = inputs.reduce((prev, input) => prev + input.value, 0);\n    const totalOutputValue = outputs.reduce((prev, output) => prev + output.value, 0);\n    let totalFee = feeRate * txBytes;\n    // if (totalInputValue < totalOutputValue + totalFee) {\n    //   return;\n    // }\n    const utxos = await (0, electrum_1.electrumFetchNonGlittrUtxos)(client, address);\n    const fetchGlittrAsset = async (txId, vout) => {\n        try {\n            const asset = await (0, fetch_1.fetchGET)(`${client.glittrApi}/assets/${txId}/${vout}`, { Authorization: `Bearer ${client.apiKey}` });\n            return JSON.stringify(asset);\n        }\n        catch (e) {\n            throw new Error(`Error fetching Glittr Asset : ${e}`);\n        }\n    };\n    // Separate UTXOs based on asset presence\n    const utxosGlittr = [];\n    const nonUtxosGlittr = [];\n    for (const utxo of utxos) {\n        const assetString = await fetchGlittrAsset(utxo.txid, utxo.vout);\n        const asset = JSON.parse(assetString);\n        const assetIsEmpty = !asset.assets ||\n            !asset.assets.list ||\n            Object.keys(asset.assets.list).length === 0;\n        if (assetIsEmpty) {\n            nonUtxosGlittr.push(utxo);\n        }\n        else {\n            // Convert the asset list object into the required format\n            const glittrUtxo = {\n                ...utxo,\n                assets: Object.entries(asset.assets.list).map(([assetId, amount]) => ({\n                    asset: assetId,\n                    amount: amount,\n                })),\n            };\n            utxosGlittr.push(glittrUtxo);\n        }\n    }\n    const addUtxosToInputs = (utxosList, feeRate) => {\n        for (const utxo of utxosList) {\n            const utxoBytes = (0, fee_1.getInputBytes)(utxo);\n            const utxoFee = feeRate * utxoBytes;\n            const utxoValue = utxo.value;\n            if (utxoFee > utxoValue)\n                continue;\n            txBytes += utxoBytes;\n            totalInputValue += utxoValue;\n            inputs.push(utxo);\n            if (totalInputValue >= totalOutputValue + totalFee)\n                break;\n        }\n    };\n    if (_isTxContainsOnlyTransfer(tx)) {\n        const transferAssets = _isTxContainsOnlyTransfer(tx);\n        if (!transferAssets)\n            throw new Error(\"Transfer TX invalid\");\n        // Filter utxosGlittr to only include UTXOs that contain the required transfer assets\n        const relevantUtxos = utxosGlittr.filter((utxo) => {\n            return transferAssets?.some((transfer) => utxo.assets?.some((asset) => Array.isArray(transfer.asset) &&\n                asset.asset === `${transfer.asset[0]}:${transfer.asset[1]}`\n            // && BigInt(asset.amount) >= BigInt(transfer.amount)\n            ));\n        });\n        addUtxosToInputs(relevantUtxos, feeRate);\n        // Handle if input asset is enough or more\n        const getInputAssetSum = (assetId) => {\n            return inputs.reduce((sum, input) => {\n                const matchingAsset = input.assets?.find((a) => a.asset === assetId);\n                return sum + BigInt(matchingAsset?.amount || 0);\n            }, BigInt(0));\n        };\n        // Check if glittr asset inputs are enough\n        for (const { asset, amount } of transferAssets) {\n            const _amount = (0, utils_1.decodeVaruint)(amount);\n            const assetId = `${asset[0]}:${asset[1]}`;\n            // If input asset is enough, continue to next asset\n            if (getInputAssetSum(assetId) === BigInt(_amount)) {\n                continue;\n            }\n            // Loop through relevant UTXOs till input asset is enough or more\n            for (const utxo of relevantUtxos) {\n                if (getInputAssetSum(assetId) >= BigInt(_amount))\n                    break;\n                if (inputs.some((input) => input.txid === utxo.txid))\n                    continue;\n                addUtxosToInputs([utxo], feeRate);\n            }\n            // If input asset is still not enough, throw error\n            if (getInputAssetSum(assetId) < BigInt(_amount)) {\n                throw new Error(`Insufficient balance for asset ${assetId}. Required: ${_amount}, Available: ${getInputAssetSum(assetId)}`);\n            }\n            const excessAssetValue = getInputAssetSum(assetId) - BigInt(_amount);\n            if (excessAssetValue > 0) {\n                // TODO handle excess asset input\n                // - add excess amount transfer tx into transfer.transfers\n                tx?.transfer?.transfers.push({\n                    asset: asset,\n                    amount: client.forceCompression || client.network != \"regtest\"\n                        ? (0, utils_1.encodeVaruint)(excessAssetValue)\n                        : excessAssetValue.toString(),\n                    output: client.forceCompression || client.network != \"regtest\" ? (0, utils_1.encodeVaruint)(outputs.length) : outputs.length,\n                });\n                // - add output for excess amount to the sender address\n                outputs.push({\n                    value: 546,\n                    address: address,\n                });\n                txBytes += (0, fee_1.getOutputBytes)({\n                    value: 546,\n                    address: address,\n                });\n                totalFee = feeRate * txBytes;\n                // - make sure the transfer index and output is matched\n            }\n        }\n    }\n    // // TODO handle mint, add output from mint pointer\n    // if (_isTxContainsMintContractCall(tx)) {\n    //   const mintCall = _isTxContainsMintContractCall(tx);\n    //   if (!mintCall) throw new Error(\"Mint TX invalid\");\n    // }\n    if (totalInputValue < totalOutputValue + totalFee) {\n        addUtxosToInputs(nonUtxosGlittr, feeRate);\n    }\n    // TODO handle multiple utxo type in one array\n    let utxoInputs = [];\n    const addressType = (0, address_1.getAddressType)(address);\n    for (const utxo of inputs) {\n        switch (addressType) {\n            case bitcoin_address_validation_1.AddressType.p2pkh:\n            case bitcoin_address_validation_1.AddressType.p2sh:\n                const txHex = await (0, electrum_1.electrumFetchTxHex)(client.electrumApi, client.apiKey, utxo.txid);\n                utxoInputs.push({\n                    hash: utxo.txid,\n                    index: utxo.vout,\n                    nonWitnessUtxo: Buffer.from(txHex, \"hex\"),\n                });\n                break;\n            case bitcoin_address_validation_1.AddressType.p2wpkh:\n                const paymentOutput = bitcoinjs_lib_1.payments.p2wpkh({\n                    address,\n                    network: (0, utils_1.getBitcoinNetwork)(client.network),\n                }).output;\n                utxoInputs.push({\n                    hash: utxo.txid,\n                    index: utxo.vout,\n                    witnessUtxo: {\n                        script: paymentOutput,\n                        value: utxo.value,\n                    },\n                });\n                break;\n            case bitcoin_address_validation_1.AddressType.p2tr:\n                const p2trOutput = bitcoinjs_lib_1.payments.p2tr({\n                    address,\n                    network: (0, utils_1.getBitcoinNetwork)(client.network),\n                }).output;\n                utxoInputs.push({\n                    hash: utxo.txid,\n                    index: utxo.vout,\n                    witnessUtxo: {\n                        script: p2trOutput,\n                        value: utxo.value,\n                    },\n                    tapInternalKey: publicKey\n                        ? Buffer.from(publicKey, \"hex\").subarray(1, 33)\n                        : undefined,\n                });\n                break;\n        }\n    }\n    // Finalize\n    let changeFee = exports.FEE_TX_OUTPUT_BASE + exports.FEE_TX_OUTPUT_PUBKEYHASH;\n    if (changeOutputAddress) {\n        changeFee = (0, fee_1.getOutputBytes)({ address, value: 0 }); // value: 0 is dummy\n    }\n    const bytesAccum = (0, fee_1.getTransactionBytes)(inputs, outputs);\n    const feeAfterExtraOutput = feeRate * (bytesAccum + changeFee);\n    const remainderAfterExtraOutput = inputs.reduce((prev, input) => prev + input.value, 0) -\n        (outputs.reduce((prev, output) => prev + output.value, 0) +\n            feeAfterExtraOutput);\n    if (changeOutputAddress &&\n        remainderAfterExtraOutput > dustThreshold(feeRate)) {\n        outputs.push({\n            address: changeOutputAddress,\n            value: remainderAfterExtraOutput,\n        });\n    }\n    const fee = _sumValues(inputs) - _sumValues(outputs);\n    if (!isFinite(fee))\n        return { fee: feeRate * bytesAccum };\n    const txFee = (0, fee_1.getTransactionBytes)(inputs, outputs) * feeRate;\n    return { inputs: utxoInputs, outputs, fee, txFee, tx };\n}\nexports.coinSelect = coinSelect;\nfunction dustThreshold(feeRate) {\n    return exports.FEE_TX_INPUT_BASE + exports.FEE_TX_INPUT_PUBKEYHASH * feeRate;\n}\nexports.dustThreshold = dustThreshold;\n", "\"use strict\";\nexports.__esModule = true;\nexports.integers = void 0;\nexports.integers = ['u8', 'u16', 'u32', 'u64', 'u128', 'i8', 'i16', 'i32', 'i64', 'i128', 'f32', 'f64'];\n", "\"use strict\";\nexports.__esModule = true;\nexports.DecodeBuffer = exports.EncodeBuffer = void 0;\nvar EncodeBuffer = /** @class */ (function () {\n    function EncodeBuffer() {\n        this.offset = 0;\n        this.buffer_size = 256;\n        this.buffer = new ArrayBuffer(this.buffer_size);\n        this.view = new DataView(this.buffer);\n    }\n    EncodeBuffer.prototype.resize_if_necessary = function (needed_space) {\n        if (this.buffer_size - this.offset < needed_space) {\n            this.buffer_size = Math.max(this.buffer_size * 2, this.buffer_size + needed_space);\n            var new_buffer = new ArrayBuffer(this.buffer_size);\n            new Uint8Array(new_buffer).set(new Uint8Array(this.buffer));\n            this.buffer = new_buffer;\n            this.view = new DataView(new_buffer);\n        }\n    };\n    EncodeBuffer.prototype.get_used_buffer = function () {\n        return new Uint8Array(this.buffer).slice(0, this.offset);\n    };\n    EncodeBuffer.prototype.store_value = function (value, type) {\n        var bSize = type.substring(1);\n        var size = parseInt(bSize) / 8;\n        this.resize_if_necessary(size);\n        var toCall = type[0] === 'f' ? \"setFloat\".concat(bSize) : type[0] === 'i' ? \"setInt\".concat(bSize) : \"setUint\".concat(bSize);\n        this.view[toCall](this.offset, value, true);\n        this.offset += size;\n    };\n    EncodeBuffer.prototype.store_bytes = function (from) {\n        this.resize_if_necessary(from.length);\n        new Uint8Array(this.buffer).set(new Uint8Array(from), this.offset);\n        this.offset += from.length;\n    };\n    return EncodeBuffer;\n}());\nexports.EncodeBuffer = EncodeBuffer;\nvar DecodeBuffer = /** @class */ (function () {\n    function DecodeBuffer(buf) {\n        this.offset = 0;\n        this.buffer_size = buf.length;\n        this.buffer = new ArrayBuffer(buf.length);\n        new Uint8Array(this.buffer).set(buf);\n        this.view = new DataView(this.buffer);\n    }\n    DecodeBuffer.prototype.assert_enough_buffer = function (size) {\n        if (this.offset + size > this.buffer.byteLength) {\n            throw new Error('Error in schema, the buffer is smaller than expected');\n        }\n    };\n    DecodeBuffer.prototype.consume_value = function (type) {\n        var bSize = type.substring(1);\n        var size = parseInt(bSize) / 8;\n        this.assert_enough_buffer(size);\n        var toCall = type[0] === 'f' ? \"getFloat\".concat(bSize) : type[0] === 'i' ? \"getInt\".concat(bSize) : \"getUint\".concat(bSize);\n        var ret = this.view[toCall](this.offset, true);\n        this.offset += size;\n        return ret;\n    };\n    DecodeBuffer.prototype.consume_bytes = function (size) {\n        this.assert_enough_buffer(size);\n        var ret = this.buffer.slice(this.offset, this.offset + size);\n        this.offset += size;\n        return ret;\n    };\n    return DecodeBuffer;\n}());\nexports.DecodeBuffer = DecodeBuffer;\n", "\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nexports.validate_schema = exports.ErrorSchema = exports.expect_enum = exports.expect_same_size = exports.expect_bigint = exports.expect_type = exports.isArrayLike = void 0;\nvar types_js_1 = require(\"./types.js\");\nfunction isArrayLike(value) {\n    // source: https://stackoverflow.com/questions/24048547/checking-if-an-object-is-array-like\n    return (Array.isArray(value) ||\n        (!!value &&\n            typeof value === 'object' &&\n            'length' in value &&\n            typeof (value.length) === 'number' &&\n            (value.length === 0 ||\n                (value.length > 0 &&\n                    (value.length - 1) in value))));\n}\nexports.isArrayLike = isArrayLike;\nfunction expect_type(value, type, fieldPath) {\n    if (typeof (value) !== type) {\n        throw new Error(\"Expected \".concat(type, \" not \").concat(typeof (value), \"(\").concat(value, \") at \").concat(fieldPath.join('.')));\n    }\n}\nexports.expect_type = expect_type;\nfunction expect_bigint(value, fieldPath) {\n    var basicType = ['number', 'string', 'bigint', 'boolean'].includes(typeof (value));\n    var strObject = typeof (value) === 'object' && value !== null && 'toString' in value;\n    if (!basicType && !strObject) {\n        throw new Error(\"Expected bigint, number, boolean or string not \".concat(typeof (value), \"(\").concat(value, \") at \").concat(fieldPath.join('.')));\n    }\n}\nexports.expect_bigint = expect_bigint;\nfunction expect_same_size(length, expected, fieldPath) {\n    if (length !== expected) {\n        throw new Error(\"Array length \".concat(length, \" does not match schema length \").concat(expected, \" at \").concat(fieldPath.join('.')));\n    }\n}\nexports.expect_same_size = expect_same_size;\nfunction expect_enum(value, fieldPath) {\n    if (typeof (value) !== 'object' || value === null) {\n        throw new Error(\"Expected object not \".concat(typeof (value), \"(\").concat(value, \") at \").concat(fieldPath.join('.')));\n    }\n}\nexports.expect_enum = expect_enum;\n// Validate Schema\nvar VALID_STRING_TYPES = types_js_1.integers.concat(['bool', 'string']);\nvar VALID_OBJECT_KEYS = ['option', 'enum', 'array', 'set', 'map', 'struct'];\nvar ErrorSchema = /** @class */ (function (_super) {\n    __extends(ErrorSchema, _super);\n    function ErrorSchema(schema, expected) {\n        var message = \"Invalid schema: \".concat(JSON.stringify(schema), \" expected \").concat(expected);\n        return _super.call(this, message) || this;\n    }\n    return ErrorSchema;\n}(Error));\nexports.ErrorSchema = ErrorSchema;\nfunction validate_schema(schema) {\n    if (typeof (schema) === 'string' && VALID_STRING_TYPES.includes(schema)) {\n        return;\n    }\n    if (schema && typeof (schema) === 'object') {\n        var keys = Object.keys(schema);\n        if (keys.length === 1 && VALID_OBJECT_KEYS.includes(keys[0])) {\n            var key = keys[0];\n            if (key === 'option')\n                return validate_schema(schema[key]);\n            if (key === 'enum')\n                return validate_enum_schema(schema[key]);\n            if (key === 'array')\n                return validate_array_schema(schema[key]);\n            if (key === 'set')\n                return validate_schema(schema[key]);\n            if (key === 'map')\n                return validate_map_schema(schema[key]);\n            if (key === 'struct')\n                return validate_struct_schema(schema[key]);\n        }\n    }\n    throw new ErrorSchema(schema, VALID_OBJECT_KEYS.join(', ') + ' or ' + VALID_STRING_TYPES.join(', '));\n}\nexports.validate_schema = validate_schema;\nfunction validate_enum_schema(schema) {\n    if (!Array.isArray(schema))\n        throw new ErrorSchema(schema, 'Array');\n    for (var _i = 0, schema_1 = schema; _i < schema_1.length; _i++) {\n        var sch = schema_1[_i];\n        if (typeof sch !== 'object' || !('struct' in sch)) {\n            throw new Error('Missing \"struct\" key in enum schema');\n        }\n        if (typeof sch.struct !== 'object' || Object.keys(sch.struct).length !== 1) {\n            throw new Error('The \"struct\" in each enum must have a single key');\n        }\n        validate_schema({ struct: sch.struct });\n    }\n}\nfunction validate_array_schema(schema) {\n    if (typeof schema !== 'object')\n        throw new ErrorSchema(schema, '{ type, len? }');\n    if (schema.len && typeof schema.len !== 'number') {\n        throw new Error(\"Invalid schema: \".concat(schema));\n    }\n    if ('type' in schema)\n        return validate_schema(schema.type);\n    throw new ErrorSchema(schema, '{ type, len? }');\n}\nfunction validate_map_schema(schema) {\n    if (typeof schema === 'object' && 'key' in schema && 'value' in schema) {\n        validate_schema(schema.key);\n        validate_schema(schema.value);\n    }\n    else {\n        throw new ErrorSchema(schema, '{ key, value }');\n    }\n}\nfunction validate_struct_schema(schema) {\n    if (typeof schema !== 'object')\n        throw new ErrorSchema(schema, 'object');\n    for (var key in schema) {\n        validate_schema(schema[key]);\n    }\n}\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nexports.__esModule = true;\nexports.BorshSerializer = void 0;\nvar types_js_1 = require(\"./types.js\");\nvar buffer_js_1 = require(\"./buffer.js\");\nvar utils = __importStar(require(\"./utils.js\"));\nvar BorshSerializer = /** @class */ (function () {\n    function BorshSerializer(checkTypes) {\n        this.encoded = new buffer_js_1.EncodeBuffer();\n        this.fieldPath = ['value'];\n        this.checkTypes = checkTypes;\n    }\n    BorshSerializer.prototype.encode = function (value, schema) {\n        this.encode_value(value, schema);\n        return this.encoded.get_used_buffer();\n    };\n    BorshSerializer.prototype.encode_value = function (value, schema) {\n        if (typeof schema === 'string') {\n            if (types_js_1.integers.includes(schema))\n                return this.encode_integer(value, schema);\n            if (schema === 'string')\n                return this.encode_string(value);\n            if (schema === 'bool')\n                return this.encode_boolean(value);\n        }\n        if (typeof schema === 'object') {\n            if ('option' in schema)\n                return this.encode_option(value, schema);\n            if ('enum' in schema)\n                return this.encode_enum(value, schema);\n            if ('array' in schema)\n                return this.encode_array(value, schema);\n            if ('set' in schema)\n                return this.encode_set(value, schema);\n            if ('map' in schema)\n                return this.encode_map(value, schema);\n            if ('struct' in schema)\n                return this.encode_struct(value, schema);\n        }\n    };\n    BorshSerializer.prototype.encode_integer = function (value, schema) {\n        var size = parseInt(schema.substring(1));\n        if (size <= 32 || schema == 'f64') {\n            this.checkTypes && utils.expect_type(value, 'number', this.fieldPath);\n            this.encoded.store_value(value, schema);\n        }\n        else {\n            this.checkTypes && utils.expect_bigint(value, this.fieldPath);\n            this.encode_bigint(BigInt(value), size);\n        }\n    };\n    BorshSerializer.prototype.encode_bigint = function (value, size) {\n        var buffer_len = size / 8;\n        var buffer = new Uint8Array(buffer_len);\n        for (var i = 0; i < buffer_len; i++) {\n            buffer[i] = Number(value & BigInt(0xff));\n            value = value >> BigInt(8);\n        }\n        this.encoded.store_bytes(new Uint8Array(buffer));\n    };\n    BorshSerializer.prototype.encode_string = function (value) {\n        this.checkTypes && utils.expect_type(value, 'string', this.fieldPath);\n        var _value = value;\n        // encode to utf8 bytes without using TextEncoder\n        var utf8Bytes = [];\n        for (var i = 0; i < _value.length; i++) {\n            var charCode = _value.charCodeAt(i);\n            if (charCode < 0x80) {\n                utf8Bytes.push(charCode);\n            }\n            else if (charCode < 0x800) {\n                utf8Bytes.push(0xc0 | (charCode >> 6), 0x80 | (charCode & 0x3f));\n            }\n            else if (charCode < 0xd800 || charCode >= 0xe000) {\n                utf8Bytes.push(0xe0 | (charCode >> 12), 0x80 | ((charCode >> 6) & 0x3f), 0x80 | (charCode & 0x3f));\n            }\n            else {\n                i++;\n                charCode = 0x10000 + (((charCode & 0x3ff) << 10) | (_value.charCodeAt(i) & 0x3ff));\n                utf8Bytes.push(0xf0 | (charCode >> 18), 0x80 | ((charCode >> 12) & 0x3f), 0x80 | ((charCode >> 6) & 0x3f), 0x80 | (charCode & 0x3f));\n            }\n        }\n        // 4 bytes for length + string bytes\n        this.encoded.store_value(utf8Bytes.length, 'u32');\n        this.encoded.store_bytes(new Uint8Array(utf8Bytes));\n    };\n    BorshSerializer.prototype.encode_boolean = function (value) {\n        this.checkTypes && utils.expect_type(value, 'boolean', this.fieldPath);\n        this.encoded.store_value(value ? 1 : 0, 'u8');\n    };\n    BorshSerializer.prototype.encode_option = function (value, schema) {\n        if (value === null || value === undefined) {\n            this.encoded.store_value(0, 'u8');\n        }\n        else {\n            this.encoded.store_value(1, 'u8');\n            this.encode_value(value, schema.option);\n        }\n    };\n    BorshSerializer.prototype.encode_enum = function (value, schema) {\n        this.checkTypes && utils.expect_enum(value, this.fieldPath);\n        var valueKey = Object.keys(value)[0];\n        for (var i = 0; i < schema[\"enum\"].length; i++) {\n            var valueSchema = schema[\"enum\"][i];\n            if (valueKey === Object.keys(valueSchema.struct)[0]) {\n                this.encoded.store_value(i, 'u8');\n                return this.encode_struct(value, valueSchema);\n            }\n        }\n        throw new Error(\"Enum key (\".concat(valueKey, \") not found in enum schema: \").concat(JSON.stringify(schema), \" at \").concat(this.fieldPath.join('.')));\n    };\n    BorshSerializer.prototype.encode_array = function (value, schema) {\n        if (utils.isArrayLike(value))\n            return this.encode_arraylike(value, schema);\n        if (value instanceof ArrayBuffer)\n            return this.encode_buffer(value, schema);\n        throw new Error(\"Expected Array-like not \".concat(typeof (value), \"(\").concat(value, \") at \").concat(this.fieldPath.join('.')));\n    };\n    BorshSerializer.prototype.encode_arraylike = function (value, schema) {\n        if (schema.array.len) {\n            utils.expect_same_size(value.length, schema.array.len, this.fieldPath);\n        }\n        if (schema.array.showLen) {\n            this.encoded.store_value(value.length, 'u32');\n        }\n        // else {\n        //     // 4 bytes for length\n        //     this.encoded.store_value(value.length, 'u32');\n        // }\n        // array values\n        for (var i = 0; i < value.length; i++) {\n            this.encode_value(value[i], schema.array.type);\n        }\n    };\n    BorshSerializer.prototype.encode_buffer = function (value, schema) {\n        if (schema.array.len) {\n            utils.expect_same_size(value.byteLength, schema.array.len, this.fieldPath);\n        }\n        else {\n            // 4 bytes for length\n            this.encoded.store_value(value.byteLength, 'u32');\n        }\n        // array values\n        this.encoded.store_bytes(new Uint8Array(value));\n    };\n    BorshSerializer.prototype.encode_set = function (value, schema) {\n        this.checkTypes && utils.expect_type(value, 'object', this.fieldPath);\n        var isSet = value instanceof Set;\n        var values = isSet ? Array.from(value.values()) : Object.values(value);\n        // 4 bytes for length\n        this.encoded.store_value(values.length, 'u32');\n        // set values\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var value_1 = values_1[_i];\n            this.encode_value(value_1, schema.set);\n        }\n    };\n    BorshSerializer.prototype.encode_map = function (value, schema) {\n        this.checkTypes && utils.expect_type(value, 'object', this.fieldPath);\n        var isMap = value instanceof Map;\n        var keys = isMap ? Array.from(value.keys()) : Object.keys(value);\n        // 4 bytes for length\n        this.encoded.store_value(keys.length, 'u32');\n        // store key/values\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            this.encode_value(key, schema.map.key);\n            this.encode_value(isMap ? value.get(key) : value[key], schema.map.value);\n        }\n    };\n    BorshSerializer.prototype.encode_struct = function (value, schema) {\n        this.checkTypes && utils.expect_type(value, 'object', this.fieldPath);\n        for (var _i = 0, _a = Object.keys(schema.struct); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.fieldPath.push(key);\n            this.encode_value(value[key], schema.struct[key]);\n            this.fieldPath.pop();\n        }\n    };\n    return BorshSerializer;\n}());\nexports.BorshSerializer = BorshSerializer;\n", "\"use strict\";\nexports.__esModule = true;\nexports.BorshDeserializer = void 0;\nvar types_js_1 = require(\"./types.js\");\nvar buffer_js_1 = require(\"./buffer.js\");\nvar BorshDeserializer = /** @class */ (function () {\n    function BorshDeserializer(bufferArray) {\n        this.buffer = new buffer_js_1.DecodeBuffer(bufferArray);\n    }\n    BorshDeserializer.prototype.decode = function (schema) {\n        return this.decode_value(schema);\n    };\n    BorshDeserializer.prototype.decode_value = function (schema) {\n        if (typeof schema === 'string') {\n            if (types_js_1.integers.includes(schema))\n                return this.decode_integer(schema);\n            if (schema === 'string')\n                return this.decode_string();\n            if (schema === 'bool')\n                return this.decode_boolean();\n        }\n        if (typeof schema === 'object') {\n            if ('option' in schema)\n                return this.decode_option(schema);\n            if ('enum' in schema)\n                return this.decode_enum(schema);\n            if ('array' in schema)\n                return this.decode_array(schema);\n            if ('set' in schema)\n                return this.decode_set(schema);\n            if ('map' in schema)\n                return this.decode_map(schema);\n            if ('struct' in schema)\n                return this.decode_struct(schema);\n        }\n        throw new Error(\"Unsupported type: \".concat(schema));\n    };\n    BorshDeserializer.prototype.decode_integer = function (schema) {\n        var size = parseInt(schema.substring(1));\n        if (size <= 32 || schema == 'f64') {\n            return this.buffer.consume_value(schema);\n        }\n        return this.decode_bigint(size, schema.startsWith('i'));\n    };\n    BorshDeserializer.prototype.decode_bigint = function (size, signed) {\n        if (signed === void 0) { signed = false; }\n        var buffer_len = size / 8;\n        var buffer = new Uint8Array(this.buffer.consume_bytes(buffer_len));\n        var bits = buffer.reduceRight(function (r, x) { return r + x.toString(16).padStart(2, '0'); }, '');\n        if (signed && buffer[buffer_len - 1]) {\n            return BigInt.asIntN(size, BigInt(\"0x\".concat(bits)));\n        }\n        return BigInt(\"0x\".concat(bits));\n    };\n    BorshDeserializer.prototype.decode_string = function () {\n        var len = this.decode_integer('u32');\n        var buffer = new Uint8Array(this.buffer.consume_bytes(len));\n        // decode utf-8 string without using TextDecoder\n        // first get all bytes to single byte code points\n        var codePoints = [];\n        for (var i = 0; i < len; ++i) {\n            var byte = buffer[i];\n            if (byte < 0x80) {\n                codePoints.push(byte);\n            }\n            else if (byte < 0xE0) {\n                codePoints.push(((byte & 0x1F) << 6) | (buffer[++i] & 0x3F));\n            }\n            else if (byte < 0xF0) {\n                codePoints.push(((byte & 0x0F) << 12) | ((buffer[++i] & 0x3F) << 6) | (buffer[++i] & 0x3F));\n            }\n            else {\n                var codePoint = ((byte & 0x07) << 18) | ((buffer[++i] & 0x3F) << 12) | ((buffer[++i] & 0x3F) << 6) | (buffer[++i] & 0x3F);\n                codePoints.push(codePoint);\n            }\n        }\n        // then decode code points to utf-8\n        return String.fromCodePoint.apply(String, codePoints);\n    };\n    BorshDeserializer.prototype.decode_boolean = function () {\n        return this.buffer.consume_value('u8') > 0;\n    };\n    BorshDeserializer.prototype.decode_option = function (schema) {\n        var option = this.buffer.consume_value('u8');\n        if (option === 1) {\n            return this.decode_value(schema.option);\n        }\n        if (option !== 0) {\n            throw new Error(\"Invalid option \".concat(option));\n        }\n        return null;\n    };\n    BorshDeserializer.prototype.decode_enum = function (schema) {\n        var _a;\n        var valueIndex = this.buffer.consume_value('u8');\n        if (valueIndex > schema[\"enum\"].length) {\n            throw new Error(\"Enum option \".concat(valueIndex, \" is not available\"));\n        }\n        var struct = schema[\"enum\"][valueIndex].struct;\n        var key = Object.keys(struct)[0];\n        return _a = {}, _a[key] = this.decode_value(struct[key]), _a;\n    };\n    BorshDeserializer.prototype.decode_array = function (schema) {\n        var result = [];\n        var len = schema.array.len ? schema.array.len : this.decode_integer('u32');\n        for (var i = 0; i < len; ++i) {\n            result.push(this.decode_value(schema.array.type));\n        }\n        return result;\n    };\n    BorshDeserializer.prototype.decode_set = function (schema) {\n        var len = this.decode_integer('u32');\n        var result = new Set();\n        for (var i = 0; i < len; ++i) {\n            result.add(this.decode_value(schema.set));\n        }\n        return result;\n    };\n    BorshDeserializer.prototype.decode_map = function (schema) {\n        var len = this.decode_integer('u32');\n        var result = new Map();\n        for (var i = 0; i < len; ++i) {\n            var key = this.decode_value(schema.map.key);\n            var value = this.decode_value(schema.map.value);\n            result.set(key, value);\n        }\n        return result;\n    };\n    BorshDeserializer.prototype.decode_struct = function (schema) {\n        var result = {};\n        for (var key in schema.struct) {\n            result[key] = this.decode_value(schema.struct[key]);\n        }\n        return result;\n    };\n    return BorshDeserializer;\n}());\nexports.BorshDeserializer = BorshDeserializer;\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nexports.__esModule = true;\nexports.deserialize = exports.serialize = void 0;\nvar serialize_js_1 = require(\"./serialize.js\");\nvar deserialize_js_1 = require(\"./deserialize.js\");\nvar utils = __importStar(require(\"./utils.js\"));\nfunction serialize(schema, value, validate) {\n    if (validate === void 0) { validate = true; }\n    if (validate)\n        utils.validate_schema(schema);\n    var serializer = new serialize_js_1.BorshSerializer(validate);\n    return serializer.encode(value, schema);\n}\nexports.serialize = serialize;\nfunction deserialize(schema, buffer, validate) {\n    if (validate === void 0) { validate = true; }\n    if (validate)\n        utils.validate_schema(schema);\n    var deserializer = new deserialize_js_1.BorshDeserializer(buffer);\n    return deserializer.decode(schema);\n}\nexports.deserialize = deserialize;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.schema = void 0;\nexports.schema = {\n    struct: {\n        transfer: {\n            option: {\n                struct: {\n                    transfers: {\n                        array: {\n                            type: {\n                                struct: {\n                                    asset: { array: { type: { array: { type: 'u8' } }, len: 2 } },\n                                    output: { array: { type: 'u8' } },\n                                    amount: { array: { type: 'u8' } }, // VARUINT\n                                }\n                            },\n                            showLen: true\n                        }\n                    }\n                }\n            }\n        },\n        contract_creation: {\n            option: {\n                struct: {\n                    contract_type: {\n                        enum: [\n                            {\n                                struct: {\n                                    moa: {\n                                        struct: {\n                                            ticker: {\n                                                option: {\n                                                    struct: {\n                                                        number: { array: { type: 'u8' } },\n                                                        spacers: { option: { array: { type: 'u8' } } }\n                                                    }\n                                                }\n                                            },\n                                            supply_cap: { option: { array: { type: 'u8' } } },\n                                            divisibility: 'u8',\n                                            live_time: { array: { type: 'u8' } },\n                                            end_time: { option: { array: { type: 'u8' } } },\n                                            mint_mechanism: {\n                                                struct: {\n                                                    preallocated: {\n                                                        option: {\n                                                            struct: {\n                                                                allocations: {\n                                                                    map: {\n                                                                        key: { array: { type: 'u8' } },\n                                                                        value: {\n                                                                            enum: [\n                                                                                {\n                                                                                    struct: { vec_pubkey: { array: { type: { array: { type: 'u8', showLen: true } }, showLen: true } } },\n                                                                                },\n                                                                                {\n                                                                                    struct: {\n                                                                                        bloom_filter: {\n                                                                                            struct: {\n                                                                                                filter: { array: { type: 'u8' } },\n                                                                                                arg: {\n                                                                                                    enum: [{ struct: { tx_id: { struct: {} } } }]\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            ]\n                                                                        }\n                                                                    }\n                                                                },\n                                                                vesting_plan: {\n                                                                    option: {\n                                                                        enum: [\n                                                                            { struct: { timelock: { array: { type: 'u8' } } } },\n                                                                            {\n                                                                                struct: {\n                                                                                    scheduled: {\n                                                                                        array: {\n                                                                                            type: {\n                                                                                                struct: {\n                                                                                                    ratio: { array: { type: { array: { type: 'u8' } }, len: 2 } },\n                                                                                                    tolerance: 'i64'\n                                                                                                }\n                                                                                            },\n                                                                                            showLen: true\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        ]\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    },\n                                                    free_mint: {\n                                                        option: {\n                                                            struct: {\n                                                                supply_cap: { option: { array: { type: 'u8' } } },\n                                                                amount_per_mint: { array: { type: 'u8' } }, // VARUINT\n                                                            }\n                                                        }\n                                                    },\n                                                    purchase: {\n                                                        option: {\n                                                            struct: {\n                                                                input_asset: {\n                                                                    enum: [\n                                                                        { struct: { raw_btc: { struct: {} } } },\n                                                                        { struct: { glittr_asset: { array: { type: { array: { type: 'u8' } }, len: 2 } } } },\n                                                                        { struct: { rune: { struct: {} } } },\n                                                                        { struct: { ordinal: { struct: {} } } }\n                                                                    ]\n                                                                },\n                                                                pay_to_key: { option: { array: { type: 'u8' } } },\n                                                                ratio: {\n                                                                    enum: [\n                                                                        {\n                                                                            struct: {\n                                                                                fixed: {\n                                                                                    struct: {\n                                                                                        ratio: { array: { type: { array: { type: 'u8' } }, len: 2 } } // VARUINT Fraction\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        },\n                                                                        {\n                                                                            struct: {\n                                                                                oracle: {\n                                                                                    struct: {\n                                                                                        setting: {\n                                                                                            struct: {\n                                                                                                pubkey: { array: { type: 'u8' } },\n                                                                                                asset_id: { option: 'string' },\n                                                                                                block_height_slippage: 'u8'\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    ]\n                                                                }\n                                                            }\n                                                        }\n                                                    },\n                                                }\n                                            },\n                                            commitment: {\n                                                option: {\n                                                    struct: {\n                                                        public_key: { array: { type: 'u8' } },\n                                                        args: {\n                                                            struct: {\n                                                                fixed_string: {\n                                                                    option: {\n                                                                        struct: {\n                                                                            number: { array: { type: 'u8' } },\n                                                                            spacers: { option: { array: { type: 'u8' } } }\n                                                                        }\n                                                                    }\n                                                                },\n                                                                string: 'string'\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            },\n                            {\n                                struct: {\n                                    mba: {\n                                        struct: {\n                                            ticker: {\n                                                option: {\n                                                    struct: {\n                                                        number: { array: { type: 'u8' } },\n                                                        spacers: { option: { array: { type: 'u8' } } }\n                                                    }\n                                                }\n                                            },\n                                            supply_cap: { option: { array: { type: 'u8' } } },\n                                            divisibility: 'u8',\n                                            live_time: { array: { type: 'u8' } },\n                                            end_time: { option: { array: { type: 'u8' } } },\n                                            mint_mechanism: {\n                                                struct: {\n                                                    preallocated: {\n                                                        option: {\n                                                            struct: {\n                                                                allocations: {\n                                                                    map: {\n                                                                        key: { array: { type: 'u8' } },\n                                                                        value: {\n                                                                            enum: [\n                                                                                {\n                                                                                    struct: { vec_pubkey: { array: { type: { array: { type: 'u8', showLen: true } }, showLen: true } } },\n                                                                                },\n                                                                                {\n                                                                                    struct: {\n                                                                                        bloom_filter: {\n                                                                                            struct: {\n                                                                                                filter: { array: { type: 'u8' } },\n                                                                                                arg: {\n                                                                                                    enum: [{ struct: { tx_id: { struct: {} } } }]\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            ]\n                                                                        }\n                                                                    }\n                                                                },\n                                                                vesting_plan: {\n                                                                    option: {\n                                                                        enum: [\n                                                                            { struct: { timelock: { array: { type: 'u8' } } } },\n                                                                            {\n                                                                                struct: {\n                                                                                    scheduled: {\n                                                                                        array: {\n                                                                                            type: {\n                                                                                                struct: {\n                                                                                                    ratio: { array: { type: { array: { type: 'u8' } }, len: 2 } },\n                                                                                                    tolerance: 'i64'\n                                                                                                }\n                                                                                            },\n                                                                                            showLen: true\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        ]\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    },\n                                                    free_mint: {\n                                                        option: {\n                                                            struct: {\n                                                                supply_cap: { option: { array: { type: 'u8' } } },\n                                                                amount_per_mint: { array: { type: 'u8' } }, // VARUINT\n                                                            }\n                                                        }\n                                                    },\n                                                    purchase: {\n                                                        option: {\n                                                            struct: {\n                                                                input_asset: {\n                                                                    enum: [\n                                                                        { struct: { raw_btc: { struct: {} } } },\n                                                                        { struct: { glittr_asset: { array: { type: { array: { type: 'u8' } }, len: 2 } } } },\n                                                                        { struct: { rune: { struct: {} } } },\n                                                                        { struct: { ordinal: { struct: {} } } }\n                                                                    ]\n                                                                },\n                                                                pay_to_key: { option: { array: { type: 'u8' } } },\n                                                                ratio: {\n                                                                    enum: [\n                                                                        {\n                                                                            struct: {\n                                                                                fixed: {\n                                                                                    struct: {\n                                                                                        ratio: { array: { type: { array: { type: 'u8' } }, len: 2 } } // VARUINT Fraction\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        },\n                                                                        {\n                                                                            struct: {\n                                                                                oracle: {\n                                                                                    struct: {\n                                                                                        setting: {\n                                                                                            struct: {\n                                                                                                pubkey: { array: { type: 'u8' } },\n                                                                                                asset_id: { option: 'string' },\n                                                                                                block_height_slippage: 'u8'\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    ]\n                                                                }\n                                                            }\n                                                        }\n                                                    },\n                                                    collateralized: {\n                                                        option: {\n                                                            struct: {\n                                                                input_asset: {\n                                                                    enum: [\n                                                                        { struct: { raw_btc: { struct: {} } } },\n                                                                        { struct: { glittr_asset: { array: { type: { array: { type: 'u8' } }, len: 2 } } } },\n                                                                        { struct: { rune: { struct: {} } } },\n                                                                        { struct: { ordinal: { struct: {} } } }\n                                                                    ]\n                                                                },\n                                                                _mutable_assets: 'bool',\n                                                                mint_structure: {\n                                                                    enum: [\n                                                                        {\n                                                                            struct: {\n                                                                                ratio: {\n                                                                                    enum: [\n                                                                                        {\n                                                                                            struct: {\n                                                                                                fixed: {\n                                                                                                    struct: {\n                                                                                                        ratio: { array: { type: { array: { type: 'u8' } }, len: 2 } } // VARUINT Fraction\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        },\n                                                                                        {\n                                                                                            struct: {\n                                                                                                oracle: {\n                                                                                                    struct: {\n                                                                                                        setting: {\n                                                                                                            struct: {\n                                                                                                                pubkey: { array: { type: 'u8' } },\n                                                                                                                asset_id: { option: 'string' },\n                                                                                                                block_height_slippage: 'u8'\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    ]\n                                                                                }\n                                                                            }\n                                                                        },\n                                                                        {\n                                                                            struct: {\n                                                                                proportional: {\n                                                                                    struct: {\n                                                                                        ratio_model: { enum: [{ struct: { constant_product: { struct: {} } } }] },\n                                                                                        inital_mint_pointer_to_key: { option: { array: { type: 'u8' } } }, //VARUINT\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        },\n                                                                        {\n                                                                            struct: {\n                                                                                account: {\n                                                                                    struct: {\n                                                                                        max_ltv: { array: { type: { array: { type: 'u8' } }, len: 2 } },\n                                                                                        ratio: {\n                                                                                            enum: [\n                                                                                                {\n                                                                                                    struct: {\n                                                                                                        fixed: {\n                                                                                                            struct: {\n                                                                                                                ratio: { array: { type: { array: { type: 'u8' } }, len: 2 } } // VARUINT Fraction\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                },\n                                                                                                {\n                                                                                                    struct: {\n                                                                                                        oracle: {\n                                                                                                            struct: {\n                                                                                                                setting: {\n                                                                                                                    struct: {\n                                                                                                                        pubkey: { array: { type: 'u8' } },\n                                                                                                                        asset_id: { option: 'string' },\n                                                                                                                        block_height_slippage: 'u8'\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            ]\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    ]\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            },\n                                            burn_mechanism: {\n                                                struct: {\n                                                    return_collateral: {\n                                                        option: {\n                                                            struct: {\n                                                                fee: { option: { array: { type: { array: { type: 'u8' } }, len: 2 } } },\n                                                                oracle_setting: {\n                                                                    option: {\n                                                                        struct: {\n                                                                            pubkey: { array: { type: 'u8' } },\n                                                                            asset_id: { option: 'string' },\n                                                                            block_height_slippage: 'u8'\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            },\n                                            swap_mechanism: {\n                                                struct: {\n                                                    fee: { option: { array: { type: 'u8' } } }, // VARUINT\n                                                }\n                                            },\n                                            commitment: {\n                                                option: {\n                                                    struct: {\n                                                        public_key: { array: { type: 'u8' } },\n                                                        args: {\n                                                            struct: {\n                                                                fixed_string: {\n                                                                    option: {\n                                                                        struct: {\n                                                                            number: { array: { type: 'u8' } },\n                                                                            spacers: { option: { array: { type: 'u8' } } }\n                                                                        }\n                                                                    }\n                                                                },\n                                                                string: 'string'\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            },\n                            {\n                                struct: {\n                                    spec: {\n                                        struct: {\n                                            spec: {\n                                                enum: [\n                                                    {\n                                                        struct: {\n                                                            mint_only_asset: {\n                                                                struct: {\n                                                                    input_asset: {\n                                                                        option: {\n                                                                            enum: [\n                                                                                { struct: { raw_btc: { struct: {} } } },\n                                                                                { struct: { glittr_asset: { array: { type: { array: { type: 'u8' } }, len: 2 } } } },\n                                                                                { struct: { rune: { struct: {} } } },\n                                                                                { struct: { ordinal: { struct: {} } } }\n                                                                            ]\n                                                                        },\n                                                                    },\n                                                                    peg_in_type: {\n                                                                        option: {\n                                                                            enum: [\n                                                                                { struct: { pubkey: { array: { type: 'u8' } } } },\n                                                                                { struct: { burn: { struct: {} } } }\n                                                                            ]\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    },\n                                                    {\n                                                        struct: {\n                                                            mint_burn_asset: {\n                                                                struct: {\n                                                                    collateralized: {\n                                                                        option: {\n                                                                            struct: {\n                                                                                _mutable_assets: 'bool',\n                                                                                input_asset: {\n                                                                                    option: {\n                                                                                        array: {\n                                                                                            type: {\n                                                                                                enum: [\n                                                                                                    { struct: { raw_btc: { struct: {} } } },\n                                                                                                    { struct: { glittr_asset: { array: { type: { array: { type: 'u8' } }, len: 2 } } } },\n                                                                                                    { struct: { rune: { struct: {} } } },\n                                                                                                    { struct: { ordinal: { struct: {} } } }\n                                                                                                ]\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                },\n                                                                                mint_structure: {\n                                                                                    option: {\n                                                                                        enum: [\n                                                                                            {\n                                                                                                struct: {\n                                                                                                    ratio: {\n                                                                                                        enum: [\n                                                                                                            {\n                                                                                                                struct: {\n                                                                                                                    fixed: {\n                                                                                                                        struct: {\n                                                                                                                            ratio: { array: { type: { array: { type: 'u8' } }, len: 2 } } // VARUINT Fraction\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            },\n                                                                                                            {\n                                                                                                                struct: {\n                                                                                                                    oracle: {\n                                                                                                                        struct: {\n                                                                                                                            setting: {\n                                                                                                                                struct: {\n                                                                                                                                    pubkey: { array: { type: 'u8' } },\n                                                                                                                                    asset_id: { option: 'string' },\n                                                                                                                                    block_height_slippage: 'u8'\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                }\n                                                                                                            }\n                                                                                                        ]\n                                                                                                    }\n                                                                                                }\n                                                                                            },\n                                                                                            {\n                                                                                                struct: {\n                                                                                                    proportional: {\n                                                                                                        struct: {\n                                                                                                            ratio_model: { enum: [{ struct: { constant_product: { struct: {} } } }] },\n                                                                                                            inital_mint_pointer_to_key: { option: { array: { type: 'u8' } } }, //VARUINT\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            },\n                                                                                            {\n                                                                                                struct: {\n                                                                                                    account: {\n                                                                                                        struct: {\n                                                                                                            max_ltv: { array: { type: { array: { type: 'u8' } }, len: 2 } },\n                                                                                                            ratio: {\n                                                                                                                enum: [\n                                                                                                                    {\n                                                                                                                        struct: {\n                                                                                                                            fixed: {\n                                                                                                                                struct: {\n                                                                                                                                    ratio: { array: { type: { array: { type: 'u8' } }, len: 2 } } // VARUINT Fraction\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    },\n                                                                                                                    {\n                                                                                                                        struct: {\n                                                                                                                            oracle: {\n                                                                                                                                struct: {\n                                                                                                                                    setting: {\n                                                                                                                                        struct: {\n                                                                                                                                            pubkey: { array: { type: 'u8' } },\n                                                                                                                                            asset_id: { option: 'string' },\n                                                                                                                                            block_height_slippage: 'u8'\n                                                                                                                                        }\n                                                                                                                                    }\n                                                                                                                                }\n                                                                                                                            }\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                ]\n                                                                                                            }\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        ]\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    },\n                                                ]\n                                            },\n                                            pointer: { option: { array: { type: 'u8' } } },\n                                            block_tx: { option: { array: { type: { array: { type: 'u8' } }, len: 2 } } } //VARUINT BlockTxTuple\n                                        }\n                                    }\n                                }\n                            },\n                            {\n                                struct: {\n                                    nft: {\n                                        struct: {\n                                            asset: { array: { type: 'u8', showLen: true } },\n                                            supply_cap: { option: { array: { type: 'u8' } } },\n                                            live_time: { array: { type: 'u8' } },\n                                            end_time: { option: { array: { type: 'u8' } } },\n                                            pointer: { option: { array: { type: 'u8' } } }, // VARUINT\n                                        }\n                                    }\n                                }\n                            }\n                        ]\n                    },\n                    spec: { option: { array: { type: { array: { type: 'u8' } }, len: 2 } } }, //VARUINT BlockTxTuple\n                }\n            }\n        },\n        contract_call: {\n            option: {\n                struct: {\n                    contract: { option: { array: { type: { array: { type: 'u8' } }, len: 2 } } },\n                    call_type: {\n                        enum: [\n                            {\n                                struct: {\n                                    mint: {\n                                        struct: {\n                                            pointer: { option: { array: { type: 'u8' } } },\n                                            oracle_message: {\n                                                option: {\n                                                    struct: {\n                                                        signature: { array: { type: 'u8' } },\n                                                        message: {\n                                                            struct: {\n                                                                input_outpoint: { option: { struct: { txid: 'string', vout: 'u32' } } },\n                                                                min_in_value: { option: { array: { type: 'u8' } } },\n                                                                out_value: { option: { array: { type: 'u8' } } },\n                                                                asset_id: { option: 'string' },\n                                                                ratio: { option: { array: { type: { array: { type: 'u8' } }, len: 2 } } },\n                                                                ltv: { option: { array: { type: { array: { type: 'u8' } }, len: 2 } } },\n                                                                outstanding: { option: { array: { type: 'u8' } } },\n                                                                block_height: { array: { type: 'u8' } } // VARUINT\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            },\n                                            pointer_to_key: { option: { array: { type: 'u8' } } },\n                                            assert_values: {\n                                                option: {\n                                                    struct: {\n                                                        input_values: { option: { array: { type: { array: { type: 'u8' } } } } },\n                                                        total_collateralized: { option: { array: { type: { array: { type: 'u8' } } } } },\n                                                        min_out_value: { option: { array: { type: 'u8' } } }\n                                                    }\n                                                }\n                                            },\n                                            commitment_message: {\n                                                option: {\n                                                    struct: {\n                                                        public_key: { array: { type: 'u8' } },\n                                                        args: { array: { type: 'u8' } }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            },\n                            {\n                                struct: {\n                                    burn: {\n                                        struct: {\n                                            pointer: { option: { array: { type: 'u8' } } },\n                                            oracle_message: {\n                                                option: {\n                                                    struct: {\n                                                        signature: { array: { type: 'u8' } },\n                                                        message: {\n                                                            struct: {\n                                                                input_outpoint: { option: { struct: { txid: 'string', vout: 'u32' } } },\n                                                                min_in_value: { option: { array: { type: 'u8' } } },\n                                                                out_value: { option: { array: { type: 'u8' } } },\n                                                                asset_id: { option: 'string' },\n                                                                ratio: { option: { array: { type: { array: { type: 'u8' } }, len: 2 } } },\n                                                                ltv: { option: { array: { type: { array: { type: 'u8' } }, len: 2 } } },\n                                                                outstanding: { option: { array: { type: 'u8' } } },\n                                                                block_height: { array: { type: 'u8' } } // VARUINT\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            },\n                                            pointer_to_key: { option: { array: { type: 'u8' } } },\n                                            assert_values: {\n                                                option: {\n                                                    struct: {\n                                                        input_values: { option: { array: { type: { array: { type: 'u8' } } } } },\n                                                        total_collateralized: { option: { array: { type: { array: { type: 'u8' } } } } },\n                                                        min_out_value: { option: { array: { type: 'u8' } } }\n                                                    }\n                                                }\n                                            },\n                                            commitment_message: {\n                                                option: {\n                                                    struct: {\n                                                        public_key: { array: { type: 'u8' } },\n                                                        args: { array: { type: 'u8' } }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            },\n                            {\n                                struct: {\n                                    swap: {\n                                        struct: {\n                                            pointer: { array: { type: 'u8' } },\n                                            assert_values: {\n                                                option: {\n                                                    struct: {\n                                                        input_values: { option: { array: { type: { array: { type: 'u8' } } } } },\n                                                        total_collateralized: { option: { array: { type: { array: { type: 'u8' } } } } },\n                                                        min_out_value: { option: { array: { type: 'u8' } } }\n                                                    }\n                                                }\n                                            },\n                                        }\n                                    }\n                                }\n                            },\n                            {\n                                struct: {\n                                    open_account: {\n                                        struct: {\n                                            pointer_to_key: { array: { type: 'u8' } },\n                                            share_amount: { array: { type: 'u8' } }\n                                        }\n                                    }\n                                }\n                            },\n                            {\n                                struct: {\n                                    close_account: {\n                                        struct: {\n                                            pointer: { array: { type: 'u8' } }\n                                        }\n                                    }\n                                }\n                            },\n                            {\n                                struct: {\n                                    update_nft: {\n                                        struct: {\n                                            whitelist_address_bloom_filter: { option: { array: { type: 'u8', showLen: true } } },\n                                            trusted_marketplace_fee_addresses: { option: { array: { type: 'string' } } },\n                                            access_key_pointer: { option: { array: { type: 'u8' } } } // VARUINT\n                                        }\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n    }\n};\n", "var f=(()=>{for(var A=new Uint8Array(128),j=0;j<64;j++)A[j<26?j+65:j<52?j+71:j<62?j-4:j*4-205]=j;return t=>{for(var o=t.length,r=new Uint8Array((o-(t[o-1]==\"=\")-(t[o-2]==\"=\"))*3/4|0),a=0,i=0;a<o;){var s=A[t.charCodeAt(a++)],c=A[t.charCodeAt(a++)],y=A[t.charCodeAt(a++)],K=A[t.charCodeAt(a++)];r[i++]=s<<2|c>>4,r[i++]=c<<4|y>>2,r[i++]=y<<6|K}return r}})();var g=f(\"\");var w=A=>WebAssembly.instantiate(g,A).then(j=>j.instance.exports);var tA=async(A,j={quality:11})=>(await x(),U(A,j)),eA=async A=>(await x(),Y(A)),e,x=async()=>(e||(e=await w({\"./brotli_wasm_bg.js\":{__wbindgen_string_new:D,__wbg_stack_0ddaca5d1abfb52f:L,__wbg_new_693216e109162396:Z,__wbg_error_09919627ac0992f5:S,__wbindgen_object_drop_ref:N,__wbindgen_rethrow:V,__wbindgen_is_undefined:P,__wbindgen_is_object:H,__wbindgen_json_serialize:R,__wbindgen_throw:C}})),e),n=new Array(32).fill(void 0);n.push(void 0,null,!0,!1);function p(A){return n[A]}var F=TextDecoder,b=new F(\"utf-8\",{ignoreBOM:!0,fatal:!0});b.decode();var h=null;function d(){return(h===null||h.buffer!==e.memory.buffer)&&(h=new Uint8Array(e.memory.buffer)),h}function q(A,j){return b.decode(d().subarray(A,A+j))}var k=n.length;function O(A){k===n.length&&n.push(n.length+1);let j=k;return k=n[j],n[j]=A,j}var u=0,_=TextEncoder,v=new _,M=typeof v.encodeInto==\"function\"?function(A,j){return v.encodeInto(A,j)}:function(A,j){let t=v.encode(A);return j.set(t),{read:A.length,written:t.length}};function $(A,j,t){if(t===void 0){let s=v.encode(A),c=j(s.length);return d().subarray(c,c+s.length).set(s),u=s.length,c}let o=A.length,r=j(o),a=d(),i=0;for(;i<o;i++){let s=A.charCodeAt(i);if(s>127)break;a[r+i]=s}if(i!==o){i!==0&&(A=A.slice(i)),r=t(r,o,o=i+A.length*3);let s=d().subarray(r+i,r+o);i+=M(A,s).written??0}return u=i,r}var m=null;function l(){return(m===null||m.buffer!==e.memory.buffer)&&(m=new Int32Array(e.memory.buffer)),m}function X(A){A<36||(n[A]=k,k=A)}function I(A){let j=p(A);return X(A),j}function E(A,j){let t=j(A.length*1);return d().set(A,t/1),u=A.length,t}var B=32;function T(A){if(B==1)throw new Error(\"out of js stack\");return n[--B]=A,B}function z(A,j){return d().subarray(A/1,A/1+j)}function U(A,j){try{let s=e.__wbindgen_add_to_stack_pointer(-16);var t=E(A,e.__wbindgen_malloc),o=u;e.compress(s,t,o,T(j));var r=l()[s/4+0],a=l()[s/4+1],i=z(r,a).slice();return e.__wbindgen_free(r,a*1),i}finally{e.__wbindgen_add_to_stack_pointer(16),n[B++]=void 0}}function Y(A){try{let i=e.__wbindgen_add_to_stack_pointer(-16);var j=E(A,e.__wbindgen_malloc),t=u;e.decompress(i,j,t);var o=l()[i/4+0],r=l()[i/4+1],a=z(o,r).slice();return e.__wbindgen_free(o,r*1),a}finally{e.__wbindgen_add_to_stack_pointer(16)}}function P(A){var j=p(A)===void 0;return j}function H(A){let j=p(A);var t=typeof j==\"object\"&&j!==null;return t}function D(A,j){var t=q(A,j);return O(t)}function R(A,j){let t=p(j);var o=JSON.stringify(t===void 0?null:t),r=$(o,e.__wbindgen_malloc,e.__wbindgen_realloc),a=u;l()[A/4+1]=a,l()[A/4+0]=r}function Z(){var A=new Error;return O(A)}function C(A,j){throw new Error(q(A,j))}function L(A,j){var t=p(j).stack,o=$(t,e.__wbindgen_malloc,e.__wbindgen_realloc),r=u;l()[A/4+1]=r,l()[A/4+0]=o}function S(A,j){try{console.error(q(A,j))}finally{e.__wbindgen_free(A,j)}}function N(A){I(A)}function V(A){throw I(A)}export{tA as compress,U as compressBrotli,eA as decompress,Y as decompressBrotli};\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformOpReturnMessage = void 0;\nconst utils_1 = require(\"../utils\");\nconst varint_1 = require(\"../utils/varint\");\nfunction convertToVaruint(value) {\n    if (value instanceof Uint8Array)\n        return value;\n    return (0, utils_1.encodeVaruint)(Number(value));\n}\nfunction convertToVarint(value) {\n    if (value instanceof Uint8Array)\n        return value;\n    return (0, varint_1.encodeVarint)(value);\n}\nfunction transformBlockTxTuple(tuple) {\n    return [\n        convertToVaruint(tuple[0]),\n        convertToVaruint(tuple[1]),\n    ];\n}\nfunction transformFraction(fraction) {\n    return [\n        convertToVaruint(fraction[0]),\n        convertToVaruint(fraction[1]),\n    ];\n}\nfunction transformMOAContract(contract) {\n    if (!contract)\n        return contract;\n    return {\n        ...contract,\n        ticker: typeof contract.ticker === \"string\"\n            ? (0, utils_1.encodeBase26)(contract.ticker)\n            : contract.ticker,\n        supply_cap: contract.supply_cap && convertToVaruint(contract.supply_cap),\n        live_time: convertToVarint(contract.live_time),\n        end_time: contract.end_time && convertToVarint(contract.end_time),\n        mint_mechanism: contract.mint_mechanism && {\n            ...contract.mint_mechanism,\n            free_mint: contract.mint_mechanism.free_mint && {\n                ...contract.mint_mechanism.free_mint,\n                supply_cap: contract.mint_mechanism.free_mint.supply_cap &&\n                    convertToVaruint(contract.mint_mechanism.free_mint.supply_cap),\n                amount_per_mint: convertToVaruint(contract.mint_mechanism.free_mint.amount_per_mint),\n            },\n        },\n    };\n}\nfunction transformMBAContract(contract) {\n    if (!contract)\n        return contract;\n    return {\n        ...contract,\n        ticker: typeof contract.ticker === \"string\"\n            ? (0, utils_1.encodeBase26)(contract.ticker)\n            : contract.ticker,\n        supply_cap: contract.supply_cap && convertToVaruint(contract.supply_cap),\n        live_time: convertToVarint(contract.live_time),\n        end_time: contract.end_time && convertToVarint(contract.end_time),\n        swap_mechanism: contract.swap_mechanism && {\n            ...contract.swap_mechanism,\n            fee: contract.swap_mechanism.fee &&\n                convertToVaruint(contract.swap_mechanism.fee),\n        },\n        burn_mechanism: contract.burn_mechanism && {\n            ...contract.burn_mechanism,\n            return_collateral: contract.burn_mechanism.return_collateral && {\n                ...contract.burn_mechanism.return_collateral,\n                fee: contract.burn_mechanism.return_collateral.fee &&\n                    transformFraction(contract.burn_mechanism.return_collateral.fee),\n            },\n        },\n    };\n}\nfunction transformNFTContract(contract) {\n    if (!contract)\n        return contract;\n    return {\n        ...contract,\n        supply_cap: contract.supply_cap && convertToVaruint(contract.supply_cap),\n        live_time: convertToVarint(contract.live_time),\n        end_time: contract.end_time && convertToVarint(contract.end_time),\n        pointer: contract.pointer && convertToVaruint(contract.pointer),\n    };\n}\nfunction transformSpecContract(contract) {\n    if (!contract)\n        return contract;\n    return {\n        ...contract,\n        pointer: contract.pointer && convertToVaruint(contract.pointer),\n        block_tx: contract.block_tx && transformBlockTxTuple(contract.block_tx),\n    };\n}\nfunction transformContractType(contractType) {\n    if (!contractType)\n        return contractType;\n    if (\"moa\" in contractType) {\n        return {\n            moa: transformMOAContract(contractType.moa),\n        };\n    }\n    else if (\"mba\" in contractType) {\n        return {\n            mba: transformMBAContract(contractType.mba),\n        };\n    }\n    else if (\"spec\" in contractType) {\n        return {\n            spec: transformSpecContract(contractType.spec),\n        };\n    }\n    else {\n        return {\n            nft: transformNFTContract(contractType.nft),\n        };\n    }\n}\nfunction transformOpReturnMessage(message) {\n    const transformed = { ...message };\n    if (transformed.transfer?.transfers) {\n        transformed.transfer.transfers = transformed.transfer.transfers.map((item) => ({\n            asset: transformBlockTxTuple(item.asset),\n            output: convertToVaruint(item.output),\n            amount: convertToVaruint(item.amount),\n        }));\n    }\n    if (transformed.contract_creation) {\n        transformed.contract_creation = {\n            contract_type: transformContractType(transformed.contract_creation.contract_type),\n            spec: transformed.contract_creation.spec &&\n                transformBlockTxTuple(transformed.contract_creation.spec),\n        };\n    }\n    if (transformed.contract_call) {\n        transformed.contract_call = {\n            contract: transformed.contract_call.contract &&\n                transformBlockTxTuple(transformed.contract_call.contract),\n            call_type: transformed.contract_call.call_type && {\n                ...transformed.contract_call.call_type,\n                ...(\"mint\" in transformed.contract_call.call_type\n                    ? {\n                        mint: {\n                            ...transformed.contract_call.call_type.mint,\n                            pointer: transformed.contract_call.call_type.mint.pointer &&\n                                convertToVaruint(transformed.contract_call.call_type.mint.pointer),\n                            pointer_to_key: transformed.contract_call.call_type.mint.pointer_to_key &&\n                                convertToVaruint(transformed.contract_call.call_type.mint.pointer_to_key),\n                            assert_values: transformed.contract_call.call_type.mint\n                                .assert_values && {\n                                ...transformed.contract_call.call_type.mint.assert_values,\n                                input_values: transformed.contract_call.call_type.mint.assert_values.input_values?.map(convertToVaruint),\n                                total_collateralized: transformed.contract_call.call_type.mint.assert_values.total_collateralized?.map(convertToVaruint),\n                                min_out_value: transformed.contract_call.call_type.mint.assert_values.min_out_value?.map(convertToVaruint),\n                            },\n                        },\n                    }\n                    : {}),\n                ...(\"burn\" in transformed.contract_call.call_type\n                    ? {\n                        burn: {\n                            ...transformed.contract_call.call_type.burn,\n                            pointer: transformed.contract_call.call_type.burn.pointer &&\n                                convertToVaruint(transformed.contract_call.call_type.burn.pointer),\n                            pointer_to_key: transformed.contract_call.call_type.burn.pointer_to_key &&\n                                convertToVaruint(transformed.contract_call.call_type.burn.pointer_to_key),\n                            assert_values: transformed.contract_call.call_type.burn\n                                .assert_values && {\n                                ...transformed.contract_call.call_type.burn.assert_values,\n                                input_values: transformed.contract_call.call_type.burn.assert_values.input_values?.map(convertToVaruint),\n                                total_collateralized: transformed.contract_call.call_type.burn.assert_values.total_collateralized?.map(convertToVaruint),\n                                min_out_value: transformed.contract_call.call_type.burn.assert_values.min_out_value?.map(convertToVaruint),\n                            },\n                        },\n                    }\n                    : {}),\n                ...(\"swap\" in transformed.contract_call.call_type\n                    ? {\n                        swap: {\n                            ...transformed.contract_call.call_type.swap,\n                            pointer: transformed.contract_call.call_type.swap.pointer &&\n                                convertToVaruint(transformed.contract_call.call_type.swap.pointer),\n                            assert_values: transformed.contract_call.call_type.swap\n                                .assert_values && {\n                                ...transformed.contract_call.call_type.swap.assert_values,\n                                input_values: transformed.contract_call.call_type.swap.assert_values.input_values?.map(convertToVaruint),\n                                total_collateralized: transformed.contract_call.call_type.swap.assert_values.total_collateralized?.map(convertToVaruint),\n                                min_out_value: transformed.contract_call.call_type.swap.assert_values.min_out_value?.map(convertToVaruint),\n                            },\n                        },\n                    }\n                    : {}),\n                ...(\"open_account\" in transformed.contract_call.call_type\n                    ? {\n                        open_account: {\n                            ...transformed.contract_call.call_type.open_account,\n                            pointer_to_key: convertToVaruint(transformed.contract_call.call_type.open_account\n                                .pointer_to_key),\n                            share_amount: convertToVaruint(transformed.contract_call.call_type.open_account.share_amount),\n                        },\n                    }\n                    : {}),\n                ...(\"close_account\" in transformed.contract_call.call_type\n                    ? {\n                        close_account: {\n                            ...transformed.contract_call.call_type.close_account,\n                            pointer: convertToVaruint(transformed.contract_call.call_type.close_account.pointer),\n                        },\n                    }\n                    : {}),\n            },\n        };\n    }\n    return transformed;\n}\nexports.transformOpReturnMessage = transformOpReturnMessage;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GlittrTransaction = void 0;\nconst __1 = require(\"..\");\nconst asset_1 = require(\"../helper/asset\");\nconst fee_1 = require(\"../helper/fee\");\nconst electrum_1 = require(\"../utils/electrum\");\nclass ContractDeployment {\n    client;\n    account;\n    constructor({ client, account }) {\n        this.client = client;\n        this.account = account;\n    }\n    async liquidityPoolInitiate(inputAsset, inputAmount) {\n        const assetTickers = await (0, asset_1.getAssetTickers)(this.client, inputAsset);\n        const asset1Utxos = await (0, asset_1.getAssetUtxos)(this.client, this.account.p2wpkh().address, inputAsset[0]);\n        const asset2Utxos = await (0, asset_1.getAssetUtxos)(this.client, this.account.p2wpkh().address, inputAsset[1]);\n        const utxos = await (0, electrum_1.electrumFetchNonGlittrUtxos)(this.client, this.account.p2wpkh().address);\n        // Accumulate UTXOs and track excess\n        let asset1Total = BigInt(0);\n        let asset2Total = BigInt(0);\n        const asset1Required = BigInt(inputAmount[0]);\n        const asset2Required = BigInt(inputAmount[1]);\n        const usedUtxos1 = [];\n        const usedUtxos2 = [];\n        for (const utxo of asset1Utxos) {\n            if (asset1Total >= asset1Required)\n                break;\n            asset1Total += BigInt(utxo?.assetAmount);\n            usedUtxos1.push({\n                txid: utxo.txid,\n                vout: utxo.vout,\n                value: utxo.value,\n                status: utxo.status\n            });\n        }\n        for (const utxo of asset2Utxos) {\n            if (asset2Total >= asset2Required)\n                break;\n            asset2Total += BigInt(utxo?.assetAmount);\n            usedUtxos2.push({\n                txid: utxo.txid,\n                vout: utxo.vout,\n                value: utxo.value,\n                status: utxo.status\n            });\n        }\n        if (asset1Total < asset1Required || asset2Total < asset2Required) {\n            throw new Error(\"Insufficient balance for liquidity pool\");\n        }\n        const [block1, txIndex1] = inputAsset[0].split(':').map(Number);\n        const [block2, txIndex2] = inputAsset[1].split(':').map(Number);\n        const tx = {\n            contract_call: {\n                call_type: {\n                    mint: {\n                        pointer: 3\n                    }\n                }\n            },\n            contract_creation: {\n                contract_type: {\n                    mba: {\n                        divisibility: 18,\n                        live_time: 0,\n                        mint_mechanism: {\n                            collateralized: {\n                                _mutable_assets: false,\n                                input_assets: [\n                                    { glittr_asset: [block1, txIndex1] },\n                                    { glittr_asset: [block2, txIndex2] }\n                                ],\n                                mint_structure: {\n                                    proportional: {\n                                        ratio_model: \"constant_product\"\n                                    }\n                                }\n                            }\n                        },\n                        burn_mechanism: {},\n                        swap_mechanism: {},\n                        ticker: assetTickers.join('-')\n                    }\n                }\n            },\n            transfer: {\n                transfers: [\n                    {\n                        amount: (asset1Total - asset1Required).toString(),\n                        asset: [block1, txIndex1],\n                        output: 1\n                    },\n                    {\n                        amount: (asset2Total - asset2Required).toString(),\n                        asset: [block2, txIndex2],\n                        output: 2\n                    }\n                ]\n            }\n        };\n        const nonFeeInputs = [...usedUtxos1, ...usedUtxos2];\n        const nonFeeOutputs = [\n            { script: __1.txBuilder.compile(tx), value: 0 },\n            { address: this.account.p2wpkh().address, value: 600 },\n            { address: this.account.p2wpkh().address, value: 600 },\n            { address: this.account.p2wpkh().address, value: 600 },\n        ];\n        const { inputs, outputs } = await (0, fee_1.addFeeToTx)(this.client.network, this.account.p2wpkh().address, utxos, nonFeeInputs, nonFeeOutputs);\n        return await this.client.createAndBroadcastRawTx({\n            account: this.account.p2wpkh(),\n            inputs,\n            outputs,\n        });\n    }\n    async freeMint(ticker, divisibility, amountPerMint, supplyCap) {\n        const _supplyCap = supplyCap;\n        const tx = {\n            contract_creation: {\n                contract_type: {\n                    moa: {\n                        divisibility,\n                        live_time: 0,\n                        supply_cap: _supplyCap,\n                        ticker: ticker,\n                        mint_mechanism: { free_mint: { amount_per_mint: amountPerMint, supply_cap: _supplyCap } }\n                    }\n                },\n            },\n        };\n        const utxos = await (0, electrum_1.electrumFetchNonGlittrUtxos)(this.client, this.account.p2wpkh().address);\n        const nonFeeInputs = [];\n        const nonFeeOutputs = [\n            { script: __1.txBuilder.compile(tx), value: 0 },\n        ];\n        const { inputs, outputs } = await (0, fee_1.addFeeToTx)(this.client.network, this.account.p2wpkh().address, utxos, nonFeeInputs, nonFeeOutputs);\n        return await this.client.createAndBroadcastRawTx({\n            account: this.account.p2wpkh(),\n            inputs,\n            outputs\n        });\n    }\n    async paidMint(ticker, divisibility, mechanism, supplyCap) {\n        const _supplyCap = supplyCap ? supplyCap : undefined;\n        const tx = {\n            contract_creation: {\n                contract_type: {\n                    moa: {\n                        divisibility,\n                        live_time: 0,\n                        supply_cap: _supplyCap,\n                        ticker: ticker,\n                        mint_mechanism: {\n                            purchase: {\n                                input_asset: mechanism.input_asset,\n                                pay_to_key: mechanism.pay_to_key,\n                                ratio: mechanism.ratio,\n                            }\n                        }\n                    }\n                },\n            },\n        };\n        const utxos = await (0, electrum_1.electrumFetchNonGlittrUtxos)(this.client, this.account.p2wpkh().address);\n        const nonFeeInputs = [];\n        const nonFeeOutputs = [\n            { script: __1.txBuilder.compile(tx), value: 0 },\n        ];\n        const { inputs, outputs } = await (0, fee_1.addFeeToTx)(this.client.network, this.account.p2wpkh().address, utxos, nonFeeInputs, nonFeeOutputs);\n        return await this.client.createAndBroadcastRawTx({\n            account: this.account.p2wpkh(),\n            inputs,\n            outputs\n        });\n    }\n}\nclass ContractCall {\n    client;\n    account;\n    constructor({ client, account }) {\n        this.client = client;\n        this.account = account;\n    }\n    async mint(contractId, receiver, oracleMessage) {\n        // TODO detect if the contract is paid mint or free mint\n        const tx = {\n            contract_call: {\n                contract: [parseInt(contractId.split(\":\")[0]), parseInt(contractId.split(\":\")[1])],\n                call_type: {\n                    mint: {\n                        pointer: 1,\n                        oracle_message: oracleMessage,\n                    },\n                },\n            },\n        };\n        const utxos = await (0, electrum_1.electrumFetchNonGlittrUtxos)(this.client, this.account.p2wpkh().address);\n        const nonFeeInputs = [];\n        const nonFeeOutputs = [\n            { script: __1.txBuilder.compile(tx), value: 0 },\n            { address: receiver, value: 1000 }\n        ];\n        const { inputs, outputs } = await (0, fee_1.addFeeToTx)(this.client.network, this.account.p2wpkh().address, utxos, nonFeeInputs, nonFeeOutputs);\n        return await this.client.createAndBroadcastRawTx({\n            account: this.account.p2wpkh(),\n            inputs,\n            outputs\n        });\n    }\n}\nclass GlittrTransaction {\n    client;\n    account;\n    contractDeployment;\n    contractCall;\n    constructor({ client, account }) {\n        this.client = client;\n        this.account = account;\n        this.contractDeployment = new ContractDeployment({ client, account });\n        this.contractCall = new ContractCall({ client, account });\n    }\n    async transfer(transfers) {\n        const allTransfers = [];\n        const excessOutputs = [];\n        transfers.forEach((t, i) => {\n            allTransfers.push({\n                amount: t.amount.toString(),\n                asset: [parseInt(t.contractId.split(\":\")[0]), parseInt(t.contractId.split(\":\")[1])],\n                output: i + 1, // 0 is OpReturn\n            });\n        });\n        const utxos = await (0, electrum_1.electrumFetchNonGlittrUtxos)(this.client, this.account.p2tr().address);\n        const nonFeeInputs = [];\n        for (const transfer of transfers) {\n            const assetRequired = BigInt(transfer.amount);\n            const assetUtxos = await (0, asset_1.getAssetUtxos)(this.client, this.account.p2tr().address, transfer.contractId);\n            let assetTotal = BigInt(0);\n            for (const utxo of assetUtxos) {\n                if (assetTotal >= assetRequired)\n                    break;\n                assetTotal += BigInt(utxo.assetAmount);\n                nonFeeInputs.push({\n                    txid: utxo.txid,\n                    vout: utxo.vout,\n                    value: utxo.value,\n                    status: utxo.status\n                });\n            }\n            if (assetTotal < assetRequired) {\n                throw new Error(`Insufficient balance for asset ${transfer.contractId}. Required: ${assetRequired}, balance: ${assetTotal}`);\n            }\n            const excessAssetValue = assetTotal - assetRequired;\n            if (excessAssetValue > 0) {\n                // Add excess transfer to allTransfers array\n                allTransfers.push({\n                    asset: [parseInt(transfer.contractId.split(\":\")[0]), parseInt(transfer.contractId.split(\":\")[1])],\n                    amount: excessAssetValue.toString(),\n                    output: transfers.length + excessOutputs.length + 1\n                });\n                // Add excess asset output to sender\n                excessOutputs.push({\n                    address: this.account.p2tr().address,\n                    value: 600\n                });\n            }\n        }\n        const tx = {\n            transfer: {\n                transfers: allTransfers\n            }\n        };\n        const embed = this.client.forceCompression || this.client.network != \"regtest\"\n            ? await __1.txBuilder.compress(tx)\n            : __1.txBuilder.compile(tx);\n        const nonFeeOutputs = [\n            { script: embed, value: 0 },\n            ...transfers.map(t => ({\n                address: t.receiver,\n                value: 600\n            })),\n            ...excessOutputs\n        ];\n        const { inputs, outputs } = await (0, fee_1.addFeeToTx)(this.client.network, this.account.p2tr().address, utxos, nonFeeInputs, nonFeeOutputs);\n        return await this.client.createAndBroadcastRawTx({\n            account: this.account.p2tr(),\n            inputs,\n            outputs\n        });\n    }\n}\nexports.GlittrTransaction = GlittrTransaction;\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.txBuilder = void 0;\nconst borsh_1 = require(\"@glittr-sdk/borsh\");\nconst schema_1 = require(\"./schema\");\nconst brotli_compress_1 = require(\"brotli-compress\");\nconst bitcoinjs_lib_1 = require(\"bitcoinjs-lib\");\nconst utils_1 = require(\"../utils\");\nconst convert_1 = require(\"./convert\");\nclass TxBuilderClass {\n    constructor() { }\n    static transfer(params) {\n        return {\n            transfer: {\n                transfers: params.transfers,\n            },\n        };\n    }\n    static contractCall(params) {\n        return {\n            contract_call: {\n                contract: params.contract,\n                call_type: params.call_type,\n            },\n        };\n    }\n    static contractInstantiate(params) {\n        if (params.burn_mechanism) {\n            return {\n                contract_creation: {\n                    contract_type: {\n                        mba: {\n                            divisibility: params.divisibility,\n                            live_time: params.live_time,\n                            supply_cap: params.supply_cap,\n                            ticker: params.ticker,\n                            mint_mechanism: params.mint_mechanism,\n                            burn_mechanism: params.burn_mechanism,\n                            swap_mechanism: {}, // TODO\n                        },\n                    },\n                },\n            };\n        }\n        else {\n            return {\n                contract_creation: {\n                    contract_type: {\n                        moa: {\n                            divisibility: params.divisibility,\n                            live_time: params.live_time,\n                            supply_cap: params.supply_cap,\n                            ticker: params.ticker,\n                            mint_mechanism: params.mint_mechanism,\n                        },\n                    },\n                },\n            };\n        }\n    }\n    static freeMint(params) {\n        return {\n            contract_creation: {\n                contract_type: {\n                    moa: {\n                        divisibility: params.divisibility,\n                        live_time: params.live_time,\n                        ticker: params.ticker,\n                        supply_cap: params.supply_cap,\n                        mint_mechanism: {\n                            free_mint: {\n                                amount_per_mint: params.amount_per_mint,\n                                supply_cap: params.supply_cap,\n                            },\n                        },\n                    },\n                },\n            },\n        };\n    }\n    static paidMint(params) {\n        return {\n            contract_creation: {\n                contract_type: {\n                    moa: {\n                        divisibility: params.divisibility,\n                        live_time: params.live_time,\n                        ticker: params.ticker,\n                        supply_cap: params.supply_cap,\n                        mint_mechanism: {\n                            purchase: {\n                                input_asset: params.payment.input_asset,\n                                pay_to_key: params.payment.pay_to,\n                                ratio: params.payment.ratio,\n                            },\n                        },\n                    },\n                },\n            },\n        };\n    }\n    static createPool(params) {\n        return {\n            contract_creation: {\n                contract_type: {\n                    mba: {\n                        divisibility: params.divisibility,\n                        live_time: params.live_time,\n                        supply_cap: params.supply_cap,\n                        mint_mechanism: {\n                            collateralized: {\n                                _mutable_assets: true,\n                                input_assets: params.assets,\n                                mint_structure: {\n                                    proportional: {\n                                        ratio_model: \"constant_product\",\n                                        inital_mint_pointer_to_key: params.initial_mint_restriction, // TODO exclude only if no params\n                                    },\n                                },\n                            },\n                        },\n                        burn_mechanism: {\n                            return_collateral: {}, // TODO\n                        },\n                        swap_mechanism: {}, // TODO\n                    },\n                },\n            },\n        };\n    }\n    static customMessage(params) {\n        return params;\n    }\n    static compile(message) {\n        if (!message || Object.keys(message).length === 0) {\n            throw new Error(\"No message to compile\");\n        }\n        return (0, utils_1.encodeGlittrData)(JSON.stringify(message));\n    }\n    static async compress(message) {\n        const VERSION = 0;\n        try {\n            if (!message || Object.keys(message).length === 0) {\n                throw new Error(\"No message to compile\");\n            }\n            const encoded = (0, borsh_1.serialize)(schema_1.schema, (0, convert_1.transformOpReturnMessage)(message));\n            const compressed = await (0, brotli_compress_1.compress)(encoded);\n            const useCompressed = encoded.length > compressed.length;\n            let data = encoded;\n            if (useCompressed) {\n                data = compressed;\n            }\n            const header = new utils_1.Header(VERSION, useCompressed);\n            const payload = Buffer.concat([header.toBytes(), data]);\n            const glittrFlag = Buffer.from(\"GLITTR\", \"utf8\"); // Prefix\n            const embed = bitcoinjs_lib_1.script.compile([106, glittrFlag, payload]);\n            return embed;\n        }\n        catch (error) {\n            throw new Error(`Error compiling OP_RETURN message ${error}`);\n        }\n    }\n}\nexports.txBuilder = TxBuilderClass;\n__exportStar(require(\"./types\"), exports);\n__exportStar(require(\"./message\"), exports);\n__exportStar(require(\"./auto\"), exports);\n__exportStar(require(\"./schema\"), exports);\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GlittrSDK = void 0;\nconst bitcoinjs_lib_1 = require(\"bitcoinjs-lib\");\nconst coinselect_1 = require(\"./coinselect\");\nconst utils_1 = require(\"../utils\");\nconst address_1 = require(\"../utils/address\");\nconst bitcoin_address_validation_1 = require(\"bitcoin-address-validation\");\nconst fetch_1 = require(\"../utils/fetch\");\nconst electrum_1 = require(\"../utils/electrum\");\nconst transaction_1 = require(\"../transaction\");\nclass GlittrSDK {\n    network;\n    apiKey;\n    glittrApi;\n    electrumApi;\n    forceCompression = false;\n    constructor({ network, apiKey, glittrApi, electrumApi, forceCompression, }) {\n        this.network = network;\n        this.apiKey = apiKey;\n        this.glittrApi = glittrApi;\n        this.electrumApi = electrumApi;\n        if (forceCompression)\n            this.forceCompression = forceCompression;\n    }\n    async createTx({ address, tx, outputs, utxos, publicKey, }) {\n        outputs = outputs ?? [];\n        const addressType = (0, address_1.getAddressType)(address);\n        const embed = this.forceCompression || this.network != \"regtest\"\n            ? await transaction_1.txBuilder.compress(tx)\n            : transaction_1.txBuilder.compile(tx);\n        outputs = outputs.concat({ script: embed, value: 0 });\n        const psbt = new bitcoinjs_lib_1.Psbt({ network: (0, utils_1.getBitcoinNetwork)(this.network) });\n        const coins = await (0, coinselect_1.coinSelect)(this, utxos ?? [], outputs, 2, address, tx, address, publicKey);\n        const _inputs = coins?.inputs ?? [];\n        for (const input of _inputs) {\n            switch (addressType) {\n                case bitcoin_address_validation_1.AddressType.p2pkh:\n                    psbt.addInput({\n                        hash: input.hash,\n                        index: input.index,\n                        nonWitnessUtxo: input.nonWitnessUtxo,\n                    });\n                    break;\n                case bitcoin_address_validation_1.AddressType.p2sh:\n                    // NOTE: P2SH-P2WPKH for xverse (nested segwit)\n                    const decodedPublicKey = Buffer.from(publicKey, \"hex\");\n                    const p2wpkh = bitcoinjs_lib_1.payments.p2wpkh({\n                        pubkey: decodedPublicKey,\n                        network: (0, utils_1.getBitcoinNetwork)(this.network),\n                    });\n                    const p2sh = bitcoinjs_lib_1.payments.p2sh({\n                        redeem: p2wpkh,\n                        network: (0, utils_1.getBitcoinNetwork)(this.network),\n                    });\n                    psbt.addInput({\n                        hash: input.hash,\n                        index: input.index,\n                        nonWitnessUtxo: input.nonWitnessUtxo,\n                        redeemScript: p2sh.redeem?.output,\n                    });\n                    break;\n                case bitcoin_address_validation_1.AddressType.p2wpkh:\n                    psbt.addInput({\n                        hash: input.hash,\n                        index: input.index,\n                        witnessUtxo: input.witnessUtxo,\n                    });\n                    break;\n                case bitcoin_address_validation_1.AddressType.p2tr:\n                    psbt.addInput({\n                        hash: input.hash,\n                        index: input.index,\n                        witnessUtxo: input.witnessUtxo,\n                        tapInternalKey: input.tapInternalKey,\n                    });\n                    break;\n                default:\n                    throw new Error(`Error Address Type not supported yet`);\n            }\n        }\n        const _outputs = coins?.outputs ?? [];\n        for (const output of _outputs) {\n            if (output.address) {\n                psbt.addOutput({ address: output.address, value: output.value });\n            }\n            else if (output.script) {\n                psbt.addOutput({ script: output.script, value: output.value });\n            }\n        }\n        return psbt;\n    }\n    async broadcastTx(hex) {\n        // Validate Glittr TX\n        const isValidGlittrTx = await (0, fetch_1.fetchPOST)(`${this.glittrApi}/validate-tx`, {}, hex);\n        if (!isValidGlittrTx.is_valid)\n            throw new Error(`Invalid Glittr TX Format : ${JSON.stringify(isValidGlittrTx)}`);\n        // Broadcast TX\n        const txId = await (0, fetch_1.fetchPOST)(`${this.electrumApi}/tx`, {}, hex);\n        return txId;\n    }\n    async createAndBroadcastTx({ account, tx, outputs, utxos, }) {\n        outputs = outputs ?? [];\n        const addressType = (0, address_1.getAddressType)(account.address);\n        const embed = this.forceCompression || this.network != \"regtest\"\n            ? await transaction_1.txBuilder.compress(tx)\n            : transaction_1.txBuilder.compile(tx);\n        outputs = [{ script: embed, value: 0 }, ...outputs];\n        const psbt = new bitcoinjs_lib_1.Psbt({ network: (0, utils_1.getBitcoinNetwork)(this.network) });\n        const coins = await (0, coinselect_1.coinSelect)(this, utxos ?? [], outputs, 2, account.address, tx, account.address, account.keypair.publicKey.toString(\"hex\"));\n        const _inputs = coins?.inputs ?? [];\n        for (const input of _inputs) {\n            switch (addressType) {\n                case bitcoin_address_validation_1.AddressType.p2pkh:\n                case bitcoin_address_validation_1.AddressType.p2sh:\n                    psbt.addInput({\n                        hash: input.hash,\n                        index: input.index,\n                        nonWitnessUtxo: input.nonWitnessUtxo,\n                    });\n                    break;\n                case bitcoin_address_validation_1.AddressType.p2wpkh:\n                    psbt.addInput({\n                        hash: input.hash,\n                        index: input.index,\n                        witnessUtxo: input.witnessUtxo,\n                    });\n                    break;\n                case bitcoin_address_validation_1.AddressType.p2tr:\n                    psbt.addInput({\n                        hash: input.hash,\n                        index: input.index,\n                        witnessUtxo: input.witnessUtxo,\n                        tapInternalKey: input.tapInternalKey,\n                    });\n                    break;\n                default:\n                    throw new Error(`Error Address Type not supported yet`);\n            }\n        }\n        const _outputs = coins?.outputs ?? [];\n        for (const output of _outputs) {\n            if (output.address) {\n                psbt.addOutput({ address: output.address, value: output.value });\n            }\n            else if (output.script) {\n                psbt.addOutput({ script: output.script, value: output.value });\n            }\n        }\n        if (addressType === bitcoin_address_validation_1.AddressType.p2tr) {\n            const tweakedSigner = account.keypair.tweak(bitcoinjs_lib_1.crypto.taggedHash(\"TapTweak\", account.keypair.publicKey.subarray(1, 33)));\n            psbt.signAllInputs(tweakedSigner);\n        }\n        else {\n            psbt.signAllInputs(account.keypair);\n            const isValidSignature = psbt.validateSignaturesOfAllInputs(utils_1.validator);\n            if (!isValidSignature) {\n                throw new Error(`Error signature invalid`);\n            }\n        }\n        psbt.finalizeAllInputs();\n        const hex = psbt.extractTransaction(true).toHex();\n        // Validate Glittr TX\n        const isValidGlittrTx = await (0, fetch_1.fetchPOST)(`${this.glittrApi}/validate-tx`, {}, hex);\n        if (!isValidGlittrTx.is_valid)\n            throw new Error(`Invalid Glittr TX Format : ${JSON.stringify(isValidGlittrTx)}`);\n        // Broadcast TX\n        const txId = await (0, fetch_1.fetchPOST)(`${this.electrumApi}/tx`, {}, hex);\n        return txId;\n    }\n    async createAndBroadcastRawTx({ account, inputs, outputs, }) {\n        const addressType = (0, address_1.getAddressType)(account.address);\n        if (inputs && inputs.length === 0) {\n            throw new Error(\"No inputs provided\");\n        }\n        if (outputs && outputs.length === 0) {\n            throw new Error(\"No outputs provided\");\n        }\n        const psbt = new bitcoinjs_lib_1.Psbt({ network: (0, utils_1.getBitcoinNetwork)(this.network) });\n        for (const input of inputs) {\n            switch (addressType) {\n                case bitcoin_address_validation_1.AddressType.p2pkh:\n                    const txHex = await (0, electrum_1.electrumFetchTxHex)(this.electrumApi, this.apiKey, input.txid);\n                    psbt.addInput({\n                        hash: input.txid,\n                        index: input.vout,\n                        nonWitnessUtxo: Buffer.from(txHex, \"hex\"),\n                    });\n                    break;\n                case bitcoin_address_validation_1.AddressType.p2wpkh:\n                    const paymentOutput = bitcoinjs_lib_1.payments.p2wpkh({\n                        address: account.address,\n                        network: (0, utils_1.getBitcoinNetwork)(this.network),\n                    }).output;\n                    psbt.addInput({\n                        hash: input.txid,\n                        index: input.vout,\n                        witnessUtxo: {\n                            script: paymentOutput,\n                            value: input.value,\n                        },\n                    });\n                    break;\n                case bitcoin_address_validation_1.AddressType.p2tr:\n                    const tapInternalKey = account.keypair.publicKey.subarray(1, 33);\n                    const p2trPayments = bitcoinjs_lib_1.payments.p2tr({\n                        address: account.address,\n                        network: (0, utils_1.getBitcoinNetwork)(this.network),\n                        internalPubkey: tapInternalKey,\n                    });\n                    const p2trOutput = p2trPayments.output;\n                    psbt.addInput({\n                        hash: input.txid,\n                        index: input.vout,\n                        witnessUtxo: {\n                            script: p2trOutput,\n                            value: input.value,\n                        },\n                        tapInternalKey,\n                    });\n            }\n        }\n        for (const output of outputs) {\n            if (output.address) {\n                psbt.addOutput({ address: output.address, value: output.value });\n            }\n            else if (output.script) {\n                psbt.addOutput({ script: output.script, value: output.value });\n            }\n        }\n        if (addressType === bitcoin_address_validation_1.AddressType.p2tr) {\n            const tweakedSigner = account.keypair.tweak(bitcoinjs_lib_1.crypto.taggedHash(\"TapTweak\", account.keypair.publicKey.subarray(1, 33)));\n            psbt.signAllInputs(tweakedSigner);\n        }\n        else {\n            psbt.signAllInputs(account.keypair);\n            const isValidSignature = psbt.validateSignaturesOfAllInputs(utils_1.validator);\n            if (!isValidSignature) {\n                throw new Error(`Error signature invalid`);\n            }\n        }\n        psbt.finalizeAllInputs();\n        const hex = psbt.extractTransaction(true).toHex();\n        // Validate Glittr TX\n        const isValidGlittrTx = await (0, fetch_1.fetchPOST)(`${this.glittrApi}/validate-tx`, {}, hex);\n        if (!isValidGlittrTx.is_valid)\n            throw new Error(`Invalid Glittr TX Format : ${JSON.stringify(isValidGlittrTx)}`);\n        // console.error(`Invalid Glittr TX Format : ${isValidGlittrTx}`)\n        const txId = await (0, fetch_1.fetchPOST)(`${this.electrumApi}/tx`, { Authorization: `Bearer ${this.apiKey}` }, hex);\n        return txId;\n    }\n    async createRawTx({ address, inputs, outputs, publicKey, }) {\n        const addressType = (0, address_1.getAddressType)(address);\n        if (inputs && inputs.length === 0) {\n            throw new Error(\"No inputs provided\");\n        }\n        if (outputs && outputs.length === 0) {\n            throw new Error(\"No outputs provided\");\n        }\n        const psbt = new bitcoinjs_lib_1.Psbt({ network: (0, utils_1.getBitcoinNetwork)(this.network) });\n        for (const input of inputs) {\n            switch (addressType) {\n                case bitcoin_address_validation_1.AddressType.p2pkh:\n                    const txHex = await (0, electrum_1.electrumFetchTxHex)(this.electrumApi, this.apiKey, input.txid);\n                    psbt.addInput({\n                        hash: input.txid,\n                        index: input.vout,\n                        nonWitnessUtxo: Buffer.from(txHex, \"hex\"),\n                    });\n                    break;\n                case bitcoin_address_validation_1.AddressType.p2wpkh:\n                    const paymentOutput = bitcoinjs_lib_1.payments.p2wpkh({\n                        address,\n                        network: (0, utils_1.getBitcoinNetwork)(this.network),\n                    }).output;\n                    psbt.addInput({\n                        hash: input.txid,\n                        index: input.vout,\n                        witnessUtxo: {\n                            script: paymentOutput,\n                            value: input.value,\n                        },\n                    });\n                    break;\n                case bitcoin_address_validation_1.AddressType.p2tr:\n                    const tapInternalKey = Buffer.from(publicKey, \"hex\").subarray(1, 33);\n                    const p2trPayments = bitcoinjs_lib_1.payments.p2tr({\n                        address,\n                        network: (0, utils_1.getBitcoinNetwork)(this.network),\n                        internalPubkey: tapInternalKey,\n                    });\n                    const p2trOutput = p2trPayments.output;\n                    psbt.addInput({\n                        hash: input.txid,\n                        index: input.vout,\n                        witnessUtxo: {\n                            script: p2trOutput,\n                            value: input.value,\n                        },\n                        tapInternalKey,\n                    });\n            }\n        }\n        for (const output of outputs) {\n            if (output.address) {\n                psbt.addOutput({ address: output.address, value: output.value });\n            }\n            else if (output.script) {\n                psbt.addOutput({ script: output.script, value: output.value });\n            }\n        }\n        return psbt;\n    }\n}\nexports.GlittrSDK = GlittrSDK;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./types\"), exports);\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./asset\"), exports);\n__exportStar(require(\"./fee\"), exports);\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bitcoinjs_lib_1 = require(\"bitcoinjs-lib\");\nconst secp256k1_1 = __importDefault(require(\"@bitcoinerlab/secp256k1\"));\n(0, bitcoinjs_lib_1.initEccLib)(secp256k1_1.default);\n__exportStar(require(\"./account\"), exports);\n__exportStar(require(\"./client\"), exports);\n__exportStar(require(\"./transaction\"), exports);\n__exportStar(require(\"./utils\"), exports);\n__exportStar(require(\"./utxo\"), exports);\n__exportStar(require(\"./types\"), exports);\n__exportStar(require(\"./helper\"), exports);\n"],
  "mappings": "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",
  "names": ["i", "a", "_", "i", "n2", "n", "e", "b", "v", "k", "h", "a", "b", "x", "y", "u", "v", "q", "r", "m", "n", "P", "S", "Z", "g", "n2", "i", "f", "p", "d", "c", "c", "p", "i", "s", "P", "n", "d", "window", "f", "wbits", "a", "m", "E", "t", "b", "v", "x", "y", "x2", "x3", "N", "p", "z", "i", "P", "b3", "n", "I", "k2", "d", "f", "s", "r", "l", "h", "R", "u2", "k", "e", "q", "C", "Z", "o", "u", "tv5", "c1", "c2", "i", "a", "b", "H", "k", "p", "m", "L", "u", "e", "x", "y", "P", "a", "b", "y", "P", "b2", "b22", "k", "n", "k2", "c", "x", "p", "m", "d", "t", "e", "r", "s", "R", "i", "require_dist", "import_dist", "e", "n", "k", "d", "i", "x", "h", "p", "t", "P", "a", "b", "A", "B", "s", "import_dist", "import_dist", "import_dist", "Buffer", "crypto", "import_dist", "import_dist", "R", "ReflectApply", "ReflectOwnKeys", "NumberIsNaN", "n", "i", "m", "w", "once", "import_dist", "import_dist", "_", "require_shams", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "isNaN", "a", "import_dist", "import_dist", "import_dist", "e", "import_dist", "e", "import_dist", "import_dist", "import_dist", "import_dist", "concatty", "a", "b", "i", "slicy", "Empty", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "e", "import_dist", "O", "import_dist", "import_dist", "undefined", "e", "doEval", "stringToPath", "getBaseIntrinsic", "i", "import_dist", "import_dist", "import_dist", "e", "import_dist", "s", "import_dist", "e", "import_dist", "_", "e", "import_dist", "forEachArray", "i", "forEachString", "forEachObject", "k", "forEach", "import_dist", "import_dist", "g", "i", "import_dist", "import_dist", "hasPropertyDescriptors", "e", "import_dist", "import_dist", "import_dist", "import_dist", "g", "i", "e", "import_dist", "require_types", "import_dist", "f", "e", "import_dist", "import_dist", "getOwnPropertyDescriptors", "i", "f", "x", "_", "n", "l", "d", "e", "o", "self", "import_dist", "i", "Buffer", "v", "s", "p", "n", "c", "_", "import_dist", "err", "self", "import_dist", "NodeError", "i", "import_dist", "require_browser", "import_dist", "_", "import_dist", "Buffer", "_", "realHasInstance", "l", "import_dist", "keys", "v", "self", "import_dist", "Buffer", "r", "i", "self", "p", "c", "n", "import_dist", "onlegacyfinish", "onfinish", "onend", "onerror", "onclose", "onrequest", "import_dist", "createReadableStreamAsyncIterator", "import_dist", "import_dist", "EElistenerCount", "Buffer", "debug", "p", "n", "i", "self", "x", "l", "import_dist", "n", "import_dist", "import_dist", "i", "import_dist", "import_dist", "Buffer", "i", "import_dist", "Buffer", "M", "i", "a", "b", "c", "d", "x", "n", "m", "k", "s", "require_hash_base", "import_dist", "Buffer", "i", "import_dist", "Buffer", "i", "t", "x", "n", "a", "b", "c", "d", "e", "m", "k", "s", "import_dist", "Buffer", "i", "import_dist", "Buffer", "s", "b", "c", "d", "M", "W", "a", "e", "i", "t", "H", "import_dist", "Buffer", "s", "b", "c", "d", "M", "W", "a", "e", "i", "t", "H", "require_sha256", "import_dist", "Buffer", "x", "y", "z", "M", "W", "a", "b", "c", "d", "e", "f", "g", "h", "i", "H", "import_dist", "Buffer", "H", "import_dist", "Buffer", "x", "y", "z", "a", "b", "M", "W", "i", "H", "h", "l", "import_dist", "Buffer", "H", "h", "l", "require_sha", "import_dist", "import_dist", "import_dist", "Buffer", "_", "e", "require_browser", "import_dist", "require_src", "import_dist", "i", "x", "j", "import_dist", "import_dist", "Buffer", "import_dist", "import_dist", "import_dist", "h", "import_dist", "x", "d", "p", "t", "require_src", "import_dist", "require_ecpair", "import_dist", "import_dist", "import_dist", "import_dist", "t", "r", "e", "n", "s", "i", "o", "h", "c", "a", "f", "u", "l", "import_dist", "import_dist", "e", "import_dist", "u", "import_dist", "e", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "t", "n", "i", "import_dist", "t", "n", "i", "import_dist", "i", "c", "import_dist", "require_utils", "import_dist", "o", "m", "k", "k2", "exports", "p", "import_dist", "e", "feeRate", "_a", "a", "require_types", "import_dist", "import_dist", "EncodeBuffer", "DecodeBuffer", "require_utils", "import_dist", "d", "b", "p", "ErrorSchema", "import_dist", "o", "m", "k", "k2", "v", "BorshSerializer", "i", "import_dist", "BorshDeserializer", "r", "x", "i", "import_dist", "o", "m", "k", "k2", "v", "import_dist", "p", "A", "n", "d", "h", "e", "b", "O", "k", "t", "s", "v", "c", "u", "o", "r", "a", "i", "l", "m", "I", "E", "z", "C", "import_dist", "f", "g", "w", "x", "_", "y", "import_dist", "require_types", "import_dist", "import_dist", "import_dist", "t", "i", "import_dist", "o", "m", "k", "k2", "exports", "p", "import_dist", "require_types", "import_dist", "import_dist", "o", "m", "k", "k2", "exports", "p", "require_types", "import_dist", "import_dist", "o", "m", "k", "k2", "exports", "p", "require_dist", "import_dist", "o", "m", "k", "k2", "exports", "p"]
}
