import { Account } from "../account";
import { GlittrSDK } from "../client";
import { OracleMessageSigned } from "./calltype/types";
import { PurchaseBurnSwap } from "./shared";
type TransferParams = {
    contractId: string;
    amount: string;
    receiver: string;
};
declare class ContractDeployment {
    private client;
    private account;
    constructor({ client, account }: {
        client: GlittrSDK;
        account: Account;
    });
    liquidityPoolInitiate(inputAsset: [string, string], inputAmount: [string, string]): Promise<any>;
    freeMint(ticker: string, divisibility: number, amountPerMint: string, supplyCap?: string): Promise<any>;
    paidMint(ticker: string, divisibility: number, mechanism: PurchaseBurnSwap, supplyCap?: string): Promise<any>;
}
declare class ContractCall {
    private client;
    private account;
    constructor({ client, account }: {
        client: GlittrSDK;
        account: Account;
    });
    mint(contractId: string, receiver: string, oracleMessage?: OracleMessageSigned): Promise<string>;
}
export declare class GlittrTransaction {
    private client;
    private account;
    readonly contractDeployment: ContractDeployment;
    readonly contractCall: ContractCall;
    constructor({ client, account }: {
        client: GlittrSDK;
        account: Account;
    });
    transfer(transfers: TransferParams[]): Promise<string>;
}
export {};
//# sourceMappingURL=auto.d.ts.map