/// <reference types="node" />
import { BitcoinUTXO, Output } from "../utxo";
import { OpReturnMessage } from "../transaction";
import { GlittrSDK } from ".";
export declare const FEE_TX_EMPTY_SIZE: number;
export declare const FEE_TX_INPUT_BASE: number;
export declare const FEE_TX_INPUT_PUBKEYHASH = 107;
export declare const FEE_TX_INPUT_SCRIPTHASH = 1;
export declare const FEE_TX_INPUT_SEGWIT: number;
export declare const FEE_TX_INPUT_SEGWIT_SCRIPTHASH = 0;
export declare const FEE_TX_INPUT_TAPROOT: number;
export declare const FEE_TX_OUTPUT_BASE: number;
export declare const FEE_TX_OUTPUT_PUBKEYHASH = 25;
export declare const FEE_TX_OUTPUT_SCRIPTHASH = 23;
export declare const FEE_TX_OUTPUT_SEGWIT = 22;
export declare const FEE_TX_OUTPUT_SEGWIT_SCRIPTHASH = 34;
export declare const FEE_TX_OUTPUT_TAPROOT = 34;
export type CoinSelectParams = {};
export declare function coinSelect(client: GlittrSDK, inputs: BitcoinUTXO[], outputs: Output[], feeRate: number, address: string, tx: OpReturnMessage, changeOutputAddress?: string, publicKey?: string): Promise<{
    fee: number;
    inputs?: undefined;
    outputs?: undefined;
    txFee?: undefined;
    tx?: undefined;
} | {
    inputs: ({
        hash: string;
        index: number;
        nonWitnessUtxo: Buffer;
        witnessUtxo?: undefined;
        tapInternalKey?: undefined;
    } | {
        hash: string;
        index: number;
        witnessUtxo: {
            script: Buffer;
            value: number;
        };
        nonWitnessUtxo?: undefined;
        tapInternalKey?: undefined;
    } | {
        hash: string;
        index: number;
        witnessUtxo: {
            script: Buffer;
            value: number;
        };
        tapInternalKey: Buffer | undefined;
        nonWitnessUtxo?: undefined;
    })[];
    outputs: Output[];
    fee: number;
    txFee: number;
    tx: OpReturnMessage;
}>;
export declare function dustThreshold(feeRate: number): number;
//# sourceMappingURL=coinselect.d.ts.map