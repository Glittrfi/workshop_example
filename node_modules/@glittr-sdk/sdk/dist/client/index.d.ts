import { Psbt } from "bitcoinjs-lib";
import { Account } from "../account/types";
import { Network } from "../types";
import { BitcoinUTXO, Output } from "../utxo";
import { OpReturnMessage } from "../transaction";
export type CreateTxParams = {
    address: string;
    tx: OpReturnMessage;
    outputs?: Output[];
    utxos?: BitcoinUTXO[];
    publicKey?: string;
};
export type CreateBroadcastTxParams = {
    account: Account;
    tx: OpReturnMessage;
    outputs?: Output[];
    utxos?: BitcoinUTXO[];
};
export type CreateAndBroadcastRawTxParams = {
    account: Account;
    inputs: BitcoinUTXO[];
    outputs: Output[];
};
export type CreateRawTxParams = {
    address: string;
    inputs: BitcoinUTXO[];
    outputs: Output[];
    publicKey: string;
};
type GlittrSDKParams = {
    network: Network;
    apiKey: string;
    glittrApi: string;
    electrumApi: string;
    forceCompression?: boolean;
};
export declare class GlittrSDK {
    network: Network;
    apiKey: string;
    glittrApi: string;
    electrumApi: string;
    forceCompression: boolean;
    constructor({ network, apiKey, glittrApi, electrumApi, forceCompression, }: GlittrSDKParams);
    createTx({ address, tx, outputs, utxos, publicKey, }: CreateTxParams): Promise<Psbt>;
    broadcastTx(hex: string): Promise<any>;
    createAndBroadcastTx({ account, tx, outputs, utxos, }: CreateBroadcastTxParams): Promise<any>;
    createAndBroadcastRawTx({ account, inputs, outputs, }: CreateAndBroadcastRawTxParams): Promise<any>;
    createRawTx({ address, inputs, outputs, publicKey, }: CreateRawTxParams): Promise<Psbt>;
}
export {};
//# sourceMappingURL=index.d.ts.map