"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeBase26 = void 0;
const const_1 = require("../helper/const");
const varuint_1 = require("./varuint");
function encodeBase26(str) {
    str = str.toUpperCase();
    // should be u128
    let number = 0n;
    // should be u32
    let spacersValue = 0n;
    let charIndex = 0;
    for (let i = 0; i < str.length; i += 1) {
        const c = str.charAt(i);
        if (c >= "A" && c <= "Z") {
            if (charIndex > 0) {
                number += 1n;
            }
            number *= 26n;
            number += BigInt(c.charCodeAt(0) - "A".charCodeAt(0));
            if (number > const_1.U128_MAX_NUMBER) {
                throw new Error("Character is too large to be encoded");
            }
            charIndex += 1;
        }
        else if (c === "." || c === "â€¢") {
            const flag = 1n << BigInt(charIndex);
            if ((spacersValue & flag) === 0n) {
                spacersValue |= flag;
            }
        }
        else {
            throw new Error(`Invalid character in ticker: ${c}`);
        }
    }
    if (spacersValue > 0n) {
        return {
            number: (0, varuint_1.encodeVaruint)(number),
            spacers: (0, varuint_1.encodeVaruint)(spacersValue)
        };
    }
    else {
        return {
            number: (0, varuint_1.encodeVaruint)(number),
        };
    }
}
exports.encodeBase26 = encodeBase26;
