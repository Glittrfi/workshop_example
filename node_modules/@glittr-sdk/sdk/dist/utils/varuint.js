"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeVaruint = exports.encodeVaruint = void 0;
const const_1 = require("../helper/const");
function encodeVaruint(t) {
    let n = BigInt(t);
    if (n < 0n) {
        throw new Error("Value must be positive");
    }
    if (n > const_1.U128_MAX_NUMBER) {
        throw new Error(`Can't encode value more than ${const_1.U128_MAX_NUMBER}`);
    }
    const arr = new Uint8Array(const_1.BUFFER_MAX_VARUINT_LENGTH);
    let i = 0;
    while (n >> 7n > 0) {
        arr[i] = Number((n & 255n) | 128n);
        n >>= 7n;
        i += 1;
    }
    arr[i] = Number(n);
    return arr.slice(0, i + 1);
}
exports.encodeVaruint = encodeVaruint;
function decodeVaruint(varIntLike) {
    if (typeof varIntLike == "string") {
        return BigInt(varIntLike);
    }
    let finalValue = BigInt(0);
    for (let i = 0; i < varIntLike.length; i += 1) {
        const byte = varIntLike[i];
        const value = byte & 127;
        finalValue = finalValue | (BigInt(value) << (7n * BigInt(i)));
    }
    if (finalValue < 0n) {
        // this can't be happen, just for safety
        throw new Error("Value is minus, something wrong");
    }
    return finalValue;
}
exports.decodeVaruint = decodeVaruint;
